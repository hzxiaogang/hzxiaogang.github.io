import{_ as s,o as a,c as n,V as l}from"./chunks/framework.364d6ed5.js";const F=JSON.parse('{"title":"数组的扩展","description":"","frontmatter":{"title":"数组的扩展","date":"2022-06-15T13:59:17.000Z","permalink":"/pages/774213/","categories":["JS和TS","ES6"],"tags":[null]},"headers":[],"relativePath":"JS和TS/ES6/数组的扩展.md","filePath":"JS和TS/ES6/数组的扩展.md","lastUpdated":1685623283000}'),o={name:"JS和TS/ES6/数组的扩展.md"},p=l(`<h2 id="_1-扩展与运算符" tabindex="-1">1. 扩展与运算符 <a class="header-anchor" href="#_1-扩展与运算符" aria-label="Permalink to &quot;1. 扩展与运算符&quot;">​</a></h2><p>扩展运算符是<strong>三个点</strong>（<code>...</code>）。它好比<code>rest</code>参数的<strong>逆运算</strong>，将一个数组转化为用逗号分隔的<strong>参数序列</strong>。主要用于<strong>函数调用</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> numbers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="替代函数的-apply-方法" tabindex="-1">替代函数的 apply()方法 <a class="header-anchor" href="#替代函数的-apply-方法" aria-label="Permalink to &quot;替代函数的 apply()方法&quot;">​</a></h4><p>由于扩展运算符可以扩展数组，所以就不再需要使用<code>apply()</code>方法将<strong>数组转为函数的参数</strong>了</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// es5 的写法</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">f</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> args </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">f</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;"> args)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// es6 写法</span></span>
<span class="line"><span style="color:#82AAFF;">f</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_2-静态方法" tabindex="-1">2 静态方法 <a class="header-anchor" href="#_2-静态方法" aria-label="Permalink to &quot;2 静态方法&quot;">​</a></h2><h3 id="_2-1-array-from" tabindex="-1">2.1 Array.from() <a class="header-anchor" href="#_2-1-array-from" aria-label="Permalink to &quot;2.1 Array.from()&quot;">​</a></h3><h3 id="_2-2-array-of" tabindex="-1">2.2 Array.of() <a class="header-anchor" href="#_2-2-array-of" aria-label="Permalink to &quot;2.2 Array.of()&quot;">​</a></h3><h2 id="_3-实例方法" tabindex="-1">3 实例方法 <a class="header-anchor" href="#_3-实例方法" aria-label="Permalink to &quot;3 实例方法&quot;">​</a></h2><h3 id="_3-1-find-和-findindex" tabindex="-1">3.1.find 和 findIndex <a class="header-anchor" href="#_3-1-find-和-findindex" aria-label="Permalink to &quot;3.1.find 和 findIndex&quot;">​</a></h3><p>Array.prototype.find()</p><p>find 方法返回数组中满足提供测试函数的<strong>第一个元素的值</strong>，否则返回 undefined</p><ol><li>语法 <ul><li><code>arr.find(callback[, thisArg])</code></li></ul></li><li>参数 <ul><li>callback 在数组每一项上执行的函数，接收三个参数 <ol><li>element 当前遍历到的元素 可选</li><li>index 当前遍历到的索引 可选</li><li>array 数组本身 可选</li></ol></li><li>thisArg 执行回调时 用作 <strong>this</strong> 的对象 可选</li></ul></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> array </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">130</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">44</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> found </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(found)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 12  值</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Array.prototype.findIndex()</p><p>findIndex 方法返回数组中满足提供的测试函数的<strong>第一个元素的索引</strong>，否则返回 -1</p><ol><li>语法 <ul><li><code>arr.findIndex(callback[, thisArg])</code></li></ul></li><li>参数 <ul><li>参数同 <strong>find</strong> 方法,</li></ul></li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> array </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">130</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">44</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> found </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findIndex</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">element</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> element </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(found)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1 索引</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-2-copywithin" tabindex="-1">3.2 copyWithin() <a class="header-anchor" href="#_3-2-copywithin" aria-label="Permalink to &quot;3.2 copyWithin()&quot;">​</a></h3><p>Array.prototype.copyWithin()</p><p><strong>copyWith()</strong> 方法浅复制数组的一部分到同一数组的另一个位置，并返回它，不会改变原数组的长度。</p><ol><li><p>语法</p><ul><li><code>arr.copyWithin(target[, start[, end]])</code></li></ul></li><li><p>参数</p><ul><li>target：0 为基底的索引，<strong>复制序列</strong>到该位置。如果是负数，target 将从末尾开始计算</li><li>start ：0 为基底的索引，开始复制元素的起始位置，如果是负数，start 将从末尾计算</li><li>end ： 0 为基低的索引,copyWithin 将会拷贝到该位置，但不包括 end 这个位置的元素。如果是负数，end 将从末尾开始计算。如果 end 被忽略，将会一直复制到数组结尾</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> array1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">e</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">array1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copyWithin</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [&#39;d&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;]</span></span>
<span class="line"><span style="color:#A6ACCD;">array1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copyWithin</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [&#39;d&#39;,&#39;d&#39;,&#39;e&#39;,&#39;d&#39;,&#39;e&#39;]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h3 id="_3-3-fill" tabindex="-1">3.3 fill() <a class="header-anchor" href="#_3-3-fill" aria-label="Permalink to &quot;3.3 fill()&quot;">​</a></h3><p>Array.prototype.fill()</p><p>fill 方法用一个固定的值，填充一个数组从起始索引到终止索引内的全部元素。不包括终止索引。</p><ol><li><p>语法</p><ul><li><code>arr.fill(value[, start[, end]])</code></li></ul></li><li><p>参数</p><ul><li>value : 用来填充数组的值</li><li>start : 起始索引，可选，默认值为 <strong>0</strong></li><li>end : 终止索引，默认值为 <strong>this.length</strong></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [1,2,0,0]</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [6,6,6,6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h3 id="_3-4-entries-keys-values" tabindex="-1">3.4 entries()，keys(),values() <a class="header-anchor" href="#_3-4-entries-keys-values" aria-label="Permalink to &quot;3.4 entries()，keys(),values()&quot;">​</a></h3><h3 id="_3-5-includes" tabindex="-1">3.5 includes() <a class="header-anchor" href="#_3-5-includes" aria-label="Permalink to &quot;3.5 includes()&quot;">​</a></h3><p>Array.prototype.includes()</p><p>includes 方法用来判断一个数组是否包含一个指定的值，包含则返回 <strong>true</strong>，不包含则返回 <strong>false</strong></p><ol><li>语法<br><code>arr.includes(valueToFind[, fromIndex])</code></li><li>参数</li></ol><ul><li>valueToFind 需要查找的元素值</li><li>fromIndex 从 fromIndex 索引处开始查找。 如果为负值，则按升序 <strong>array.lengt + fromIndex</strong> 的索引开始搜索 (既从末尾开始往前跳 fromIndex 的绝对值个索引，然后往后搜索)。默认值为 0。 如果 fromIndex 小于 0 且 <strong>array.lengt + fromIndex</strong> 的值小于 0 , 则从数组的其实位置开始搜索。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inclides</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-6-flat-flatmap" tabindex="-1">3.6 flat(),flatMap() <a class="header-anchor" href="#_3-6-flat-flatmap" aria-label="Permalink to &quot;3.6 flat(),flatMap()&quot;">​</a></h3><h3 id="_3-7-at" tabindex="-1">3.7 at() <a class="header-anchor" href="#_3-7-at" aria-label="Permalink to &quot;3.7 at()&quot;">​</a></h3><h2 id="_4-数组空位" tabindex="-1">4.数组空位 <a class="header-anchor" href="#_4-数组空位" aria-label="Permalink to &quot;4.数组空位&quot;">​</a></h2>`,37),e=[p];function t(r,c,i,y,C,D){return a(),n("div",null,e)}const d=s(o,[["render",t]]);export{F as __pageData,d as default};
