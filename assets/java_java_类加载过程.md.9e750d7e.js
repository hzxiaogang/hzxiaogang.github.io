import{_ as s,o as a,c as n,V as l}from"./chunks/framework.364d6ed5.js";const o="/classloader.jpeg",e="/jloader.png",p="/d_c_l.png",c="/zdyjzq.png",r="/ljzq.png",h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"java/java/类加载过程.md","filePath":"java/java/类加载过程.md","lastUpdated":1691325528000}'),t={name:"java/java/类加载过程.md"},i=l('<h2 id="_1-类加载过程图" tabindex="-1">1. 类加载过程图 <a class="header-anchor" href="#_1-类加载过程图" aria-label="Permalink to &quot;1. 类加载过程图&quot;">​</a></h2><img src="'+o+'"><img src="'+e+'"><ul><li><ol><li>加载 ： 在硬盘上查找并通过<code>IO</code>读入字节码文件至<code>JVM</code>虚拟机方法区，同时在堆中创建<code>Class</code>对象</li></ol></li><li><ol start="2"><li>验证 ： 校验字节码文件的准确性</li></ol></li><li><ol start="3"><li>准备 : 为类的静态变量分配内存，并将其初始化为默认值。此阶段仅仅只为静态变量分配内存，并且设置该变量的初始值。对于<code>final static</code>修饰的变量，编译的时候就分配了。也不会分配实例变量的内存。</li></ol></li><li><ol start="4"><li>解析 ： 把类中的符号引用转换为直接引用</li></ol></li><li><ol start="5"><li>初始化 ： 对类的静态变量初始化为指定的值，执行静态代码块</li></ol></li></ul><h2 id="_2-类加载底层详细流程图" tabindex="-1">2. 类加载底层详细流程图 <a class="header-anchor" href="#_2-类加载底层详细流程图" aria-label="Permalink to &quot;2. 类加载底层详细流程图&quot;">​</a></h2><img src="'+p+`"><h2 id="_3-类加载器介绍和双亲委派机制" tabindex="-1">3. 类加载器介绍和双亲委派机制 <a class="header-anchor" href="#_3-类加载器介绍和双亲委派机制" aria-label="Permalink to &quot;3. 类加载器介绍和双亲委派机制&quot;">​</a></h2><p><code>JVM</code>给我们提供了<strong>三种</strong>类加载器。<strong>引导类加载器</strong>,<strong>扩展类加载器</strong>,<strong>应用程序类加载器</strong>。它们会<strong>加载不同目录下的字节码文件</strong>。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-LVcP4" id="tab-Oeqbkn0" checked="checked"><label for="tab-Oeqbkn0">TestJDKClassLoader.java</label></div><div class="blocks"><div class="language-java active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">sun</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">net</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">spi</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">nameservice</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">dns</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">DNSNameService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestJDKClassLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// getClassLoader 方法返回该类的类加载器</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">DNSNameService</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">TestJDKClassLoader</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getClassLoader</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getClass</span><span style="color:#89DDFF;">().</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 打印结果</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// null</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// sun.misc.Launcher$ExtClassLoader</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// sun.misc.Launcher$AppClassLoader</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></div></div><ul><li><ol><li><code>String</code>类属于<code>java.lang包</code>，而<code>java.lang</code>属于<code>SDK</code>下<code>jre/lib</code>目录下的<code>rt.jar</code>,所以是<strong>引导类加载器</strong>去加载。之所以打印是<code>null</code>,是因为引导类加载器是由<code>C+++</code>实现的。所以在<code>Java</code>程序返回的是<code>null</code>。而扩展类加载器和应用程序类加载器是<code>Java</code>实现的，所以不是<code>null</code>。</li></ol></li><li><ol start="2"><li><code>DNSNameService</code>类属于<code>JDK</code>下<code>jre/lib/ext</code>目录下的<code>jar</code>中的类。所以是用<strong>扩展类加载器</strong>去加载。</li></ol></li><li><ol start="3"><li><code>TestJDKClassLoader</code>类属于我们自己定义的类。所以使用<strong>应用程序类加载器</strong>去加载。</li></ol></li><li><p>4.我们查看<code>Launcher</code>源码可知。<code>AppClassLoader</code>(应用程序加载器)和<code>ExtClassLoader</code>（扩展类加载器）是 <code>Launcher</code>类的<strong>静态内部类</strong>。所以打印<code>AppClassLoader</code>和<code>ExtClassLoader</code>的时候会有<code>sun.misc.Launcher$</code>这部分前缀。</p></li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Launcher</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">AppClassLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">URLClassLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ExtClassLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">URLClassLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_1-引导类加载器" tabindex="-1">1. 引导类加载器 <a class="header-anchor" href="#_1-引导类加载器" aria-label="Permalink to &quot;1. 引导类加载器&quot;">​</a></h3><p>负责加载<code>jre/lib</code> 目录下的核心类库，比如<code>rt.jar</code>，<code>charsets.jar</code>。我们常用的<code>java.lang</code>，<code>java.io</code>等包都在<code>rt.jar</code>中。</p><p>可在<code>JDK</code>安装目录查看到<code>jre/lib</code>目录。</p><h3 id="_2-扩展类加载器" tabindex="-1">2.扩展类加载器 <a class="header-anchor" href="#_2-扩展类加载器" aria-label="Permalink to &quot;2.扩展类加载器&quot;">​</a></h3><p>负责加载<code>jre/lib/ext</code>目录中的<code>JAR</code>包</p><p>可在<code>JDK</code>安装目录查看到<code>jre/lib/ext</code>目录。</p><h3 id="_3-应用程序类加载器" tabindex="-1">3.应用程序类加载器 <a class="header-anchor" href="#_3-应用程序类加载器" aria-label="Permalink to &quot;3.应用程序类加载器&quot;">​</a></h3><p>是<code>Java</code>虚拟机（<code>JVM</code>）的一种类加载器，也是<code>ClassLoader</code>的子类，它负责从<code>CLASSPATH</code>环境变量中指定的路径或<code>JAR</code>文件加载类，通常也称为系统类加载器。</p><h3 id="_4-自定义加载器" tabindex="-1">4. 自定义加载器 <a class="header-anchor" href="#_4-自定义加载器" aria-label="Permalink to &quot;4. 自定义加载器&quot;">​</a></h3><p>负责加载用户自定义路劲下的<code>class</code>字节码文件</p><img src="`+c+'"><h3 id="_5-双亲委派机制" tabindex="-1">5. 双亲委派机制 <a class="header-anchor" href="#_5-双亲委派机制" aria-label="Permalink to &quot;5. 双亲委派机制&quot;">​</a></h3><img src="'+r+`"><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-KMpdP" id="tab-0fI7E25" checked="checked"><label for="tab-0fI7E25">TestJDKClassLoader.java</label></div><div class="blocks"><div class="language-java active line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestJDKClassLoader</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 获取系统默认类加载器，默认是应用类加载器</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">ClassLoader</span><span style="color:#A6ACCD;"> appClassLoader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ClassLoader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSystemClassLoader</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">the appClassLoader:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> appClassLoader</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 获取应用类加载器的父加载器（扩展类加载器）</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">ClassLoader</span><span style="color:#A6ACCD;"> extClassLoader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> appClassLoader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParent</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">the extClassLoader:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> extClassLoader</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 获取扩展类加载器的父加载器 （引导类加载器）</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">ClassLoader</span><span style="color:#A6ACCD;"> bootstrapLoader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> extClassLoader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getParent</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">the bootstrapLoader:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> bootstrapLoader</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 打印</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the appClassLoader:sun.misc.Launcher$AppClassLoader@18b4aac2 应用程序类加载器</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the extClassLoader:sun.misc.Launcher$ExtClassLoader@1b6d3586 扩展类加载器</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// the bootstrapLoader:null // 表示引导类加载器</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></div></div><p>为什么要设计双亲委派机制？</p><ul><li><ol><li>避免类的重复加载： 当父加载器已经加载了该类时，就没有必要子<code>ClassLoader</code>再加载一次，保证加载类的唯一性。</li></ol></li><li><ol start="2"><li>沙箱安全机制 ： 自己写的<code>java.lang.String.class</code>类不会被加载，这样可以防止核心<code>API</code>库被随意篡改。</li></ol></li></ul>`,27),D=[i];function y(d,C,F,A,b,u){return a(),n("div",null,D)}const g=s(t,[["render",y]]);export{h as __pageData,g as default};
