import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const p="/assets/image-20230920144724569.eee25c72.png",o="/assets/image-20230920144817259.b3b7f5b6.png",e="/assets/image-20230920145222237.d1436336.png",r="/assets/image-20230920145832248.c519a84d.png",t="/assets/image-20230920150053539.93f7327d.png",c="/assets/image-20230920150820586.757187b5.png",D="/assets/image-20230920152914953.f251d097.png",y="/assets/image-20230920153539794.ddb04fb8.png",i="/assets/image-20230920153747969.2e4ebd32.png",F="/assets/image-20230920153938532.1c78c723.png",C="/assets/image-20230920154426855.03610aee.png",A="/assets/image-20230920155256936.be846230.png",u="/assets/image-20231030175135923.b405acb9.png",m="/assets/image-20230920162233023.edd1efb6.png",b="/assets/image-20230920170321964.cedd9cfb.png",d="/assets/image-20230920173945917.84ba6325.png",g="/assets/image-20230920174240890.ac476d6a.png",h="/assets/image-20230920175522855.b8dcbe8b.png",E="/assets/image-20230920180255963.14cdbb01.png",v="/assets/image-20230920181238196.7f2070ab.png",q="/assets/image-20230920182052660.3c7352c4.png",k="/assets/image-20230920182929316.2cce2bf5.png",_="/assets/image-20230920184241212.3ae713c7.png",f="/assets/batch-241308ac9ed97b3a1fbf0e5e6417f74d.d83174bc.png",M="/assets/image-20230921084341199.935b7c55.png",S="/assets/image-20230921084941471.9d84a338.png",B="/assets/image-20230921085902768.22142f94.png",T="/assets/image-20230921090152463.89b686e5.png",Q="/assets/image-20230921090759453.66fa12ab.png",R="/assets/image-20230921090834297.9ecb357b.png",x="/assets/image-20230921100754264.987b2638.png",O="/assets/image-20230921100400451.5c818ff1.png",w="/assets/image-20230921101440138.556ae3f8.png",P="/assets/image-20230921101515804.7de4077e.png",L="/assets/image-20230921102815540.10b00365.png",j="/assets/image-20230921103238252.e4752c7c.png",I="/assets/image-20230921104620932.be957dcf.png",z="/assets/image-20230921105137514.53684746.png",N="/assets/image-20230921111411450.964a85a0.png",H="/assets/image-20230921110050499.50df1e76.png",X="/assets/image-20230921110856125.2224c9df.png",G="/assets/image-20230921110938591.4d3aea8a.png",U="/assets/image-20230921111657808.5f2698c5.png",K="/assets/image-20230921111809183.b0463afe.png",J="/assets/image-20230921111959791.f44617b1.png",W="/assets/image-20230921112139468.364287a4.png",V="/assets/image-20230921112317174.c905a579.png",$="/assets/image-20230921112834490.559536fe.png",Y="/assets/image-20230921112945116.2765b9d5.png",Z="/assets/image-20230921094349939.81bd72df.png",ss="/assets/image-20230921122513717.ad9ce2ee.png",ns="/assets/1460000042837116.86db534b.png",as="/assets/1460000042837117.15cec90f.png",ls="/assets/image-20230921142824296.f49f24ce.png",ps="/assets/image-20230921144326643.6a4ea453.png",os="/assets/image-20230921152038145.5554bffe.png",es="/assets/image-20230921152709404.5d58ab49.png",rs="/assets/image-20230921153221646.4ba71fde.png",ts="/assets/image-20230921173141309.e0df4952.png",cs="/assets/image-20230921155948231.1f242328.png",Ds="/assets/image-20230921160510745.7d0744e5.png",ys="/assets/image-20230921160610871.575b80a6.png",is="/assets/image-20230921160850795.14219946.png",Fs="/assets/image-20230921161118750.79e30989.png",Cs="/assets/image-20230921174457533.a32c6ae3.png",As="/assets/image-20230921174844108.0956b1b0.png",us="/assets/image-20230922123900775.575d5cd8.png",Ms=JSON.parse('{"title":"消息中间件RocketMQ","description":"","frontmatter":{},"headers":[],"relativePath":"java/springboot/消息中间件RocketMQ.md","filePath":"java/springboot/消息中间件RocketMQ.md","lastUpdated":1706582708000}'),ms={name:"java/springboot/消息中间件RocketMQ.md"},bs=l(`<h1 id="消息中间件rocketmq" tabindex="-1">消息中间件RocketMQ <a class="header-anchor" href="#消息中间件rocketmq" aria-label="Permalink to &quot;消息中间件RocketMQ&quot;">​</a></h1><h1 id="一、消息中间件简介" tabindex="-1">一、消息中间件简介 <a class="header-anchor" href="#一、消息中间件简介" aria-label="Permalink to &quot;一、消息中间件简介&quot;">​</a></h1><p>MQ完整的英文单词是Message Queue.</p><p>Queue表示队列，有先进先出的特性.</p><p>我们今天需要学习的中间件本质上就是一个功能齐全且强大的队列.</p><p>我们先看看消息中间件可以帮我们解决什么样的开发问题</p><h2 id="_1-1-应用场景" tabindex="-1">1.1 应用场景 <a class="header-anchor" href="#_1-1-应用场景" aria-label="Permalink to &quot;1.1 应用场景&quot;">​</a></h2><h3 id="_1-1-1-业务解耦" tabindex="-1">1.1.1 业务解耦 <a class="header-anchor" href="#_1-1-1-业务解耦" aria-label="Permalink to &quot;1.1.1 业务解耦&quot;">​</a></h3><p>假设我们现在有这样的需求: 用户在支付完成之后，需要给用户增加积分</p><p>伪代码如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transational</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">payOrder</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 修改订单的状态</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 远程调用积分服务(同步调用)</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 通知仓库进行出库操作</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//  ......</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong><img src="`+p+'" alt="image-20230920144724569" style="zoom:80%;"></strong></p><p>假设现在积分微服务出现异常了</p><p><strong><img src="'+o+`" alt="image-20230920144817259" style="zoom:80%;"></strong></p><p>这样的情况，积分微服务出现异常就会影响订单微服务的业务流程，此时说明订单微服务和积分微服务存在耦合的关系。订单微服务依赖积分微服务。</p><p>这时候可以使用消息中间件，实现订单微服务和积分微服务的解耦.</p><p>我们的业务伪代码如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Transational</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">payOrder</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 修改订单的状态</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 发送消息到消息中间件</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 通知仓库进行出库操作</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//  ......</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong><img src="`+e+'" alt="image-20230920145222237" style="zoom:80%;"></strong></p><p>这样处理的话，订单微服务只是负责给消息中间件发送消息（把以前远程调用积分服务传递的参数封装成消息对象发给消息中间件），然后积分服务从消息中间件中获取消息，然后去执行相关的业务逻辑。</p><p>这样处理的的话，即使积分微服务宕机了，也并不会影响订单微服务业务流程，从而实现了订单微服务和积分微服务的解耦。</p><h3 id="_1-1-2-削峰填谷" tabindex="-1">1.1.2 削峰填谷 <a class="header-anchor" href="#_1-1-2-削峰填谷" aria-label="Permalink to &quot;1.1.2 削峰填谷&quot;">​</a></h3><p>假设现在有这样的情况，有一个系统，非高峰期的访问量有2000请求/s,中午大概有20分钟的高峰期，此时访问量有5000请求/s，但是我们的系统单台机器业务处理能力只有3000请求/s，如下图所示:</p><p><strong><img src="'+r+'" alt="image-20230920145832248" style="zoom:80%;"></strong></p><p>目前这种情况的话，在高峰期有5000请求/s访问，服务器处理不过来的话，就有可能会奔溃了.</p><p>那应该如何解决呢?</p><p>我们最容易想到的就是，对服务器做集群，提高处理能力，如下图所示:</p><p><strong><img src="'+t+'" alt="image-20230920150053539" style="zoom:80%;"></strong></p><p>我们这样进行部署的话，即使高峰期有5000请求/s的访问，流量被平均分配到两台的机器上了，每台机器就只有2500请求/s，是低于单台服务器的处理能力的.</p><p>上面的方案虽然可以解决我们的问题，但是资源有些浪费。我们就只有20分钟的流量高峰期，为了这20分钟多部署了一台服务器. 95%时间只需要一台服务器。</p><p>这个问题和餐厅接待顾客的场景挺像的，假设某个餐厅有50个座位，周一到周五逛街的人比较少，50个座位完全足够了，但是周末的时间逛街的人多了，50个座位是不够的? 那么我们生活中餐厅是怎么处理的呢?</p><p>这时候我们就可以使用MQ来实现削峰填谷</p><p><strong><img src="'+c+'" alt="image-20230920150820586" style="zoom:80%;"></strong></p><p>当业务高峰期的时候，超过处理能力的请求会在消息中间件中排队，等流量高峰过去之后，在慢慢把这些请求处理掉. 流量处理图如下:</p><p><strong><img src="'+D+`" alt="image-20230920152914953" style="zoom:80%;"></strong></p><p>当请求流量 &gt; 处理能力的时候，请求进入消息中间件等待</p><p>当请求流量&lt; 处理能力的时候，开始处理消息中间件中的请求</p><h3 id="_1-1-3-数据分发" tabindex="-1">1.1.3 数据分发 <a class="header-anchor" href="#_1-1-3-数据分发" aria-label="Permalink to &quot;1.1.3 数据分发&quot;">​</a></h3><p>假设我们现在有这样的需求,A系统会产生一些业务数据会放入到Redis中，然后需要通知B,C系统从Redis中获取数据，进行处理。伪代码如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pubilc </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processData</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 处理业务数据</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 远程调用B服务</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 远程调用C服务</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong><img src="`+y+`" alt="image-20230920153539794" style="zoom:80%;"></strong></p><p>假设现在我们系统结构发生变化了,B服务不在使用了，然后D服务上线了，也需要这些业务数据.</p><p>这样的变化导致A服务的处理代码需要发生变化</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pubilc </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processData</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 处理业务数据</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 远程调用C服务</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 远程调用D服务</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong><img src="`+i+`" alt="image-20230920153747969" style="zoom:80%;"></strong></p><p>这样的话，如果我们下游的服务变更比较频繁的情况下，服务A的代码就需要频繁变更.</p><p>那么我们可以使用MQ来实现数据分发,伪代码如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pubilc </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">processData</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 处理业务数据</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">// 发送消息</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong><img src="`+F+'" alt="image-20230920153938532" style="zoom:80%;"></strong></p><p>使用MQ的话，我们就可以实现，服务A只需要发送1条消息给消息中间件，其他的服务监听消息中间件即可，这样下游的服务的变更并不会影响到服务A的代码</p><h2 id="_1-2-常用消息中间件" tabindex="-1">1.2 常用消息中间件 <a class="header-anchor" href="#_1-2-常用消息中间件" aria-label="Permalink to &quot;1.2 常用消息中间件&quot;">​</a></h2><ul><li><strong>ActiveMQ</strong>：ActiveMQ是Apache出品,比较老的一个开源的消息中间件,以前在中小企业应用广泛，目前市场份额较小.</li><li><strong>Kafka</strong>：Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。</li><li><strong>RabbitMQ</strong>：RabbitMQ 是一个基于Erlang 语言开发的消息中间件,RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。对数据的一致性,稳定性和可靠性要求比较高的场景</li><li><strong>RocketMQ</strong>：RocketMQ 是阿里巴巴在 2012 年开源的分布式消息中间件，目前已经捐赠给 Apache 软件基金会，并于 2017 年 9 月 25 日成为 Apache 的顶级项目。作为经历过多次阿里巴巴双十一这种“超级工程”的洗礼并有稳定出色表现的国产中间件，以其高性能、低延时和高可靠等特性近年来已经也被越来越多的国内企业使用。淘宝内部的交易系统使用了淘宝自主研发的 Notify 消息中间件，使用 MySQL 作为消息存储媒介，可完全水平扩容，为了进一步降低成本，我们认为存储部分可以进一步优化，2011 年初，Linkin开源了 Kafka 这个优秀的消息中间件，淘宝中间件团队在对 Kafka 做过充分 Review 之后， Kafka 无限消息堆积，高效的持久化速度吸引了我们，但是同时发现这个消息系统主要定位于日志传输，对于使用在淘宝交易、订单、充值等场景下还有诸多特性不满足，为此我们重新用 Java 语言编写了 RocketMQ ，定位于非日志的可靠消息传输（日志场景也OK），目前 RocketMQ 在阿里集团被广泛应用在订单，交易，充值，流计算，消息推送，日志流式处理， binlog 分发等场景。</li></ul><p><strong>常用消息中间级对比</strong></p><p><strong><img src="'+C+'" alt="image-20230920154426855"></strong></p><h2 id="_1-3-rocketmq核心概念" tabindex="-1">1.3 RocketMQ核心概念 <a class="header-anchor" href="#_1-3-rocketmq核心概念" aria-label="Permalink to &quot;1.3 RocketMQ核心概念&quot;">​</a></h2><p><strong><img src="'+A+`" alt="image-20230920155256936"></strong></p><ul><li><strong>生产者Producer</strong>: 负责生产消息，一般由业务系统负责生产消息。</li><li><strong>消费者Consumer</strong>: 负责消费消息，执行业务逻辑处理</li><li><strong>命名服务Name Server</strong>: 命名服务充当路由消息的提供者。生产者或消费者能够通过名字服务查找各主题相应的Broker IP列表。</li><li><strong>代理服务器Broker Server</strong>：消息中转角色，负责存储消息、转发消息。</li><li><strong>消息主题Topic</strong>：表示一类消息的集合，每个主题包含若干条消息，每条消息只能属于一个主题，是RocketMQ进行消息订阅的基本单位</li><li><strong>消息队列MessageQueue</strong>：对于每个Topic都可以设置一定数量的消息队列用来进行数据的写入/读取</li><li><strong>消息内容Message</strong>：消息系统所传输信息的物理载体，生产和消费数据的最小单位，每条消息必须属于一个主题。</li><li><strong>标签Tag</strong>： 为消息设置的标志，用于同一主题下区分不同类型的消息。</li></ul><h1 id="二、rocketmq的安装部署" tabindex="-1">二、RocketMQ的安装部署 <a class="header-anchor" href="#二、rocketmq的安装部署" aria-label="Permalink to &quot;二、RocketMQ的安装部署&quot;">​</a></h1><p>我们将在Linux环境下进行部署</p><h2 id="_2-1-在linux中部署rocketmq" tabindex="-1">2.1 在Linux中部署RocketMQ <a class="header-anchor" href="#_2-1-在linux中部署rocketmq" aria-label="Permalink to &quot;2.1 在Linux中部署RocketMQ&quot;">​</a></h2><ul><li><p>环境要求，需要JDK11</p></li><li><p>安装步骤</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 上传rocketmq-all-4.9.4-bin-release.zip到/usr/local</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用解压命令进行解压</span></span>
<span class="line"><span style="color:#FFCB6B;">unzip</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/rocketmq-all-4.9.4-bin-release.zip</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 软件文件名重命名</span></span>
<span class="line"><span style="color:#FFCB6B;">mv</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">/usr/local/rocketmq-all-4.9.4-bin-release/</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">/usr/local/rocketmq-4.9/</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 设置环境变量</span></span>
<span class="line"><span style="color:#FFCB6B;">vi</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/profile</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 追加内容</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> JAVA_HOME</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/usr/local/jdk11</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> ROCKETMQ_HOME</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">/usr/local/rocketmq-4.9</span></span>
<span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> PATH</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">$JAVA_HOME</span><span style="color:#C3E88D;">/bin:</span><span style="color:#A6ACCD;">$ROCKETMQ_HOME</span><span style="color:#C3E88D;">/bin:</span><span style="color:#A6ACCD;">$PATH</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 重新加载环境变量的内容</span></span>
<span class="line"><span style="color:#82AAFF;">source</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/profile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>启动RocketMQ</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 修改脚本中的JVM相关参数,修改文件如下</span></span>
<span class="line"><span style="color:#FFCB6B;">vi</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">/usr/local/rocketmq-4.9/bin/runbroker.sh</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 修改参数内容如下:</span></span>
<span class="line"><span style="color:#A6ACCD;">JAVA_OPT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;\${</span><span style="color:#A6ACCD;">JAVA_OPT</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> -server -Xms2g -Xmx2g</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">vi</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">/usr/local/rocketmq-4.9/bin/runserver.sh</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 修改启动参数配置</span></span>
<span class="line"><span style="color:#A6ACCD;">JAVA_OPT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;\${</span><span style="color:#A6ACCD;">JAVA_OPT</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 1.启动NameServer</span></span>
<span class="line"><span style="color:#FFCB6B;">nohup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mqnamesrv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 2.查看启动日志</span></span>
<span class="line"><span style="color:#FFCB6B;">tail</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/logs/rocketmqlogs/namesrv.log</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 1.启动Broker</span></span>
<span class="line"><span style="color:#FFCB6B;">nohup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mqbroker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-n</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">localhost:9876</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-c</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/rocketmq-4.9/conf/broker.conf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 2.查看启动日志</span></span>
<span class="line"><span style="color:#FFCB6B;">tail</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">~/logs/rocketmqlogs/broker.log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>关闭RocketMQ</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 关闭nameserver:</span></span>
<span class="line"><span style="color:#FFCB6B;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mqshutdown</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">namesrv</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 关闭broker </span></span>
<span class="line"><span style="color:#FFCB6B;">sh</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">mqshutdown</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">broker</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="_2-2-在linux中部署管控台" tabindex="-1">2.2 在Linux中部署管控台 <a class="header-anchor" href="#_2-2-在linux中部署管控台" aria-label="Permalink to &quot;2.2 在Linux中部署管控台&quot;">​</a></h2><p>将资料中的管控台文件夹下的这两个文件上传到Linux服务器</p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">application.yml</span></span>
<span class="line"><span style="color:#A6ACCD;">rocketmq-dashboard-1.0.1-SNAPSHOT.jar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>修改application.yml中的nameserver的地址</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">port</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9999</span></span>
<span class="line"><span style="color:#F07178;">rocketmq</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">namesrvAddrs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">192.168.202.129:9876</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>启动程序</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">java</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-jar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rocketmq-dashboard-1.0.1-SNAPSHOT.jar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后访问<code>http://localhost:9999</code> 就可以看到如下的界面了，在集群中能看到数据才说明启动成功了.</p><p><strong><img src="`+u+'" alt="image-20231030175135923"></strong></p><h1 id="三、核心功能讲解" tabindex="-1">三、核心功能讲解 <a class="header-anchor" href="#三、核心功能讲解" aria-label="Permalink to &quot;三、核心功能讲解&quot;">​</a></h1><h2 id="_3-1-环境准备" tabindex="-1">3.1 环境准备 <a class="header-anchor" href="#_3-1-环境准备" aria-label="Permalink to &quot;3.1  环境准备&quot;">​</a></h2><p>创建项目结构如下:</p><p><strong><img src="'+m+`" alt="image-20230920162233023"></strong></p><h2 id="_3-2-入门案例-生产者" tabindex="-1">3.2 入门案例-生产者 <a class="header-anchor" href="#_3-2-入门案例-生产者" aria-label="Permalink to &quot;3.2 入门案例-生产者&quot;">​</a></h2><h3 id="_3-2-1-生产者配置" tabindex="-1">3.2.1 生产者配置 <a class="header-anchor" href="#_3-2-1-生产者配置" aria-label="Permalink to &quot;3.2.1 生产者配置&quot;">​</a></h3><ul><li><p>在producer-demo的pom.xml中添加SpringBoot相关配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">parent</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.springframework.boot</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">spring-boot-starter-parent</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">2.6.11</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">relativePath</span><span style="color:#89DDFF;">/&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!-- lookup parent from repository --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">parent</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">properties</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">maven.compiler.source</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">11</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">maven.compiler.source</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">maven.compiler.target</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">11</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">maven.compiler.target</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">properties</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependencies</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.springframework.boot</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">spring-boot-starter-test</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.apache.rocketmq</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">rocketmq-spring-boot-starter</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">2.2.2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependencies</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>在producer-demo中的application.yml中添加如下配置</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">rocketmq</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name-server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">192.168.20.161:9876</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">producer</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">group</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-group</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>添加启动类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootApplication</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ProducerDemo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        SpringApplication</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ProducerDemo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="_3-2-2-测试类编写" tabindex="-1">3.2.2 测试类编写 <a class="header-anchor" href="#_3-2-2-测试类编写" aria-label="Permalink to &quot;3.2.2 测试类编写&quot;">​</a></h3><p><strong>方式一</strong>:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootTest</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ProducerTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Autowired</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">RocketMQTemplate</span><span style="color:#A6ACCD;"> rocketMQTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//注意需要导入的是Junit5的@Test注解,否则RocketMQTemplate会注入为空</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//定义消息主题</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Message</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MessageBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">withPayload</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">同步消息1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SendResult</span><span style="color:#A6ACCD;"> sendResult </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">syncSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> msg</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发送结果:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">sendResult</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSendStatus</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>方式二</strong>:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootTest</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ProducerTest</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Autowired</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">RocketMQTemplate</span><span style="color:#A6ACCD;"> rocketMQTemplate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//定义消息主题</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">SendResult</span><span style="color:#A6ACCD;"> sendResult </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">syncSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">同步消息2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发送结果:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">sendResult</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSendStatus</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_3-3-入门案例-消费者" tabindex="-1">3.3 入门案例-消费者 <a class="header-anchor" href="#_3-3-入门案例-消费者" aria-label="Permalink to &quot;3.3 入门案例-消费者&quot;">​</a></h2><h3 id="_3-3-1-消费者配置" tabindex="-1">3.3.1 消费者配置 <a class="header-anchor" href="#_3-3-1-消费者配置" aria-label="Permalink to &quot;3.3.1 消费者配置&quot;">​</a></h3><ul><li><p>在consumer-demo的pom.xml中添加SpringBoot相关配置</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">parent</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.springframework.boot</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">spring-boot-starter-parent</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">2.6.11</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">relativePath</span><span style="color:#89DDFF;">/&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!-- lookup parent from repository --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">parent</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">properties</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">maven.compiler.source</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">11</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">maven.compiler.source</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">maven.compiler.target</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">11</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">maven.compiler.target</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">properties</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependencies</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.springframework.boot</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">spring-boot-starter-web</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.apache.rocketmq</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">rocketmq-spring-boot-starter</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">2.2.2</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">version</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependencies</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>在consumer-demo中的application.yml中添加如下配置</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">rocketmq</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name-server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">192.168.20.161:9876</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>添加启动类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootApplication</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ConsumerDemo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        SpringApplication</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ConsumerDemo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ul><h3 id="_3-3-2-消费监听类定义" tabindex="-1">3.3.2 消费监听类定义 <a class="header-anchor" href="#_3-3-2-消费监听类定义" aria-label="Permalink to &quot;3.3.2 消费监听类定义&quot;">​</a></h3><p><strong>方式一</strong>:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RocketMQListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">MessageExt</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMessage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">MessageExt</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,消息内容:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBody</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们可以通过MessageExt获取消息中间件的消息，MessageExt除了存储消息内容本身之外，还存储了消息存储的大小，消息存储的队列，消息存储的主机等信息，如果我们需要这些额外信息的话，我们在监听类中就使用MessageExt类型接收，否则就是传过来什么类型，我们就使用什么类型去接收.</p><p><strong>方式二</strong>:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RocketMQListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMessage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,消息内容:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-3-3-多线程消费测试" tabindex="-1">3.3.3 多线程消费测试 <a class="header-anchor" href="#_3-3-3-多线程消费测试" aria-label="Permalink to &quot;3.3.3 多线程消费测试&quot;">​</a></h3><p>我们知道队列符合先进先出的原则，我们在生产者中发送10条的消息.</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendMoreMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++){</span></span>
<span class="line"><span style="color:#A6ACCD;">         rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">syncSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">同步消息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发送完毕</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后我们启动消费者进行消息消费，观察一下控制台输出的结果</p><p><strong><img src="`+b+'" alt="image-20230920170321964" style="zoom:80%;"></strong></p><p>认真观察发现，队列先进先出的特性，这10条消息怎么不是按照0~9的顺序消费呢?</p><p>RocketMQ的消费者默认是多线程获取消息，然后执行消息。在一个队列中的消息确实是先进先出，但是由于CPU线程间切换的问题，后面取出消息的线程有可能更先的执行完，所以看到上面的执行结果.</p><h2 id="_3-4-消息发送三种方式" tabindex="-1">3.4 消息发送三种方式 <a class="header-anchor" href="#_3-4-消息发送三种方式" aria-label="Permalink to &quot;3.4 消息发送三种方式&quot;">​</a></h2><p>消息从生产者发送到消息中间件有三种形式.</p><p>消息发送指的是灰色框包裹的部分，特指发送的过程</p><p><strong><img src="'+d+'" alt="image-20230920173945917" style="zoom:80%;"></strong></p><h3 id="_3-4-1-同步消息" tabindex="-1">3.4.1 同步消息 <a class="header-anchor" href="#_3-4-1-同步消息" aria-label="Permalink to &quot;3.4.1 同步消息&quot;">​</a></h3><p>同步消息指的是生产者发送消息之后，需要等待消息在消息中间件持久化完毕之后并响应回来之后才能执行后续的代码.</p><p><strong><img src="'+g+`" alt="image-20230920174240890" style="zoom:80%;"></strong></p><p>代码如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">SendResult</span><span style="color:#A6ACCD;"> sendResult </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">syncSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">同步消息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发送结果:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">sendResult</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSendStatus</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其他的业务  (等待140ms)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>适用场景</strong>: 重要的消息通知</p><h3 id="_3-4-2-异步消息" tabindex="-1">3.4.2 异步消息 <a class="header-anchor" href="#_3-4-2-异步消息" aria-label="Permalink to &quot;3.4.2 异步消息&quot;">​</a></h3><p>异步消息指的是生产者发送消息之后，不需要等待消息在消息中间件持久化完毕，可以直接执行后续代码，同时开启一个新的线程监听存储结果，当消息中间件存储完毕后，会通知消息生产者消息的存储结果.</p><p><strong><img src="`+h+`" alt="image-20230920175522855" style="zoom:80%;"></strong></p><p>代码如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息发送前</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">asyncSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">异步消息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SendCallback</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onSuccess</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">SendResult</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">sendResult</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,发送结果:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">sendResult</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSendStatus</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onException</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Throwable</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">});</span></span>
<span class="line"><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息发送后</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其他的业务  (无需等待)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    TimeUnit</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SECONDS</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">InterruptedException</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    e</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">printStackTrace</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>这段代码输出的结果:</p><p><strong><img src="`+E+'" alt="image-20230920180255963" style="zoom:80%;"></strong></p><p>可以看到发送结果是由另外一个线程执行的，而且是在消息发送后执行的.(因为是开了其他线程异步执行的缘故)</p><p><strong>注意</strong>: 我们需要在最后面进行sleep睡眠，因为代码一发送代码就往下执行了，方法执行完了，整个程序就关闭了，这时候的SendCallback就无法获取到消息中间件返回的存储结果，所以我们需要稍微睡眠一下，等消息中间件存储完毕并响应结果之后再把程序关闭掉.</p><p>因为我们这里使用的是Junit的缘故，单元测试方法运行完程序就关闭了，所以我们需要使用sleep睡眠来测试结果。实际使用的时候，我们会在web环境使用，程序并不会关闭，所以实际情况并不需要进行睡眠.</p><p><strong>适用场景</strong>: 异步消息通常用在对响应时间敏感的业务场景，即发送端不能容忍长时间地等待Broker的响应。</p><p><strong>可能出现的问题</strong>: 有可能业务执行完毕了，但是在SendCallback得到的结果是消息存储失败，这种情况我们就需要在业务中记录消息，然后当SendCallback得到结果是存储失败的时候进行消息重发.</p><p><strong>同步和异步的理解</strong>:</p><ul><li><strong>同步</strong>: 你自己排队购买iPhone 15时，这是同步操作。你必须亲自等待在排队中，直到轮到你购买。在这个过程中，你不能同时进行其他任务，因为你必须亲自参与购买过程。</li><li>异步: 当你雇佣一个人帮你排队，然后自己去做其他事情，等他购买之后再付钱，这是异步操作。你雇佣的人代表你执行购买任务，而你可以自由地进行其他任务，如工作、休息或者做其他事情。你只需在他成功购买后支付费用，而不必等待整个购买过程。这种方式允许你并行执行多个任务，提高了效率。</li></ul><h3 id="_3-4-3-一次性消息" tabindex="-1">3.4.3 一次性消息 <a class="header-anchor" href="#_3-4-3-一次性消息" aria-label="Permalink to &quot;3.4.3 一次性消息&quot;">​</a></h3><p>这种方式主要用在不特别关心发送结果的场景，例如日志发送。</p><p><strong><img src="'+v+`" alt="image-20230920181238196" style="zoom:80%;"></strong></p><p>代码如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">一次性消息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 其他的业务  (无需等待)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_3-5-消息刷盘机制" tabindex="-1">3.5 消息刷盘机制 <a class="header-anchor" href="#_3-5-消息刷盘机制" aria-label="Permalink to &quot;3.5 消息刷盘机制&quot;">​</a></h2><p>刷盘机制指的是消息中间件接收到生产者发送的消息后，将消息持久化的磁盘的过程.</p><p>也就是灰色框框起来的部分，无论是同步发送、异步发送，还是一次性发送，都涉及到消息持久化，千万不要和前面的同步发送和异步发送搞混了。</p><p><strong><img src="`+q+'" alt="image-20230920182052660"></strong></p><h3 id="_3-5-1-同步刷盘" tabindex="-1">3.5.1 同步刷盘 <a class="header-anchor" href="#_3-5-1-同步刷盘" aria-label="Permalink to &quot;3.5.1 同步刷盘&quot;">​</a></h3><p>同步刷盘指的是消息中间件接收到消息生产者发送的消息之后，需要将消息持久化到磁盘之后，才会给消息生产者响应消息存储的结果.</p><p><strong><img src="'+k+'" alt="image-20230920182929316" style="zoom:67%;"></strong></p><h3 id="_3-5-2-异步刷盘" tabindex="-1">3.5.2 异步刷盘 <a class="header-anchor" href="#_3-5-2-异步刷盘" aria-label="Permalink to &quot;3.5.2 异步刷盘&quot;">​</a></h3><p>异步刷盘指的是消息中间件接收到消息生产者发送的消息之后，将消息存储到操作系统的PageCache缓存之后就可以给消息生产者响应存储结果了，然后由操作系统将数据持久化到磁盘中(不由程序控制)</p><p><strong><img src="'+_+`" alt="image-20230920184241212" style="zoom:67%;"></strong></p><h3 id="_3-5-3-两种机制对比" tabindex="-1">3.5.3 两种机制对比 <a class="header-anchor" href="#_3-5-3-两种机制对比" aria-label="Permalink to &quot;3.5.3 两种机制对比&quot;">​</a></h3><ul><li><p>同步刷盘更加可靠，异步刷盘速度更快</p></li><li><p>异步刷盘存在消息丢失的风险（比如消息存储到操作系统PageCache后，通知消息生产者消息已经存储成功了，在操作系统将消息持久化到磁盘之前，此时操作系统奔溃了。消息生产者得到的结果是消息存储成功了，但是消息却没有存到磁盘中.）</p></li><li><p>RocketMQ默认使用的是异步刷盘，可以在broker.conf文件中看到</p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">brokerClusterName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> DefaultCluster</span></span>
<span class="line"><span style="color:#F07178;">brokerName</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> broker-a</span></span>
<span class="line"><span style="color:#F07178;">brokerId</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 0</span></span>
<span class="line"><span style="color:#F07178;">deleteWhen</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 04</span></span>
<span class="line"><span style="color:#F07178;">fileReservedTime</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 48</span></span>
<span class="line"><span style="color:#F07178;">brokerRole</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ASYNC_MASTER</span></span>
<span class="line"><span style="color:#F07178;">flushDiskType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ASYNC_FLUSH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果我们需要修改刷盘机制为同步刷盘，可以修改配置文件broker.conf中的<code>flushDiskType</code></p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">flushDiskType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SYNC_FLUSH</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>重启broker即可.</p></li></ul><h2 id="_3-6-批量消息发送" tabindex="-1">3.6 批量消息发送 <a class="header-anchor" href="#_3-6-批量消息发送" aria-label="Permalink to &quot;3.6 批量消息发送&quot;">​</a></h2><p>在对吞吐率有一定要求的情况下，RocketMQ可以将一些消息聚成一批以后进行发送，可以增加吞吐率，并减少API和网络调用次数。</p><p><strong><img src="`+f+`" alt="batch"></strong></p><p><strong>代码实现</strong>:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendBatchMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">Message</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++){</span></span>
<span class="line"><span style="color:#A6ACCD;">        list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MessageBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">withPayload</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">批量消息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">SendResult</span><span style="color:#A6ACCD;"> sendResult </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">syncSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">sendResult</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getSendStatus</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>注意</strong>:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">这里调用非常简单，将消息打包成 Collection&lt;Message&gt; msgs 传入方法中即可，需要注意的是批量消息的大小不能超过 1MB（否则需要自行分割）,最后一个参数表示发送的超时时间。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-7-消息消费两种方式" tabindex="-1">3.7 消息消费两种方式 <a class="header-anchor" href="#_3-7-消息消费两种方式" aria-label="Permalink to &quot;3.7 消息消费两种方式&quot;">​</a></h2><p>指的是在消费者做集群的情况下，消息是如何消费的。</p><p>假设现在消息中间件中有5个消息，如果只有一个消费者的情况，那么这个消费者会消费所有的消息</p><p><strong><img src="`+M+'" alt="image-20230921084341199" style="zoom:80%;"></strong></p><p>如果有多个消费者情况，消息如何消费?</p><p><strong><img src="'+S+'" alt="image-20230921084941471" style="zoom:80%;"></strong></p><h3 id="_3-7-1-集群模式" tabindex="-1">3.7.1 集群模式 <a class="header-anchor" href="#_3-7-1-集群模式" aria-label="Permalink to &quot;3.7.1 集群模式&quot;">​</a></h3><p>默认是集群模式<code>MessageModel.CLUSTERING</code>，消费者采用负载均衡方式消费消息，多个消费者共同消费队列消息，每个消费者处理的消息不同。</p><p><strong><img src="'+B+`" alt="image-20230921085902768" style="zoom:80%;"></strong></p><p>我们要启动两个消费者，IDEA中需要启动两个程序，配置如下:</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">#命令行参数得优先级高于项目中得配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">-Dserver.port=8081</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong><img src="`+T+`" alt="image-20230921090152463"></strong></p><p>接着我们往这个主题发送10个消息</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendOnewayMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++){</span></span>
<span class="line"><span style="color:#A6ACCD;">        rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">测试消息</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>消息发送完毕之后，在ConsumerDemo8080的程序中看到的输出结果如下:</p><p><strong><img src="`+Q+'" alt="image-20230921090759453" style="zoom:80%;"></strong></p><p>消息发送完毕之后，在ConsumerDemo8081的程序中看到的输出结果如下:</p><p><strong><img src="'+R+'" alt="image-20230921090834297" style="zoom:80%;"></strong></p><p>可以看到10条消息分别被两个消费者消费（队列中的消息只会给集群中的其中一台机器所消费）</p><p><strong>注意</strong>: 有些同学做这个实验的时候，可能实验结果会和上面不一样.</p><ul><li>情况1: consumer8080消费6个消息 consumer8081消费4个消息</li><li>情况2: consumer8080消费5个消息 consumer8081消费5个消息</li></ul><p>这个情况，我们在3.7.3章节给大家讲解哈.</p><p><strong>应用场景</strong>: 比如订单服务支付完毕之后给积分服务发送消息，进行增加积分的业务场景. 比如积分服务部署了2台机器，我们希望一个订单只能增加一次积分的情况，我们就应该使用集群的消费模式.</p><p><strong><img src="'+x+'" alt="image-20230921100754264" style="zoom:80%;"></strong></p><h3 id="_3-7-2-广播模式" tabindex="-1">3.7.2 广播模式 <a class="header-anchor" href="#_3-7-2-广播模式" aria-label="Permalink to &quot;3.7.2 广播模式&quot;">​</a></h3><p>消费者采用广播的方式<code>MessageModel.BROADCASTING</code>消费消息，每个消费者消费的消息都是相同的</p><p><strong><img src="'+O+'" alt="image-20230921100400451"></strong></p><p>我们需要修改监听器注解@RocketMQMessageListener中的消息监听模式<code>MessageModel.BROADCASTING</code></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">helloGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">messageModel</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MessageModel</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BROADCASTING</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>重启consumer8080和consumer8081这两个服务，接着我们往这个主题发送10个消息</p><p>消息发送完毕之后，在ConsumerDemo8080的程序中看到的输出结果如下:</p><p><strong><img src="'+w+'" alt="image-20230921101440138" style="zoom:80%;"></strong></p><p>消息发送完毕之后，在ConsumerDemo8081的程序中看到的输出结果如下:</p><p><strong><img src="'+P+'" alt="image-20230921101515804" style="zoom:80%;"></strong></p><p>可以看到10条消息同时给两个消费者所消费（队列中的消息只会给集群中的所有机器消费）</p><p><strong>应用场景</strong>: 比如实现类似Nacos的配置动态刷新，如果Nacos中某个配置修改了，所有用到该配置的服务都同步更新本地的缓存.</p><p><strong><img src="'+L+'" alt="image-20230921102815540" style="zoom:80%;"></strong></p><p>比如我们有seckill-server的服务，部署了两台的服务器，里面都有StockController，里面的stockLimit字段是从Nacos的远程配置中加载值，而且贴了@RefreshScope注解，如果Nacos更新了数值，本地的程序的字段的值也会同步更新. 这时候我们可以使用到广播的机制，通知到这两个服务，然后同时更新本地的缓存.</p><p><strong><img src="'+j+'" alt="image-20230921103238252" style="zoom:80%;"></strong></p><h3 id="_3-7-3-消息队列结构" tabindex="-1">3.7.3 消息队列结构 <a class="header-anchor" href="#_3-7-3-消息队列结构" aria-label="Permalink to &quot;3.7.3 消息队列结构&quot;">​</a></h3><p>我们在3.6.1演示的时候说了，在消费者集群的情况下，往MQ中发送10条消息. 有可能有这两种的情况:</p><ul><li>情况1: consumer8080消费6个消息 consumer8081消费4个消息</li><li>情况2: consumer8080消费5个消息 consumer8081消费5个消息</li></ul><p>出现这样的情况，其实和MQ队列的存储结构有关，我们接下来讲一下消息队列的结构.</p><p>假设现在主题下只有一个队列，会存在什么问题呢?</p><p><strong><img src="'+I+'" alt="image-20230921104620932" style="zoom:80%;"></strong></p><p>生产者可能做集群，每台机器中都会有很多线程会发送消息.</p><p>消息中间件使用多线程的方式接收消息，然后往消息队列中存储消息.</p><p><strong><img src="'+z+'" alt="image-20230921105137514" style="zoom:80%;"></strong></p><p>这样的话，我们多线程接收到消息生产者的请求之后，需要将消息都存储到消息队列中，这时候就涉及到线程安全的问题，要保证线程安全的话，我们就需要在往消息队列中写消息的时候进行加锁的处理。</p><p>加锁之后，同一时间就只能有一个线程往消息队列中存储数据，这样性能太差了，而且现在的服务器都是多核的处理器，同一时间只有一个线程操作，其他线程都等待的话，没有发挥多核处理器的性能。</p><p>RocketMQ每个Topic下默认有四个队列，这样的话，多线程同时可以往四个队列中写入数据，相当于四个线程并行的写入数据了. (这样设计降低了写的并发度，提高消息写入的速度)</p><p>这个可以在管控台中看到主题下的队列配置:</p><p><strong><img src="'+N+'" alt="image-20230921111411450" style="zoom:80%;"></strong></p><p><strong><img src="'+H+'" alt="image-20230921110050499" style="zoom:80%;"></strong></p><p>那么消息生产者往消息中间件发送消息，四个队列是如何存储的呢?</p><p>在消息生产者发送消息前，维护了一个<code>index</code>变量，会先计算该消息发送到哪个队列中，具体算法如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> queueID </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">++)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> 队列长度</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>每次发送<code>index</code>会进行递增，然后模上队列长度，得到需要发送的队列ID，最终消息就存储到对应的队列中了.</p><p>第一次发送:</p><p><strong><img src="'+X+'" alt="image-20230921110856125" style="zoom:80%;"></strong></p><p>第二次发送:</p><p><strong><img src="'+G+'" alt="image-20230921110938591" style="zoom:80%;"></strong></p><p>那么多个队列的情况，消费者是如何处理这些队列的?</p><ul><li><p>情况1,只有一个消费者的情况</p><p><strong><img src="'+U+'" alt="image-20230921111657808" style="zoom:80%;"></strong></p></li><li><p>情况2,有两个消费者集群的情况</p><p><strong><img src="'+K+'" alt="image-20230921111809183" style="zoom:80%;"></strong></p></li><li><p>情况3，有三个消费者集群的情况</p><p><strong><img src="'+J+'" alt="image-20230921111959791"></strong></p></li><li><p>情况4，有四个消费者集群的情况</p><p><strong><img src="'+W+'" alt="image-20230921112139468" style="zoom:80%;"></strong></p></li><li><p>情况5,有五个消费者集群的情况</p><p><strong><img src="'+V+'" alt="image-20230921112317174"></strong></p><p>当消费者个数&gt;读队列个数的话，会有消费者空闲，不会处理消息</p></li></ul><p>理解了队列的结构之后，我们来分析一下之前的情况:</p><ul><li><p>情况1: consumer8080消费6个消息 consumer8081消费4个消息</p><p>当我们发0号消息的时候，<code>int queueId = index++ % 队列长度</code> 计算出来的queueId=0或者queueId=2</p><p><strong><img src="'+$+'" alt="image-20230921112834490" style="zoom:80%;"></strong></p></li><li><p>情况2: consumer8080消费5个消息 consumer8081消费5个消息</p><p>当我们发0号消息的时候，<code>int queueId = index++ % 队列长度</code> 计算出来的queueId=1或者queueId=3</p><p><strong><img src="'+Y+'" alt="image-20230921112945116" style="zoom:80%;"></strong></p></li></ul><h2 id="_3-8-延迟消息" tabindex="-1">3.8 延迟消息 <a class="header-anchor" href="#_3-8-延迟消息" aria-label="Permalink to &quot;3.8 延迟消息&quot;">​</a></h2><p>需求: 假设我们现在要实现订单的超时取消功能</p><p><strong>解决方案</strong>:</p><ul><li>定时调度: 周期性从订单表过滤出超过指定时间的订单，若订单仍未支付，则修改订单状态为超时取消</li><li>Redis的Key失效事件监听: 创建订单的时候，同步往Redis设置一个Key并设置过期时间，当Key过期的时候，程序端监听到之后，若订单仍未支付，则修改订单状态为超时取消</li><li>Redis的Zset+定时调度: 创建订单的时候，往Redis的Zset存储订单号和订单时间(转成秒数作为分数)，定时调度周期从Zset中过滤出超时的订单，若订单仍未支付，则修改订单状态为超时取消并将该订单号从Zset集合中删除</li><li>RocketMQ延时消息: 创建订单的时候往RocketMQ发送延时消息，达到指定时间之后，消费者才能消费该消息，若订单仍未支付，则修改订单状态为超时取消</li></ul><p><strong>应用场景</strong>: 支付订单超时取消，拼团超时取消，好友助力超时取消等.</p><p>RocketMQ4.x并不支持任意时间的延时，需要设置几个固定的延时等级，</p><p>从1s到2h分别对应着等级1到18</p><p>&quot;1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h&quot;;</p><p>可以在管控台集群的配置中看到</p><p><strong><img src="'+Z+'" alt="image-20230921094349939"></strong></p><p><strong>工作原理</strong>:</p><p><strong><img src="'+ss+`" alt="image-20230921122513717" style="zoom:80%;"></strong></p><p>当我们发送消息的时候，设置了delayLevel的属性，消息在消息中间件处理的时候，判断到delayLevel&gt;0，会将消息存储到<code>SCHEDULE_TOPIC_XXXX</code>这个Topic下对应的队列中(总共有18个队列，不同delayLevel的消息存储到不同的队列中)，消息中间件内部使用Timer,检查18个队列的消息是否达到时间了，如果到达了，则将消息转发到原主题<code>HelloTopic</code>中，从而实现延时消息的功能.</p><ul><li>在consume-demo中定义延时消息监听器</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">delayGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">delayTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DelayMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RocketMQListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMessage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">消息消费时间:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,消息内容:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>在producer-demo中编写发送方法</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendDelayMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">delayTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Message</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MessageBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">withPayload</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">延迟消息,发送时间:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#89DDFF;">()).</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">syncSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3000</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意: 有可能第一次发送延时消息的时候时间不一定非常准确.后面的话就比较准确了.</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">- 消费者在启动的时候需要从NameServer中拉取Broker的IP和端口信息，Topic的路由信息(分布在哪台服务器，有几个队列)</span></span>
<span class="line"><span style="color:#A6ACCD;">- 我们是先启动消费者的，这时候从NameServer中是没有获取到delayTopic的路由信息的</span></span>
<span class="line"><span style="color:#A6ACCD;">- 当生产者发送消息的时候，是先把消息发送到SCHEDULE_TOPIC_XXXX中</span></span>
<span class="line"><span style="color:#A6ACCD;">- 消费者每隔30s会从NameServer中更新路由信息，在这30s中间，有可能延时消息已经到时间了，发送到delayTopic,此时消费者还没有该主题的路由信息</span></span>
<span class="line"><span style="color:#A6ACCD;">- 等到消费者更新路由信息之后，就可以收到消息了.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>所以第一次发送的时候，有可能出现上面的问题，所以不是很准确.</p><h2 id="_3-9-消息过滤" tabindex="-1">3.9 消息过滤 <a class="header-anchor" href="#_3-9-消息过滤" aria-label="Permalink to &quot;3.9 消息过滤&quot;">​</a></h2><p>在消息中间件的使用过程中，一个主题对应的消费者想要通过规则只消费这个主题下具备某些特征的消息，过滤掉自己不关心的消息，这个功能就叫消息过滤。</p><p><strong><img src="`+ns+'" alt=" title="></strong></p><p>就如上图所描述的，生产者会向主题中写入形形色色的消息，有橙色的、黄色的、还有灰色的，而这个主题有两个消费者，第一个消费者只想要消费橙色的消息，第二个消费者只想要消费黄色的和灰色的消息，那么这个效果就需要通过消息过滤来实现。</p><p><strong>应用场景</strong></p><p>我们以常见的电商场景为例，来看看消息过滤在实际应用过程中起到的作用。</p><p><strong><img src="'+as+'" alt=" title=" style="zoom:67%;"></strong></p><p>在功能层面，RocketMQ 支持两种过滤方式，Tag 标签过滤和 SQL 属性过滤</p><h3 id="_3-9-1-tag标签过滤" tabindex="-1">3.9.1 Tag标签过滤 <a class="header-anchor" href="#_3-9-1-tag标签过滤" aria-label="Permalink to &quot;3.9.1 Tag标签过滤&quot;">​</a></h3><p>Tag 标签过滤方式是 RocketMQ 提供的基础消息过滤能力，基于生产者为消息设置的 Tag 标签进行匹配。生产者在发送消息时，设置消息的 Tag 标签，消费者按需指定已有的 Tag 标签来进行匹配订阅。</p><p><strong><img src="'+ls+`" alt="image-20230921142824296" style="zoom:67%;"></strong></p><ul><li>生产者代码</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendTagMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tagFilterTopic:TagA</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msgA</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tagFilterTopic:TagB</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msgB</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tagFilterTopic:TagC</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">msgC</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>消费者代码</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tagGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tagFilterTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">selectorExpression</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">TagA || TagC</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TagFilterMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RocketMQListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMessage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-9-2-sql属性过滤" tabindex="-1">3.9.2 SQL属性过滤 <a class="header-anchor" href="#_3-9-2-sql属性过滤" aria-label="Permalink to &quot;3.9.2 SQL属性过滤&quot;">​</a></h3><p>SQL 属性过滤是 RocketMQ 提供的高级消息过滤方式，通过生产者为消息设置的属性（Key）及属性值（Value）进行匹配。生产者在发送消息时可设置多个属性，消费者订阅时可设置SQL 语法的过滤表达式过滤多个属性。</p><ul><li><strong>过滤语法</strong></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1. 数值比较：&gt;, &gt;=, &lt;, &lt;=, BETWEEN, =</span></span>
<span class="line"><span style="color:#A6ACCD;">2. 字符比较：=, &lt;&gt;, IN</span></span>
<span class="line"><span style="color:#A6ACCD;">3. 判空运算：IS NULL or IS NOT NULL</span></span>
<span class="line"><span style="color:#A6ACCD;">4. 逻辑运算：AND, OR, NOT</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong><img src="`+ps+`" alt="image-20230921144326643" style="zoom:67%;"></strong></p><ul><li>生产者代码</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendSQLMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Message</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> msg1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MessageBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">withPayload</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">美女A</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">18</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">setHeader</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">weight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">45</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Message</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> msg2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MessageBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">withPayload</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">美女B</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">28</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">setHeader</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">weight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">55</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Message</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> msg3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> MessageBuilder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">withPayload</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">美女A</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                            </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">48</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">setHeader</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">weight</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">75</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">build</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sqlFilterTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">msg1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">msg2</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">msg3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><ul><li>消费者代码</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sqlGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sqlFilterTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">selectorExpression</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age&gt;20 and weight&gt;60</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">selectorType</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SelectorType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SQL92</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">SQLFilterMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RocketMQListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMessage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>运行之后报错信息如下:</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">Caused</span><span style="color:#A6ACCD;"> by</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> org</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">apache</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">rocketmq</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">client</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exception</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MQClientException</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> CODE</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">  DESC</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">The</span><span style="color:#A6ACCD;"> broker does not support consumer to filter message by </span><span style="color:#C792EA;">SQL92</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个错误是由于RocketMQ默认是关闭了属性过滤功能的，如果需要使用该功能，需要开启enablePropertyFilter的属性，将该属性置为true才可以。也就是我们需要在RocketMQ的配置文件中<code>/usr/local/rocketmq-4.9/conf/broker.conf</code>添加如下配置：</p><div class="language-properties line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">properties</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">enablePropertyFilter</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后重启Broker即可.</p><h2 id="_3-10-顺序消息" tabindex="-1">3.10 顺序消息 <a class="header-anchor" href="#_3-10-顺序消息" aria-label="Permalink to &quot;3.10 顺序消息&quot;">​</a></h2><p>消息有序指的是，消费者端消费消息时，需按照消息的发送顺序来消费，即先发送的消息，需要先消费(FIFO)。</p><p><strong>应用场景</strong>:</p><ul><li>情景1: 证券、股票交易撮合场景，坚持按照先出价先交易的原则，下游处理订单的系统需要严格按照出价顺序来处理订单。</li><li>情景2: 数据实时增量同步场景，以数据库变更增量同步场景为例，上游源端数据库按需执行增删改操作，将二进制操作日志作为消息，通过RocketMQ 传输到下游搜索系统，下游系统按顺序还原消息数据，实现状态数据按序刷新。如果是普通消息则可能会导致状态混乱，和预期操作结果不符，基于顺序消息可以实现下游状态和上游操作结果一致。</li></ul><p>RocketMQ普通消息是不具备顺序性</p><ul><li><p>生产者采取轮询的方式往Topic的4个队列中发送消息，无法保证出队列的顺序</p><img src="`+os+'" alt="image-20230921152038145" style="zoom:67%;"></li><li><p>消费者使用的是多线程的方式消费消息，有可能后面出来的消息更先执行完,无法保证消费的顺序</p><p><strong><img src="'+es+'" alt="image-20230921152709404"></strong></p><p>在消费者使用的是多线程消费消息，由于CPU时间片的问题，后面取出来的消息可能比前面取出的消息更先执行完</p></li></ul><p><strong>如何保证消息的顺序性</strong></p><p>RocketMQ 的消息的顺序性分为两部分，生产顺序性和消费顺序性。</p><ul><li><p><strong>生产顺序性</strong> ：将需要顺序消费的消息放入到同一个队列中，保证消息是满足先进先出特性</p></li><li><p><strong>消费顺序性</strong>：在消费端需要采取单线程绑定队列的方式进行消息的消费.</p></li></ul><p><strong><img src="'+rs+`" alt="image-20230921153221646"></strong></p><p>我们通过代码案例来加深对顺序消息的理解</p><p>需求: 通常创建订单后，会经历一系列的操作：【订单创建 -&gt; 订单支付 -&gt; 订单发货 -&gt; 订单配送 -&gt; 订单完成】。在创建完订单后，会发送五条消息到MQ Broker中，消费的时候要按照【订单创建 -&gt; 订单支付 -&gt; 订单发货 -&gt; 订单配送 -&gt; 订单完成】这个顺序去消费，这样的订单才是有效的。</p><ul><li>定义<code>OrderStep</code>实体类</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OrderStep</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> orderId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> desc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getOrderId</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> orderId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setOrderId</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">orderId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">orderId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> orderId</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDesc</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> desc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">setDesc</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">desc</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">desc </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> desc</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">OrderStep{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orderId=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> orderId </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, desc=&#39;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> desc </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">\\&#39;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">}</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>定义<code>OrderUtil</code>工具类</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OrderUtil</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    /**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     * 生成模拟订单数据</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">OrderStep</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildOrders</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">OrderStep</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> orderList </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">ArrayList</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">OrderStep</span><span style="color:#89DDFF;">&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">OrderStep</span><span style="color:#A6ACCD;"> orderDemo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrderStep</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setOrderId</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">15103111039L</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDesc</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">创建</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">orderDemo</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrderStep</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setOrderId</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">15103111039L</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDesc</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">支付</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">orderDemo</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrderStep</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setOrderId</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">15103111039L</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDesc</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">发货</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">orderDemo</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrderStep</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setOrderId</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">15103111039L</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDesc</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">配送</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">orderDemo</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">OrderStep</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setOrderId</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">15103111039L</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderDemo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDesc</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">完成</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        orderList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">orderDemo</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> orderList</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>我们先测试普通消息是否可以实现顺序消费呢?</p><ul><li>生产者代码</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendOrderlyMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orderlyTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">OrderStep</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> orderSteps </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> OrderUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildOrders</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">OrderStep</span><span style="color:#A6ACCD;"> step</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">orderSteps</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">        rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWay</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">step</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li>消费者代码</li></ul><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orderlyGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orderlyTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OrderlyMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RocketMQListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">MessageExt</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMessage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">MessageExt</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">messageExt</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,队列ID:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">messageExt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getQueueId</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,消息内容:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">messageExt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBody</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>运行之后结果如下:</p><p><strong><img src="`+ts+`" alt="image-20230921173141309"></strong></p><p>明显可以看到，是不符合顺序消费的定义的.</p><p>接着我们就需要在生产者中定义消息队列选择器，需要定义消息发送到哪个队列中.</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testSendOrderlyMsg</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//定义消息队列选择器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">MessageQueueSelector</span><span style="color:#A6ACCD;"> selector </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MessageQueueSelector</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">MessageQueue</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">select</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">MessageQueue</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">mqs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">apache</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">rocketmq</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">common</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">message</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">Message</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">msg</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Object</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> orderId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> arg</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//使用求模的方式，相同的订单号计算出来的值是一样的，所以相同订单的消息最终会放入到同一个队列中</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> queueId </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">Long</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseLong</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">orderId</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;"> mqs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> mqs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">queueId</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//将消息队列选择器设置到rocketMQTemplate中</span></span>
<span class="line"><span style="color:#A6ACCD;">    rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setMessageQueueSelector</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">selector</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> topic </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orderlyTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">OrderStep</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> orderSteps </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> OrderUtil</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">buildOrders</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">OrderStep</span><span style="color:#A6ACCD;"> step</span><span style="color:#89DDFF;font-style:italic;">:</span><span style="color:#A6ACCD;">orderSteps</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//发送的时候，需要使用Orderly结尾的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        rocketMQTemplate</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendOneWayOrderly</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">topic</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">step</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;">step</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOrderId</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>在消费者端需要使用单线程绑定队列的方式</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RocketMQMessageListener</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">consumerGroup</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orderlyGroup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">topic</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">orderlyTopic</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">consumeMode</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ConsumeMode</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ORDERLY</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">OrderlyMessageListener</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RocketMQListener</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">MessageExt</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onMessage</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">MessageExt</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">messageExt</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">线程:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">Thread</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">currentThread</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,队列ID:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">messageExt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getQueueId</span><span style="color:#89DDFF;">()+</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,消息内容:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">String</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">messageExt</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBody</span><span style="color:#89DDFF;">()));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>执行完消费的结果如下:</p><p><strong><img src="`+cs+'" alt="image-20230921155948231"></strong></p><p>可以看到确实按照我们发送的顺序进行消费了</p><p><strong>RocketMQ的顺序消息属于局部有序而非全局有序</strong>:</p><p>比如我现在有两组订单，这两组订单分别是A1,B1,C1和A2,B2,C2 我们要实现这两组订单是顺序消费的.</p><p><strong><img src="'+Ds+'" alt="image-20230921160510745"></strong></p><p>我们发送的时候消息发送顺序如下，订单组1发送顺序是按照A1,B1,C1顺序发送，订单组2发送的顺序也是A2,B2,C2的顺序.</p><p><img src="'+ys+'" alt="image-20230921160610871"></p><p>在发送的时候，根据消息选择器，可能存储的结果如下:</p><p><strong><img src="'+is+'" alt="image-20230921160850795"></strong></p><p>因为这6个消息被分配到了2个队列中，分别有线程2和线程3进行消费.</p><p>这时候有可能A1先执行完，也可能A2先执行完，可能的消费顺序如下:</p><p><strong><img src="'+Fs+'" alt="image-20230921161118750"></strong></p><p>这时候可以看到全局的发送顺序和全局的消费顺序是不一致的.</p><p>但是在同一个队列中的顺序是有序的.</p><p>比如A1先执行，然后才到B1，最后到C1</p><p>A2先执行，然后才到B2，最后到C2</p><p><strong>提问</strong>: 全局有序如何实现?</p><h2 id="_3-11-其他概念" tabindex="-1">3.11 其他概念 <a class="header-anchor" href="#_3-11-其他概念" aria-label="Permalink to &quot;3.11 其他概念&quot;">​</a></h2><h3 id="_3-11-1-不同消费组订阅问题" tabindex="-1">3.11.1 不同消费组订阅问题 <a class="header-anchor" href="#_3-11-1-不同消费组订阅问题" aria-label="Permalink to &quot;3.11.1 不同消费组订阅问题&quot;">​</a></h3><p>RocketMQ在消费者消费完消息之后，并不是直接删除掉该消息，而是在consumerOffset.json文件中标记该消费者的消费位置. 在集群模式下，消息的消费是根据消费组定的，如下图所示:</p><p><strong><img src="'+Cs+'" alt="image-20230921174457533"></strong></p><p>在consumerOffset.json文件中记录了每个消费组的消息消费位置,如下图所示:</p><p><strong><img src="'+As+`" alt="image-20230921174844108"></strong></p><p>如果此时新增一个消费组XGroup,那么这个组会重新消费A,B,C三个消息.</p><h3 id="_3-11-2-消息重试" tabindex="-1">3.11.2 消息重试 <a class="header-anchor" href="#_3-11-2-消息重试" aria-label="Permalink to &quot;3.11.2 消息重试&quot;">​</a></h3><ul><li><p>消息发送重试</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">- 同步发送失败重试次数，默认为2</span></span>
<span class="line"><span style="color:#A6ACCD;">- 异步发送失败重试次数，默认为2</span></span>
<span class="line"><span style="color:#A6ACCD;">- 一次性发送，不会进行重试</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>消息消费重试</p><p>对于消费失败的消息，广播模式下仅仅是对于消费失败的消息打印日志，并不会重试。</p><p>针对集群模式，消息重试机制如下:</p><p><strong><img src="`+us+`" alt="image-20230922123900775"></strong></p><ol><li><p>消费者向Broker发送消息重试的请求</p></li><li><p>Broker找到该消息并拷贝一个新的消息，设置消息主题为%RETRY% + 消费者组名，如果此时该消息的重试次数超过最大重试次数或者延迟级别小于0，那么就把这个新的消息写入到死信队列中</p></li><li><p>设置延迟级别= 重试次数 + 3</p></li><li><p>设置新的消息重试次数+1，</p></li><li><p>这个新消息会进入到延迟主题SCHEDULE_TOPIC_XXXX中，当到达了延迟时间的时候该消息就会再一次被发送到 %RETRY% + 消费者组名 这个主题</p></li><li><p>消费者刚启动的时候，会把订阅 %RETRY% + 消费者组名这个主题</p></li></ol></li><li><p>消息重试时间间隔</p></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意: 对于顺序消息，当消费者消费消息失败后，消息队列 RocketMQ 会自动不断进行消息重试（每次间隔时间为 1 秒），这时，应用会出现消息消费被阻塞的情况。因此，在使用顺序消息时，务必保证应用能够及时监控并处理消费失败的情况，避免阻塞现象的发生。</p><h3 id="_3-11-3-幂等性" tabindex="-1">3.11.3 幂等性 <a class="header-anchor" href="#_3-11-3-幂等性" aria-label="Permalink to &quot;3.11.3 幂等性&quot;">​</a></h3><p>比如Broker发送Consumer超时(默认15分钟)后重新发送，可能Consumer已经执行完业务了，此时消息重新发送过来的话，我们的业务就会重新执行一次。所以在消费者这段的业务接口实现，我们需要实现幂等性.</p><h3 id="_3-11-4-死信队列" tabindex="-1">3.11.4 死信队列 <a class="header-anchor" href="#_3-11-4-死信队列" aria-label="Permalink to &quot;3.11.4 死信队列&quot;">​</a></h3><p>当一条消息初次消费失败，RocketMQ 会自动进行消息重试，达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息。此时，RocketMQ 不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中。，这种正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）。</p><h3 id="_3-11-5-消息的删除" tabindex="-1">3.11.5 消息的删除 <a class="header-anchor" href="#_3-11-5-消息的删除" aria-label="Permalink to &quot;3.11.5 消息的删除&quot;">​</a></h3><p>为了避免内存与磁盘的浪费，RocketMQ有专门的删除机制来删除过期的文件。</p><p>清理的逻辑是：如果非当前写文件在一 <strong>定时间间隔内没有再次被更新</strong> ，则认为是过期文件，可以被删除， RocketMQ 不会关注这个文件上的消息是否全部被消费。</p><p>通过在 Broker配置文件中设置 fileReservedTime 来改变过期时间，默认为48，单位为小时</p><p>可以通过deleteWhen设置一天执行一次删除文件的操作，默认是凌晨4点。</p><h1 id="四、消息积压面试题" tabindex="-1">四、消息积压面试题 <a class="header-anchor" href="#四、消息积压面试题" aria-label="Permalink to &quot;四、消息积压面试题&quot;">​</a></h1><ul><li><strong>如何处理消息队列的消息积压问题</strong></li></ul><p>消息积压是因为⽣产者的⽣产速度，⼤于消费者的消费速度。遇到消息积压问题时，我们需要先排查，是不是有bug产⽣了。</p><p>如果不是bug，我们看是否可以<strong>优化⼀下消费的逻辑</strong>。如果还是慢，我们可以考虑⽔平扩容，增加Topic的队列数，和消费组机器的数量，提升整体消费能⼒</p><p>如果是bug导致⼏百万消息持续积压⼏⼩时。有如何处理呢？需要解决bug，<strong>临时紧急扩容</strong>，⼤概思路如下：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1. 先修复consumer消费者的问题，以确保其恢复消费速度，然后将现有consumer 都停掉。</span></span>
<span class="line"><span style="color:#A6ACCD;">2. 新建⼀个 topic，队列数是原来的 10 倍</span></span>
<span class="line"><span style="color:#A6ACCD;">3. 然后写⼀个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时</span></span>
<span class="line"><span style="color:#A6ACCD;">的处理，直接均匀轮询写⼊临时建⽴好的10倍数量的queue。</span></span>
<span class="line"><span style="color:#A6ACCD;">4.这样处理完之后原来的Topic就没有什么消息了，此时可以把consumer消费者启动起来，此时新的业务就正常了.</span></span>
<span class="line"><span style="color:#A6ACCD;">5. 接着临时征⽤ 10 倍的机器来部署 consumer消费新Topic的消息。这种做法相当于是临时将 queue 资源和 consumer资源扩⼤10 倍，以正常的 10 倍速度来消费积压数据。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>核心</strong>: 先保障新的业务能正常运行，然后积压的数据，先放入到新的队列中(不影响原有业务)，然后开启10倍的消费者消费积压的消息.</p>`,334),ds=[bs];function gs(hs,Es,vs,qs,ks,_s){return n(),a("div",null,ds)}const Ss=s(ms,[["render",gs]]);export{Ms as __pageData,Ss as default};
