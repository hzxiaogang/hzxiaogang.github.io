import{_ as s,o as a,c as n,V as e}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"FactoryBean","description":"","frontmatter":{"title":"FactoryBean","date":"2022-10-21T15:09:22.000Z","permalink":"/pages/7fca62/","categories":["java","ssm","spring"],"tags":[null]},"headers":[],"relativePath":"java/ssm/spring/FactoryBean.md","filePath":"java/ssm/spring/FactoryBean.md","lastUpdated":1705544536000}'),o={name:"java/ssm/spring/FactoryBean.md"},l=e(`<h1 id="factorybean" tabindex="-1">FactoryBean <a class="header-anchor" href="#factorybean" aria-label="Permalink to &quot;FactoryBean&quot;">​</a></h1><h2 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h2><p><code>Spring</code> 中有两种类型的<code>Bean</code>，一种是普通<code>Bean</code>，另一种是工厂<code>Bean</code> 即 <code>FactoryBean</code>。</p><p><code>FactoryBean</code>是<code>Spring</code>框架中一种强大的<strong>扩展机制</strong>，它允许开发者根据应用需求定制<code>Bean</code>的创建行为，以满足更复杂的依赖管理和对象生命周期管理的需求。</p><p><code>FactoryBean</code> 是 <code>Spring</code> 提供的一种整合第三方框架的<strong>常用机制</strong>。</p><p>当把<code>FactoryBean</code>的<strong>实现类</strong>配置为<code>bean</code>时，会将当前类中<code>getObjectType</code>所返回的对象交给<code>IOC</code>容器管理。 通过这种机制，<code>Spring</code> 可以帮我们把复杂组件创建的详细过程和繁琐细节都屏蔽起来，只把最简洁的使用界面展示给我们。 将来我们整合 <code>Mybatis</code> 时，<code>Spring</code> 就是通过 <code>FactoryBean</code>机制来帮我们创建 <code>SqlSessionFactory</code> 对象的。</p><h2 id="_2-主要作用" tabindex="-1">2. 主要作用 <a class="header-anchor" href="#_2-主要作用" aria-label="Permalink to &quot;2. 主要作用&quot;">​</a></h2><p><code>FactoryBean</code>在<code>Spring</code>框架中的作用主要体现在以下几个方面</p><h3 id="_1-自定义对象创建逻辑" tabindex="-1">1. 自定义对象创建逻辑 <a class="header-anchor" href="#_1-自定义对象创建逻辑" aria-label="Permalink to &quot;1. 自定义对象创建逻辑&quot;">​</a></h3><p>当一个类实现了<code>org.springframework.beans.factory.FactoryBean</code>接口时，<code>Spring IoC</code>容器不再直接实例化该类的bean，而是调用<code>FactoryBean</code>的<code>getObject()</code>方法来获取实际需要注入到其他<code>bean</code>或由应用程序使用的对象。</p><p>开发者可以通过实现<code>getObject()</code>方法来自定义<code>bean</code>的创建过程，比如初始化复杂资源、执行特定装配步骤或者生成代理对象等。</p><h3 id="_2-封装复杂对象创建过程" tabindex="-1">2. 封装复杂对象创建过程 <a class="header-anchor" href="#_2-封装复杂对象创建过程" aria-label="Permalink to &quot;2. 封装复杂对象创建过程&quot;">​</a></h3><p><code>FactoryBean</code>可以隐藏对象创建过程中的复杂性。例如，它可能用于构建<code>AOP</code>代理、数据库连接池中的连接对象、<code>JMS</code>连接工厂或其他需要特殊配置和初始化的对象</p><h3 id="_3-提供非原始类型的bean" tabindex="-1">3. 提供非原始类型的bean <a class="header-anchor" href="#_3-提供非原始类型的bean" aria-label="Permalink to &quot;3. 提供非原始类型的bean&quot;">​</a></h3><p><code>FactoryBean</code>返回的对象类型并不一定与其实现类相同，即通过<code>FactoryBean</code>创建的bean可能是某种包装类、代理类或者其他完全不同的类型。</p><h3 id="_4-延迟加载和按需创建" tabindex="-1">4. 延迟加载和按需创建 <a class="header-anchor" href="#_4-延迟加载和按需创建" aria-label="Permalink to &quot;4. 延迟加载和按需创建&quot;">​</a></h3><p>由于<code>FactoryBean</code>的生命周期是由<code>Spring</code>容器管理的，它可以支持单例或多例模式，并且可以根据需求延迟创建内部<code>bean</code>。</p><h3 id="_5-集成第三方库或框架" tabindex="-1">5. 集成第三方库或框架 <a class="header-anchor" href="#_5-集成第三方库或框架" aria-label="Permalink to &quot;5. 集成第三方库或框架&quot;">​</a></h3><p><code>Spring</code>自身就提供了多个<code>FactoryBean</code>的实现，用于方便地整合其他<code>Java</code>框架或技术，如：<code>ListableBeanFactory</code>（用于查找并包装所有指定类型的<code>bean</code>）、<code>RabbitTemplate</code>对应的<code>RabbitConnectionFactoryBean</code>（用于创建<code>RabbitMQ</code>连接工厂）等</p><h2 id="_2-factorybean接口的三个方法" tabindex="-1">2. FactoryBean接口的三个方法 <a class="header-anchor" href="#_2-factorybean接口的三个方法" aria-label="Permalink to &quot;2. FactoryBean接口的三个方法&quot;">​</a></h2><p><code>FactoryBean</code>是一个接口，需要创建一个类实现该接口，其中有三个方法：</p><h3 id="_1-getobject" tabindex="-1">1. getObject() <a class="header-anchor" href="#_1-getobject" aria-label="Permalink to &quot;1. getObject()&quot;">​</a></h3><p>返回一个实例对象交给<code>IOC</code>容器作为<code>bean</code>管理。并不是<code>FactoryBean</code>自身类型的一个实例，而是用户自定义业务类型的实例。</p><h3 id="_2-getobjecttype" tabindex="-1">2. getObjectType() <a class="header-anchor" href="#_2-getobjecttype" aria-label="Permalink to &quot;2. getObjectType()&quot;">​</a></h3><p>返回<code>FactoryBean</code>所创建对象的类型。<code>Spring</code>容器使用此信息来进行依赖注入和其它类型相关操作。通常情况下，返回的类型与<code>getObject()</code>方法实际创建对象的类型相匹配。</p><h3 id="_3-issingleton" tabindex="-1">3. isSingleton() <a class="header-anchor" href="#_3-issingleton" aria-label="Permalink to &quot;3. isSingleton()&quot;">​</a></h3><p>声明由<code>FactoryBean</code>生成的<code>Bean</code>是否应该是单例的（<code>Singleton</code>）。如果该方法返回<code>true</code>，则<code>Spring</code>容器会缓存<code>getObject()</code>方法产生的实例，确保在整个<code>IoC</code>容器上下文中只有一个共享的实例；如果返回<code>false</code>，则每次请求时都会调用<code>getObject()</code>来创建新的实例。</p><h2 id="_3-演示" tabindex="-1">3. 演示 <a class="header-anchor" href="#_3-演示" aria-label="Permalink to &quot;3. 演示&quot;">​</a></h2><h3 id="_1-创建-userfactorybean" tabindex="-1">1. 创建 UserFactoryBean <a class="header-anchor" href="#_1-创建-userfactorybean" aria-label="Permalink to &quot;1. 创建 UserFactoryBean&quot;">​</a></h3><p>创建<code>UserFactoryBean</code>，并实现<code>FactoryBean</code>接口，重写<code>FactoryBean</code>接口的三个方法。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">package</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">zhug</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">factory</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">com</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">zhug</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">pojo</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">User</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">org</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">springframework</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">beans</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">factory</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">FactoryBean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserFactoryBean</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">implements</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">FactoryBean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">User</span><span style="color:#89DDFF;">&gt;{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getObject</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Exception</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">?</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getObjectType</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isSingleton</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> FactoryBean</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isSingleton</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="_2-装配-bean" tabindex="-1">2. 装配 bean <a class="header-anchor" href="#_2-装配-bean" aria-label="Permalink to &quot;2. 装配 bean&quot;">​</a></h3><p>虽然我们在<code>xml</code>中配置的是类型为<code>UserFactoryBean</code>的<code>bean</code>，但是我们真正交给<code>IOC</code>容器管理的对象却是<code>UserFactoryBean</code>类中<code>getObject()</code>方法所返回的对象（<code>User</code>对象）。</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;?</span><span style="color:#F07178;">xml</span><span style="color:#C792EA;"> version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> encoding</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">UTF-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">?&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">beans</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.springframework.org/schema/beans</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">xsi</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.w3.org/2001/XMLSchema-instance</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">       </span><span style="color:#C792EA;">xsi</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">schemaLocation</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.springframework.org/schema/beans</span></span>
<span class="line"><span style="color:#C3E88D;">       http://www.springframework.org/schema/beans/spring-beans.xsd</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">bean</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.zhug.factory.UserFactoryBean</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">beans</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_3-测试" tabindex="-1">3. 测试 <a class="header-anchor" href="#_3-测试" aria-label="Permalink to &quot;3. 测试&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">TestSpring</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Test</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testBean</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">throws</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">SQLException</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ApplicationContext</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ClassPathXmlApplicationContext</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bean.xml</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">User</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// com.zhug.pojo.User@6b695b06</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>xml</code>中没有配置<code>User</code>类型的<code>bean</code>，但是我们却可以在<code>IOC</code>容器获取到<code>User</code>类型的<code>bean</code>。这就是<code>FactoryBean</code>给我门提供的功能。</p>`,37),p=[l];function c(r,t,y,i,F,D){return a(),n("div",null,p)}const A=s(o,[["render",c]]);export{C as __pageData,A as default};
