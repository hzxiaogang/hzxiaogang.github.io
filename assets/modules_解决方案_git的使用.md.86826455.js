import{_ as s,o as a,c as e,V as n}from"./chunks/framework.364d6ed5.js";const l="/git.png",y=JSON.parse('{"title":"git的使用","description":"","frontmatter":{"title":"git的使用","date":"2022-07-07T13:43:55.000Z","permalink":"/pages/73ed0a/","categories":["modules","解决方案"],"tags":[null]},"headers":[],"relativePath":"modules/解决方案/git的使用.md","filePath":"modules/解决方案/git的使用.md","lastUpdated":1685624511000}'),o={name:"modules/解决方案/git的使用.md"},p=n('<h2 id="_1-什么是-git" tabindex="-1">1.什么是 git <a class="header-anchor" href="#_1-什么是-git" aria-label="Permalink to &quot;1.什么是 git&quot;">​</a></h2><p><code>Git</code> 是一个开源的分布式<strong>版本控制系统</strong>，可以有效、高速地处理从很小到非常大的<strong>项目版本管理</strong>。<code>GitHub</code> 是一个面向开源及私有软件项目的<strong>托管平台</strong>，因为只支持 <code>Git</code> 作为唯一的版本库格式进行托管，故名 <code>GitHub</code>。</p><h2 id="_2-git-工作流" tabindex="-1">2.git 工作流 <a class="header-anchor" href="#_2-git-工作流" aria-label="Permalink to &quot;2.git 工作流&quot;">​</a></h2><img src="'+l+`"><h2 id="_3-git-实操作" tabindex="-1">3.git 实操作 <a class="header-anchor" href="#_3-git-实操作" aria-label="Permalink to &quot;3.git 实操作&quot;">​</a></h2><h3 id="_3-1-进行用户设置" tabindex="-1">3.1 进行用户设置 <a class="header-anchor" href="#_3-1-进行用户设置" aria-label="Permalink to &quot;3.1 进行用户设置&quot;">​</a></h3><p>git 操作前需要 进行用户设置</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">zhangshan</span><span style="color:#A6ACCD;">   (如果用户名有空格，这需要加引号)</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.email</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1941226202</span><span style="color:#C3E88D;">@qq.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-2-初始化-git" tabindex="-1">3.2 初始化 git <a class="header-anchor" href="#_3-2-初始化-git" aria-label="Permalink to &quot;3.2 初始化 git&quot;">​</a></h3><p>相当于告诉 \`git\`\` 当前文件夹需要版本控制</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行完后文件夹里会出现一个 <code>.git</code> 文件夹，这是一个隐藏文件夹，<code>git</code> 的所有记录都在这个文件夹里， 初始化 <code>git</code> 后一般会默认显示<code>master</code>，也就是我们的主分支。初始化后默认处于主分支里面</p><h3 id="_3-3-创建文件" tabindex="-1">3.3 创建文件 <a class="header-anchor" href="#_3-3-创建文件" aria-label="Permalink to &quot;3.3 创建文件&quot;">​</a></h3><p>这里相当于在本地仓库添加我们的工作文件。这里我们演示创建一个<code>md</code>文件<code>lao.md</code></p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">这是版本一</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">lao.md</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-4-查看状态" tabindex="-1">3.4 查看状态 <a class="header-anchor" href="#_3-4-查看状态" aria-label="Permalink to &quot;3.4 查看状态&quot;">​</a></h3><p>因为 <code>git</code> 里有好几个区域，我们可能操作着就不知道自己处于那个状态了，我们可以使用 <code>git status</code> 来查看状态</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">status</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-5-添加到缓存区" tabindex="-1">3.5 添加到缓存区 <a class="header-anchor" href="#_3-5-添加到缓存区" aria-label="Permalink to &quot;3.5 添加到缓存区&quot;">​</a></h3><p>将 工作区的 <code>lao.md</code> 添加到 缓存区</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">lao.md</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-6-提交到本地仓库" tabindex="-1">3.6 提交到本地仓库 <a class="header-anchor" href="#_3-6-提交到本地仓库" aria-label="Permalink to &quot;3.6 提交到本地仓库&quot;">​</a></h3><p>将缓存区的内容提交到本地仓库</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">这里写提交信息</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>小技巧 ： <code>git commit -a -m &#39;说明&#39;</code> 相当于 <code>git add</code> 和 <code>git commit</code> 两步操作</p><h3 id="_3-7-查看版本信息和提交记录" tabindex="-1">3.7 查看版本信息和提交记录 <a class="header-anchor" href="#_3-7-查看版本信息和提交记录" aria-label="Permalink to &quot;3.7 查看版本信息和提交记录&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">log</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时 会进去 <code>log</code> 页面。我们可以 按下 键盘 <code>q</code> 回到控制台命令行</p><h3 id="_3-8-创建-gitignore-并配置" tabindex="-1">3.8 创建.gitignore 并配置 <a class="header-anchor" href="#_3-8-创建-gitignore-并配置" aria-label="Permalink to &quot;3.8 创建.gitignore 并配置&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">.gitignore</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用<code>touch .gitignore</code>命令创建<code>.gitignore</code>文件。然后我们就可以在里面配置那些文件或文件夹不需要提交</p><h3 id="_3-9-提交到远程仓库" tabindex="-1">3.9 提交到远程仓库 <a class="header-anchor" href="#_3-9-提交到远程仓库" aria-label="Permalink to &quot;3.9 提交到远程仓库&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-10-创建分支" tabindex="-1">3.10 创建分支 <a class="header-anchor" href="#_3-10-创建分支" aria-label="Permalink to &quot;3.10 创建分支&quot;">​</a></h3><p>假设我们需要为当前仓库新增文件， 但是这个文件还不能确定是否需要 ，我们就可以在主分支的基础上创建一个新的分支。 等新分支文件一切都准备好了，再合并过来。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">分支名称</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-11-查看分支" tabindex="-1">3.11 查看分支 <a class="header-anchor" href="#_3-11-查看分支" aria-label="Permalink to &quot;3.11 查看分支&quot;">​</a></h3><p>创建好分支后，我们可以查看 分支是否创建成功。命令执行后命令行控制台没有了，此时会显示 分支列表。 我们可以 按 键盘 <code>q</code> 回到命令行</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-12-切换分支" tabindex="-1">3.12 切换分支 <a class="header-anchor" href="#_3-12-切换分支" aria-label="Permalink to &quot;3.12 切换分支&quot;">​</a></h3><p>分支创建好后，我们并不会进入到新分支。需要手动切换</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行这个命令 就可以切换到对应的分支。</p><h3 id="_3-13-删除分支" tabindex="-1">3.13 删除分支 <a class="header-anchor" href="#_3-13-删除分支" aria-label="Permalink to &quot;3.13 删除分支&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-d</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>不过这个命令会错误提示该分支没有合并，删除失败。如果你暴力删除该分支，可以使用下面的命令:</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-D</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>注意 ： 如当前处于该分支，如果删除该分支则会删除失败。我们可以切换到组分支，然后再删除想删除的分支</p><h3 id="_3-14-创建新分支并切换到新分支" tabindex="-1">3.14 创建新分支并切换到新分支 <a class="header-anchor" href="#_3-14-创建新分支并切换到新分支" aria-label="Permalink to &quot;3.14 创建新分支并切换到新分支&quot;">​</a></h3><p>创建分支后再手动切换到新分支太繁琐，现在下面这个命令可以一步到位，创建并切换到新分支</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">分支名</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-15-合并分支" tabindex="-1">3.15 合并分支 <a class="header-anchor" href="#_3-15-合并分支" aria-label="Permalink to &quot;3.15 合并分支&quot;">​</a></h3><p>假如现在我们只有一个分支 <code>master</code> 和一个 <code>lao.md</code> 文件(内容是 ： 版本 1)。现在我们创建一个分支 <code>temp</code> 并进入到 <code>temp</code></p><p><code>git branch -b temp</code></p><p>此时 <code>lao.md</code> 就是分支 <code>temp</code> 的内容，现在我们给 <code>lao.md</code> 添加内容 &quot;版本 2&quot;</p><p>执行 <code>git commit -a -m</code> &#39;版本 2&#39;</p><p>现在我们把分支切换到 主分支 <code>master</code></p><p><code>git checkout master</code></p><p>此时我们会发现 <code>lao.md</code> 文件的内容是 <strong>&quot;版本 1&quot;</strong>，刚刚我们添加的内容<strong>版本 2</strong>不见了。这是因为我们<strong>没有把分支的内容合并到主分支</strong>。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">temp</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>意识是把别的分支<code>temp</code>合并到当前所处的分支（假如当前分支是 <code>master</code>，那么就会把 分支 <code>temp</code> 的内容合并到 <code>master</code></p><h3 id="_3-16-操作远程仓库" tabindex="-1">3.16 操作远程仓库 <a class="header-anchor" href="#_3-16-操作远程仓库" aria-label="Permalink to &quot;3.16 操作远程仓库&quot;">​</a></h3><p>我们可以在 <code>github</code> 上创建好项目把项目<strong>复制</strong>到本地</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">url</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者在本地创建好项目<strong>推送</strong>到远程仓库</p><h3 id="_3-17-查看本地仓库绑定的远仓库" tabindex="-1">3.17 查看本地仓库绑定的远仓库 <a class="header-anchor" href="#_3-17-查看本地仓库绑定的远仓库" aria-label="Permalink to &quot;3.17 查看本地仓库绑定的远仓库&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-18-master-和-main" tabindex="-1">3.18 master 和 main <a class="header-anchor" href="#_3-18-master-和-main" aria-label="Permalink to &quot;3.18 master 和 main&quot;">​</a></h3><p><code>main</code>是中性词语。现在项目创建后默认主分支名字交<code>main</code>，以前叫<code>master</code>。我们可以自己修改为<code>master</code></p><h2 id="_4-本地项目上传-gitee" tabindex="-1">4. 本地项目上传 gitee <a class="header-anchor" href="#_4-本地项目上传-gitee" aria-label="Permalink to &quot;4. 本地项目上传 gitee&quot;">​</a></h2><p>下面我们以<code>test</code>项目使用<code>git</code>上传<code>gitee</code>（码云，一个代码托管平台）为例子。</p><h3 id="_4-1-在-gitee-上创建一个项目" tabindex="-1">4.1 在 gitee 上创建一个项目 <a class="header-anchor" href="#_4-1-在-gitee-上创建一个项目" aria-label="Permalink to &quot;4.1 在 gitee 上创建一个项目&quot;">​</a></h3><p>在 gitee（码云）上创建一个叫做<code>test</code>的项目。然后会有一个<strong>项目地址</strong></p><h3 id="_4-2-在本地也创建一个叫做-test-的文件夹" tabindex="-1">4.2 在本地也创建一个叫做 test 的文件夹 <a class="header-anchor" href="#_4-2-在本地也创建一个叫做-test-的文件夹" aria-label="Permalink to &quot;4.2 在本地也创建一个叫做 test 的文件夹&quot;">​</a></h3><h2 id="_1-准备工作" tabindex="-1">1. 准备工作 <a class="header-anchor" href="#_1-准备工作" aria-label="Permalink to &quot;1. 准备工作&quot;">​</a></h2><p>首先在<code>gitee</code>上创建一个项目，名字叫<code>test</code>。</p><h2 id="_2-创建项目并提交" tabindex="-1">2. 创建项目并提交 <a class="header-anchor" href="#_2-创建项目并提交" aria-label="Permalink to &quot;2. 创建项目并提交&quot;">​</a></h2><p>鼠标右键，选择<code>git Bash Here</code>。会显示一个控制台，然后在控制台输入以下命令</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">全局设置</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">账户名字</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.email</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">邮箱名字</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">//</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">创建项目并提交远程仓库</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">test</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">init</span></span>
<span class="line"><span style="color:#FFCB6B;">touch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">README.md</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">README.md</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">first commit</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">cd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git上的项目test的地址</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git上的项目test的地址</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">origin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">master</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,79),t=[p];function r(c,i,d,C,h,u){return a(),e("div",null,t)}const b=s(o,[["render",r]]);export{y as __pageData,b as default};
