import{_ as a,o as e,c as l,V as o}from"./chunks/framework.364d6ed5.js";const p=JSON.parse('{"title":"统计函数","description":"","frontmatter":{"title":"统计函数","date":"2022-09-20T23:08:04.000Z","permalink":"/pages/00e719/","categories":["java","mysql"],"tags":[null]},"headers":[],"relativePath":"java/mysql/统计函数.md","filePath":"java/mysql/统计函数.md","lastUpdated":1685806707000}'),t={name:"java/mysql/统计函数.md"},i=o('<h1 id="统计函数" tabindex="-1">统计函数 <a class="header-anchor" href="#统计函数" aria-label="Permalink to &quot;统计函数&quot;">​</a></h1><h2 id="_1-1-count" tabindex="-1">1.1 count() <a class="header-anchor" href="#_1-1-count" aria-label="Permalink to &quot;1.1 count()&quot;">​</a></h2><h4 id="_1-1-1-语法" tabindex="-1">1.1.1 语法 <a class="header-anchor" href="#_1-1-1-语法" aria-label="Permalink to &quot;1.1.1 语法&quot;">​</a></h4><p><code>SELECT count(*) | count(列名) FROM table_name [WHERE where_definition]</code></p><h4 id="_1-1-2-案例" tabindex="-1">1.1.2 案例 <a class="header-anchor" href="#_1-1-2-案例" aria-label="Permalink to &quot;1.1.2 案例&quot;">​</a></h4><ul><li><ol><li>统计一个班级<strong>数学成绩大于 80</strong>的有多少个学生</li></ol></li></ul><p><code>SELECT COUNT(*) as total from student WHERE math &gt; 80</code></p><ul><li><ol start="2"><li>统计一个班<strong>总分大于 250</strong>的有多少个学生</li></ol></li></ul><p><code>SELECT COUNT(*) as total from student WHERE (math + english + chinese ) &gt; 250</code></p><h4 id="_1-1-3-注意事项" tabindex="-1">1.1.3 注意事项 <a class="header-anchor" href="#_1-1-3-注意事项" aria-label="Permalink to &quot;1.1.3 注意事项&quot;">​</a></h4><ul><li><ol><li><code>count(*)</code> 返回满足条件的<strong>记录的行数</strong></li></ol></li><li><ol start="2"><li><code>count(列)</code> 统计满足条件的某列有多少个，但是<strong>会排除 null</strong></li></ol></li><li><ol start="3"><li><code>count</code>函数只能统计一列（即只有一个参数）</li></ol></li></ul><h2 id="_1-2-sum" tabindex="-1">1.2 sum() <a class="header-anchor" href="#_1-2-sum" aria-label="Permalink to &quot;1.2 sum()&quot;">​</a></h2><h4 id="_1-2-1-语法" tabindex="-1">1.2.1 语法 <a class="header-anchor" href="#_1-2-1-语法" aria-label="Permalink to &quot;1.2.1 语法&quot;">​</a></h4><p><code>select sum(列名) {，sum(列名)...} from table_name [WHERE where_definition]</code></p><h4 id="_1-2-2-案例" tabindex="-1">1.2.2 案例 <a class="header-anchor" href="#_1-2-2-案例" aria-label="Permalink to &quot;1.2.2 案例&quot;">​</a></h4><ul><li><ol><li>统计一个班级数学总成绩</li></ol></li></ul><p><code>SELECT SUM(math) from student</code></p><ul><li><ol start="2"><li>统计一个班级 语文，英语，数学各科的总成绩</li></ol></li></ul><p><code>SELECT sum(math) as math_total, sum(english) as english_total ,sum(chinese) as chinese_total from student</code></p><ul><li><ol start="3"><li>统计一个班级 语文，英语，数学成绩总和</li></ol></li></ul><p><code>SELECT sum(math + english + chinese ) from student</code></p><ul><li><ol start="4"><li>统计一个班级的平均分</li></ol></li></ul><p><code>SELECT sum(math + english + chinese ) / count(*) from student</code></p><h4 id="_1-2-3-注意事项" tabindex="-1">1.2.3 注意事项 <a class="header-anchor" href="#_1-2-3-注意事项" aria-label="Permalink to &quot;1.2.3 注意事项&quot;">​</a></h4><ul><li><ol><li><code>sum</code>函数返回满足条件的<strong>行的和</strong>，一般用在数值列</li></ol></li></ul><h2 id="_1-3-avg" tabindex="-1">1.3 avg() <a class="header-anchor" href="#_1-3-avg" aria-label="Permalink to &quot;1.3 avg()&quot;">​</a></h2><p><code>avg</code>函数返回满足<code>where</code>条件的<strong>一列的平均值</strong></p><h4 id="_1-3-1-语法" tabindex="-1">1.3.1 语法 <a class="header-anchor" href="#_1-3-1-语法" aria-label="Permalink to &quot;1.3.1 语法&quot;">​</a></h4><p><code>select avg(列名) {，avg(列名)...} from table_name [WHERE where_definition]</code></p><h4 id="_1-3-2-案例" tabindex="-1">1.3.2 案例 <a class="header-anchor" href="#_1-3-2-案例" aria-label="Permalink to &quot;1.3.2 案例&quot;">​</a></h4><ul><li><ol><li>统计一个班级数学和英语的平均分</li></ol></li></ul><p><code>SELECT avg(math),avg(english) from student</code></p><ul><li><ol start="2"><li>统计一个班级的平均分</li></ol></li></ul><p><code>SELECT avg(math + english + chinese) from student</code></p><h2 id="_1-4-max-min" tabindex="-1">1.4 max()/min() <a class="header-anchor" href="#_1-4-max-min" aria-label="Permalink to &quot;1.4 max()/min()&quot;">​</a></h2><h4 id="_1-4-1-语法" tabindex="-1">1.4.1 语法 <a class="header-anchor" href="#_1-4-1-语法" aria-label="Permalink to &quot;1.4.1 语法&quot;">​</a></h4><p><code>max()/min()</code>函数返回满足 where 条件的<strong>一列的最大/最小值</strong></p><p><code>SELECT max(列名) from table_name [WHERE where_definition]</code></p><h4 id="_1-4-2-案例" tabindex="-1">1.4.2 案例 <a class="header-anchor" href="#_1-4-2-案例" aria-label="Permalink to &quot;1.4.2 案例&quot;">​</a></h4><ul><li><ol><li>求班级最高分和最低分</li></ol></li></ul><p><code>SELECT max(math + english + chinese) ,min(math + english + chinese) from student</code></p>',41),r=[i];function n(s,h,d,c,u,m){return e(),l("div",null,r)}const f=a(t,[["render",n]]);export{p as __pageData,f as default};
