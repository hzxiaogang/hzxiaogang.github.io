import{_ as l,o,c as t,V as e}from"./chunks/framework.364d6ed5.js";const i="/trees.png",a="/tree2.png",r="/tree3.png",P=JSON.parse('{"title":"树","description":"","frontmatter":{"title":"树","date":"2022-06-27T18:44:39.000Z","permalink":"/pages/df68c6/","categories":["数据结构和算法","数据结构","树"],"tags":[null]},"headers":[],"relativePath":"数据结构和算法/数据结构/树/树.md","filePath":"数据结构和算法/数据结构/树/树.md","lastUpdated":1685624511000}'),s={name:"数据结构和算法/数据结构/树/树.md"},c=e('<h2 id="_1-简介" tabindex="-1">1. 简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1. 简介&quot;">​</a></h2><p>不同于<strong>数组</strong>，<strong>栈</strong>，<strong>队列</strong>，<strong>链表</strong>等<code>线性结构</code>，<code>树</code>是一种<code>非线性结构</code><img src="'+i+'"></p><h2 id="_2-树的规则" tabindex="-1">2. 树的规则 <a class="header-anchor" href="#_2-树的规则" aria-label="Permalink to &quot;2. 树的规则&quot;">​</a></h2><ul><li><ol><li>仅有唯一一个根节点，没有节点则为空树</li></ol></li><li><ol start="2"><li>除根节点外，每个节点都有并仅有唯一一个父节点</li></ol></li><li><ol start="3"><li>节点间不能形成闭环</li></ol></li></ul><p>符合上面三个规则，那么它就是一个树</p><h2 id="树的相关概念" tabindex="-1">树的相关概念 <a class="header-anchor" href="#树的相关概念" aria-label="Permalink to &quot;树的相关概念&quot;">​</a></h2><ul><li><ol start="0"><li>节点 ：树形结构中体现数据信息的和逻辑关系的单元</li></ol></li><li><ol><li>拥有相同父节点的节点，互称为兄弟节点</li></ol></li><li><ol start="2"><li>节点的深度 ：从根节点到该节点所经历的边的个数</li></ol></li><li><ol start="3"><li>节点的高度 ：从节点到叶子节点的最长路径上的边数。叶子节点的高度为0。</li></ol></li><li><ol start="4"><li>树的高度 ： 根节点的高度</li></ol></li><li><ol start="5"><li>节点的度 ：节点引出的分支的个数</li></ol></li><li><ol start="6"><li>树的度 ：这棵树所有节点的最大分支树（所有节点的度的最大值）</li></ol></li><li><ol start="7"><li>叶子节点 ：度为 0 的节点</li></ol></li></ul><img src="'+a+'"><p><code>B</code>、<code>C</code>、<code>D</code> 就互称为兄弟节点，其中，节点 <code>B</code> 的⾼度为 <code>2</code>，节点 <code>B</code> 的深度为 <code>1</code>，树的⾼度为 <code>3</code></p><img src="'+r+'">',10),d=[c];function n(_,p,h,m,g,u){return o(),t("div",null,d)}const T=l(s,[["render",n]]);export{P as __pageData,T as default};
