import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const p="/eventloop.png",C=JSON.parse('{"title":"js事件循环机制","description":"","frontmatter":{"title":"js事件循环机制","date":"2022-01-14T15:49:39.000Z","permalink":"/pages/b7f996/","categories":["知识碎片"],"tags":[null]},"headers":[],"relativePath":"JS和TS/ES5/js事件循环机制.md","filePath":"JS和TS/ES5/js事件循环机制.md","lastUpdated":1685623283000}'),o={name:"JS和TS/ES5/js事件循环机制.md"},e=l('<p>JavaScript 事件循环机制分为<code>浏览器</code>和 <code>Node</code> 事件循环机制，两者的实现技术不一样，<strong>浏览器 Event Loop 是 HTML 中定义的规范</strong>，Node Event Loop 是由 libuv 库实现。这里主要讲的是浏览器部分。</p><h2 id="_1-javascript-运行机制" tabindex="-1">1.javaScript 运行机制 <a class="header-anchor" href="#_1-javascript-运行机制" aria-label="Permalink to &quot;1.javaScript 运行机制&quot;">​</a></h2><ol><li><p>所有同步任务都在主线程上执行，形成一个执行栈 （execution context stack）</p></li><li><p>主线程之外，还存在<strong>任务队列（task queue）</strong>。只要<strong>异步任务</strong>有了结果，就在<strong>任务队列</strong>之中放置一个事件</p></li><li><p>一旦<strong>执行栈中</strong>的所有同步任务执行完毕，系统就会读取<strong>任务队列</strong>，看看里面有哪些事件。那些对应的异步任务于是结束等待状态，进入执行栈，开始执行。</p></li><li><p>主线程不断重复上面的第三部</p></li></ol><p>概括就是： 调用栈中的同步任务都执行完毕了，栈内被清空，就代表主线程空闲了，这个时候就会去任务队列按照顺序读取一个任务放入到栈中执行。每次栈内被清空，都会去读取任务队列有没有任务，有就读取执行，一直循环 <strong>读取-执行</strong>操作。</p><p>一个事件循环中有一个或者多个任务队列</p><h2 id="_2-异步任务" tabindex="-1">2. 异步任务 <a class="header-anchor" href="#_2-异步任务" aria-label="Permalink to &quot;2. 异步任务&quot;">​</a></h2><p>JavaScript 有两种异步任务： <strong>宏任务</strong>和<strong>微任务</strong></p><h3 id="_2-1-宏任务" tabindex="-1">2.1 宏任务 <a class="header-anchor" href="#_2-1-宏任务" aria-label="Permalink to &quot;2.1 宏任务&quot;">​</a></h3><p>宏任务包括： script(整体代码)， setTimeout， setInterval， setImmediate， I/O，UI rendering</p><h3 id="_2-2-微任务" tabindex="-1">2.2 微任务 <a class="header-anchor" href="#_2-2-微任务" aria-label="Permalink to &quot;2.2 微任务&quot;">​</a></h3><p>微任务包括：process.nextTick(node.js)， Promise， Object.observe， MutationObserver(监听 DOM 变动的 API)</p><h2 id="_3-事件循环是什么" tabindex="-1">3. 事件循环是什么 <a class="header-anchor" href="#_3-事件循环是什么" aria-label="Permalink to &quot;3. 事件循环是什么&quot;">​</a></h2><p>主程序从<strong>任务队列</strong>中读取执行事件，这个过程是循环不断的，这个机制被称为时间循环。此机制具体如下:主线程会不断从任务队列中按顺序取任务执行，每执行完一个任务都会检查 microtask 队列是否为空（执行完一个任务的具体标志是函数执行栈为空），如果不为空则会一次性执行完所有 microtask。然后再进入下一个循环去任务队列中取下一个任务执行。</p><h3 id="_3-1-详细说明" tabindex="-1">3.1 详细说明 <a class="header-anchor" href="#_3-1-详细说明" aria-label="Permalink to &quot;3.1 详细说明&quot;">​</a></h3><ol><li>选择当前要执行的宏任务队列，选择一个最先进入任务队列的宏任务，如果没有宏任务可以选择，则会跳转至 microtask 的执行步骤。</li><li>将事件循环的当前运行宏任务设置为已选择的宏任务。</li><li>运行宏任务。</li><li>将事件循环的当前运行任务设置为 null。</li><li>将运行完的宏任务从宏任务队列中移除。</li><li>microtasks 步骤：进入 microtask 检查点。</li><li>更新界面渲染。</li><li>返回第一步。</li></ol><h3 id="_3-2-执行进入-microtask-检查的具体步骤" tabindex="-1">3.2 执行进入 microtask 检查的具体步骤 <a class="header-anchor" href="#_3-2-执行进入-microtask-检查的具体步骤" aria-label="Permalink to &quot;3.2 执行进入 microtask 检查的具体步骤&quot;">​</a></h3><ol><li>设置进入 microtask 检查点的标志为 true。</li><li>当事件循环的微任务队列不为空时：选择一个最先进入 microtask 队列的 microtask；设置事件循环的当前运行任务为已选择的 microtask；运行 microtask；设置事件循环的当前运行任务为 null；将运行结束的 microtask 从 microtask 队列中移除。</li><li>对于相应事件循环的每个环境设置对象（environment settings object）,通知它们哪些 promise 为 rejected。</li><li>清理 indexedDB 的事务。</li><li>设置进入 microtask 检查点的标志为 false。</li></ol><h4 id="_3-2-1-需要注意的是" tabindex="-1">3.2.1 需要注意的是 <a class="header-anchor" href="#_3-2-1-需要注意的是" aria-label="Permalink to &quot;3.2.1 需要注意的是&quot;">​</a></h4><p>当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件, 然后再去宏任务队列中取出一个事件。同一次事件循环中, 微任务永远在宏任务之前执行。如下图：</p><img src="'+p+`"><h2 id="_4-案例分析" tabindex="-1">4.案例分析 <a class="header-anchor" href="#_4-案例分析" aria-label="Permalink to &quot;4.案例分析&quot;">​</a></h2><h3 id="_4-1-案例一" tabindex="-1">4.1 案例一 <a class="header-anchor" href="#_4-1-案例一" aria-label="Permalink to &quot;4.1 案例一&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeout1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">222</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeout2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">111</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 运行结果</span></span>
<span class="line"><span style="color:#F78C6C;">111</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F78C6C;">222</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout2</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li>主线程上没有需要执行的代码</li><li>接着遇到 setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中(这个任务在下一次的事件循环中执行)。</li><li>接着遇到 setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中(这个任务在再下一次的事件循环中执行)。</li><li>首先检查微任务队列, 即 microtask 队列，发现此队列不为空，执行第一个 promise 的 then 回调，输出 &#39;111&#39;。</li><li>此时 microtask 队列为空，进入下一个事件循环, 检查宏任务队列，发现有 setTimeout 的回调函数，立即执行回调函数输出 &#39;setTimeout1&#39;,检查 microtask 队列，发现队列不为空，执行 promise 的 then 回调，输出&#39;222&#39;，microtask 队列为空，进入下一个事件循环。</li><li>检查宏任务队列，发现有 setTimeout 的回调函数, 立即执行回调函数输出&#39;setTimeout2&#39;。</li></ol><h3 id="_4-2-案例二" tabindex="-1">4.2 案例二 <a class="header-anchor" href="#_4-2-案例二" aria-label="Permalink to &quot;4.2 案例二&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeout---0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">setTimeout---200</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">inner-setTimeout---0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise5</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">200</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">promise3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script end</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 运行结果</span></span>
<span class="line"><span style="color:#A6ACCD;">script start</span></span>
<span class="line"><span style="color:#A6ACCD;">script end</span></span>
<span class="line"><span style="color:#A6ACCD;">promise1</span></span>
<span class="line"><span style="color:#A6ACCD;">promise3</span></span>
<span class="line"><span style="color:#A6ACCD;">promise2</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout</span><span style="color:#89DDFF;">---</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">setTimeout</span><span style="color:#89DDFF;">---</span><span style="color:#F78C6C;">200</span></span>
<span class="line"><span style="color:#A6ACCD;">promise5</span></span>
<span class="line"><span style="color:#A6ACCD;">inner</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">setTimeout</span><span style="color:#89DDFF;">---</span><span style="color:#F78C6C;">0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol><li>首先顺序执行完主进程上的同步任务，第一句和最后一句的 console.log</li><li>接着遇到 setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中(这个任务在下一次的事件循环中执行)。</li><li>接着遇到 setTimeout 200，它的作用是在 200ms 后将回调函数放到宏任务队列中(这个任务在再下一次的事件循环中执行)。</li><li>同步任务执行完之后，首先检查微任务队列, 即 microtask 队列，发现此队列不为空，执行第一个 promise 的 then 回调，输出 &#39;promise1&#39;，然后执行第二个 promise 的 then 回调，输出&#39;promise3&#39;，由于第一个 promise 的.then()的返回依然是 promise，所以第二个.then()会放到 microtask 队列继续执行，输出 &#39;promise2&#39;;</li><li>此时 microtask 队列为空，进入下一个事件循环, 检查宏任务队列，发现有 setTimeout 的回调函数，立即执行回调函数输出 &#39;setTimeout---0&#39;,检查 microtask 队列，队列为空，进入下一次事件循环.</li><li>检查宏任务队列，发现有 setTimeout 的回调函数, 立即执行回调函数输出&#39;setTimeout---200&#39;.</li><li>接着遇到 setTimeout 0，它的作用是在 0ms 后将回调函数放到宏任务队列中，检查微任务队列，即 microtask 队列，发现此队列不为空，执行 promise 的 then 回调，输出&#39;promise5&#39;。</li><li>此时 microtask 队列为空，进入下一个事件循环，检查宏任务队列，发现有 setTimeout 的回调函数，立即执行回调函数输出，输出&#39;inner-setTimeout---0&#39;。代码执行结束.</li></ol><h2 id="_5-为什么要用事件循环" tabindex="-1">5. 为什么要用事件循环 <a class="header-anchor" href="#_5-为什么要用事件循环" aria-label="Permalink to &quot;5. 为什么要用事件循环&quot;">​</a></h2><p>因为 JavaScript 是单线程的。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。为了协调事件（event），用户交互（user interaction），脚本（script），渲染（rendering），网络（networking）等，用户代理（user agent）必须使用事件循环（event loops）。</p>`,31),t=[e];function r(c,i,F,y,D,A){return n(),a("div",null,t)}const u=s(o,[["render",r]]);export{C as __pageData,u as default};
