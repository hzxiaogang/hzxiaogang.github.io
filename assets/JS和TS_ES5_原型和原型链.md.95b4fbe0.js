import{_ as s,o as n,c as a,V as o}from"./chunks/framework.364d6ed5.js";const l="/chain.png",d=JSON.parse('{"title":"原型和原型链","description":"","frontmatter":{"title":"原型和原型链","date":"2021-08-29T09:30:33.000Z","permalink":"/pages/1ef0b0/","categories":["JS和TS","ES5"],"tags":[null]},"headers":[],"relativePath":"JS和TS/ES5/原型和原型链.md","filePath":"JS和TS/ES5/原型和原型链.md","lastUpdated":1685623283000}'),p={name:"JS和TS/ES5/原型和原型链.md"},e=o(`<h2 id="_1-原型" tabindex="-1">1. 原型 <a class="header-anchor" href="#_1-原型" aria-label="Permalink to &quot;1. 原型&quot;">​</a></h2><p>在 JavaScript 中，每一个函数都有一个<code>prototype</code>属性，这个属性指向函数的<strong>原型对象</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">Person</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">run ...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> p1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> p2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">李四</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">p1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &#39;run...&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">p2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// &#39;run...&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>函数的<code>prototype</code>指向了一个对象，而这个对象正是调用构造函数时创建的<strong>实例</strong>的<strong>原型</strong>。 <code>Person.prototype</code> 是 <code>Person</code>的原型对象。 <code>Person.prototype</code> 是 <code>p1</code> 的原型。</p><ul><li><ol><li>原型对象上的属性和方法会被实例对象共享</li></ol></li><li><ol start="2"><li>原型对象的<code>constructor</code>属性指向<strong>构造函数</strong></li></ol></li><li><ol start="3"><li>实例属性的<code>_proto_</code>属性指向<strong>原型对象</strong></li></ol></li></ul><p>我们可以使用<code>Object.getPrototypeOf(obj)</code>获取实例对象（obj）的<code>原型对象</code>，使用<code>Object.setPrototypeOf(obj, prototype)</code>设置实例对象（obj）的原型对象</p><h2 id="_2-原型链" tabindex="-1">2. 原型链 <a class="header-anchor" href="#_2-原型链" aria-label="Permalink to &quot;2. 原型链&quot;">​</a></h2><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到顶层（null）为止。</p><p>所以原型链指的是 ： 实例和原型之间的关系。</p><p>具体的原型链看下图：</p><img src="`+l+`"><p>图中相互关联的原型组成的链状结构就是原型链。如图中的蓝色线条。</p><p><code>null</code> 表示 <strong>没有对象</strong>，即该处不应该有值。所以 <code>Object.prototype._proto_</code>的值为<code>null</code>跟<code>Object.prototype</code>没有原型，其实表达了一个意思。所以查找属性的时候，查到<code>Object.prototype</code>就可以停止查找了。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_proto_ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_proto_ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_proto_ </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>`,14),t=[e];function r(c,y,D,i,F,A){return n(),a("div",null,t)}const u=s(p,[["render",r]]);export{d as __pageData,u as default};
