import{_ as e,o as a,c,V as o}from"./chunks/framework.364d6ed5.js";const b=JSON.parse('{"title":"plugin原理","description":"","frontmatter":{"title":"plugin原理","date":"2022-07-12T16:27:35.000Z","permalink":"/pages/c4232d/","categories":["modules","webpack","plugin原理"],"tags":[null]},"headers":[],"relativePath":"modules/webpack/plugin原理/plugin原理.md","filePath":"modules/webpack/plugin原理/plugin原理.md","lastUpdated":1685623283000}'),p={name:"modules/webpack/plugin原理/plugin原理.md"},t=o('<h2 id="_1-plugin-的作用" tabindex="-1">1. plugin 的作用 <a class="header-anchor" href="#_1-plugin-的作用" aria-label="Permalink to &quot;1. plugin 的作用&quot;">​</a></h2><p>通过插件我们可以扩展 <code>webpack</code>，加入自定义的构建行为，使 webpack 可以执行更广泛的任务，拥有更强的构建能力。</p><h2 id="_2-plugin-的工作原理" tabindex="-1">2. plugin 的工作原理 <a class="header-anchor" href="#_2-plugin-的工作原理" aria-label="Permalink to &quot;2. plugin 的工作原理&quot;">​</a></h2><p><code>webpack</code> 就像一条生产线，要经过一系列处理流程后才能将源文件转换成输出结果。 这条生产线上的每个处理流程的职责都是单一的，多个流程之间有存在依赖关系，只有完成当前处理后才能交给下一个流程去处理。 插件就像是一个插入到生产线中的一个功能，在特定的时机对生产线上的资源做处理。<code>webpack</code> 通过 <code>Tapable</code>来组织这条复杂的生产线。 <code>webpack</code>在运行过程中会广播事件，插件只需要监听它所关心的事件，就能加入到这条生产线中，去改变生产线的运作。 <code>webpack</code> 的事件流机制保证了插件的有序性，使得整个系统扩展性很好。 ——「深入浅出 Webpack」</p><p>站在代码逻辑的角度就是：<code>webpack</code> 在编译代码过程中，会触发一系列 <code>Tapable</code> 钩子事件，插件所做的，就是找到相应的钩子，往上面挂上自己的任务，也就是注册事件，这样，当 <code>webpack</code>构建的时候，插件注册的事件就会随着钩子的触发而执行了。</p>',5),l=[t];function d(n,i,s,_,u,r){return a(),c("div",null,l)}const k=e(p,[["render",d]]);export{b as __pageData,k as default};
