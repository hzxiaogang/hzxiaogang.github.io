import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const u=JSON.parse('{"title":"手写style-loader","description":"","frontmatter":{"title":"手写style-loader","date":"2022-07-12T15:39:08.000Z","permalink":"/pages/98531e/","categories":["modules","webpack","loader原理"],"tags":[null]},"headers":[],"relativePath":"modules/webpack/loader原理/手写style-loader.md","filePath":"modules/webpack/loader原理/手写style-loader.md","lastUpdated":1685623283000}'),e={name:"modules/webpack/loader原理/手写style-loader.md"},p=l(`<p>作用：动态创建 <code>style</code> 标签，插入 <code>js</code> 中的样式代码，使样式生效。</p><h2 id="_1-style-loader-js" tabindex="-1">1. style-loader.js <a class="header-anchor" href="#_1-style-loader-js" aria-label="Permalink to &quot;1. style-loader.js&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> styleLoader </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">styleLoader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pitch</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">remainingRequest</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    remainingRequest: C:\\Users\\86176\\Desktop\\source\\node_modules\\css-loader\\dist\\cjs.js!C:\\Users\\86176\\Desktop\\source\\src\\css\\index.css</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      这里是inline loader用法，代表后面还有一个css-loader等待处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    最终我们需要将remainingRequest中的路径转化成相对路径，webpack才能处理</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      希望得到：../../node_modules/css-loader/dist/cjs.js!./index.css</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    所以：需要将绝对路径转化成相对路径</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    要求：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      1. 必须是相对路径</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      2. 相对路径必须以 ./ 或 ../ 开头</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      3. 相对路径的路径分隔符必须是 / ，不能是 \\</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">relativeRequest</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">remainingRequest</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">part</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 将路径转化为相对路径</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">relativePath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">utils</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">contextify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">part</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">relativePath</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    !!\${relativeRequest} </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      relativeRequest：../../node_modules/css-loader/dist/cjs.js!./index.css</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      relativeRequest是inline loader用法，代表要处理的index.css资源, 使用css-loader处理</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      !!代表禁用所有配置的loader，只使用inline loader。（也就是外面我们style-loader和css-loader）,它们被禁用了，只是用我们指定的inline loader，也就是css-loader</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    import style from &quot;!!\${relativeRequest}&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      引入css-loader处理后的css文件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      为什么需要css-loader处理css文件，不是我们直接读取css文件使用呢？</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      因为可能存在@import导入css语法，这些语法就要通过css-loader解析才能变成一个css文件，否则我们引入的css资源会缺少</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    const styleEl = document.createElement(&#39;style&#39;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      动态创建style标签</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    styleEl.innerHTML = style</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      将style标签内容设置为处理后的css代码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    document.head.appendChild(styleEl)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      添加到head中生效</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">script</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    import style from &quot;!!</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">relativeRequest</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;</span></span>
<span class="line"><span style="color:#C3E88D;">    const styleEl = document.createElement(&#39;style&#39;)</span></span>
<span class="line"><span style="color:#C3E88D;">    styleEl.innerHTML = style</span></span>
<span class="line"><span style="color:#C3E88D;">    document.head.appendChild(styleEl)</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// style-loader是第一个loader, 由于return导致熔断，所以其他loader不执行了（不管是normal还是pitch）</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> styleLoader</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div>`,3),o=[p];function t(c,r,i,y,F,D){return n(),a("div",null,o)}const d=s(e,[["render",t]]);export{u as __pageData,d as default};
