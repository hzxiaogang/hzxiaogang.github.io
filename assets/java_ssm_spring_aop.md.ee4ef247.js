import{_ as a,o as s,c as l,V as n}from"./chunks/framework.364d6ed5.js";const u=JSON.parse('{"title":"aop","description":"","frontmatter":{"title":"aop","date":"2022-09-20T23:04:04.000Z","permalink":"/pages/9851b3/","categories":["java","spring"],"tags":[null]},"headers":[],"relativePath":"java/ssm/spring/aop.md","filePath":"java/ssm/spring/aop.md","lastUpdated":1685806707000}'),o={name:"java/ssm/spring/aop.md"},e=n(`<h1 id="aop" tabindex="-1">aop <a class="header-anchor" href="#aop" aria-label="Permalink to &quot;aop&quot;">​</a></h1><h2 id="_1-aop-术语" tabindex="-1">1. AOP 术语 <a class="header-anchor" href="#_1-aop-术语" aria-label="Permalink to &quot;1. AOP 术语&quot;">​</a></h2><h3 id="_1-1-连接点" tabindex="-1">1.1 连接点 <a class="header-anchor" href="#_1-1-连接点" aria-label="Permalink to &quot;1.1 连接点&quot;">​</a></h3><p>类里的那些方法可以被增强，这些方法称为连接点</p><h3 id="_1-2-切入点" tabindex="-1">1.2 切入点 <a class="header-anchor" href="#_1-2-切入点" aria-label="Permalink to &quot;1.2 切入点&quot;">​</a></h3><p>实际被真正增强的方法，称为切入点</p><h3 id="_1-3-通知-增强" tabindex="-1">1.3 通知（增强） <a class="header-anchor" href="#_1-3-通知-增强" aria-label="Permalink to &quot;1.3 通知（增强）&quot;">​</a></h3><p>实际增强的逻辑部分称为通知。</p><h4 id="_1-3-1-通知有很多种类型" tabindex="-1">1.3.1 通知有很多种类型 <a class="header-anchor" href="#_1-3-1-通知有很多种类型" aria-label="Permalink to &quot;1.3.1 通知有很多种类型&quot;">​</a></h4><ul><li><ol><li>：前置通知 切入点执行之前会执行<code>@Before</code></li></ol></li><li><ol start="2"><li>：后置通知 切入点执行之后会执行 <code>@AfterReturning</code></li></ol></li><li><ol start="3"><li>：环绕通知 切入点执行前后都会执行 <code>@Around</code></li></ol></li><li><ol start="4"><li>：异常通知 切入点执行异常后执行 <code>@AfterThrowing</code></li></ol></li><li><ol start="5"><li>：最终通知 类似于 <code>try-catch-finally</code> 里的 <code>finally</code> 方法，不管保存切入点是否执行异常，最后都会执行<code>@After</code></li></ol></li></ul><h3 id="_1-4-切面" tabindex="-1">1.4 切面 <a class="header-anchor" href="#_1-4-切面" aria-label="Permalink to &quot;1.4 切面&quot;">​</a></h3><p>是动作， 把通知应用到切入点的过程就叫做切面</p><h2 id="_2-aop-操作" tabindex="-1">2. AOP 操作 <a class="header-anchor" href="#_2-aop-操作" aria-label="Permalink to &quot;2. AOP 操作&quot;">​</a></h2><p>在 <code>spring</code> 中实现 <code>aop</code> 操作有多种方式，<code>Spring</code> 框架一般基于 <code>AspectJ</code> 实现 <code>AOP</code>操作。</p><h3 id="_2-1-aspectj" tabindex="-1">2.1 AspectJ <a class="header-anchor" href="#_2-1-aspectj" aria-label="Permalink to &quot;2.1 AspectJ&quot;">​</a></h3><p><code>AspectJ</code> 不是 <code>Spring 组成部分，是一个独立的</code>AOP<code>框架，一般把</code>AspectJ<code>和</code>Spring <code>框架一起使用，进行</code>AOP\` 操作</p><h3 id="_2-2-基于-aspectj-实现-aop-操作有两种方式" tabindex="-1">2.2 基于 AspectJ 实现 AOP 操作有两种方式 <a class="header-anchor" href="#_2-2-基于-aspectj-实现-aop-操作有两种方式" aria-label="Permalink to &quot;2.2 基于 AspectJ 实现 AOP 操作有两种方式&quot;">​</a></h3><ul><li><ol><li>基于 <code>Aspect XML</code> 配置文件实现</li></ol></li><li><ol start="2"><li>基于注解方式实现（常用）</li></ol></li></ul><h3 id="_3-在项目在引入相关-aop-依赖" tabindex="-1">3. 在项目在引入相关 AOP 依赖 <a class="header-anchor" href="#_3-在项目在引入相关-aop-依赖" aria-label="Permalink to &quot;3. 在项目在引入相关 AOP 依赖&quot;">​</a></h3><h3 id="_4-切入点表达式" tabindex="-1">4. 切入点表达式 <a class="header-anchor" href="#_4-切入点表达式" aria-label="Permalink to &quot;4. 切入点表达式&quot;">​</a></h3><h4 id="_4-1-切入点表达式作用-知道那个类的那个方法进行增强" tabindex="-1">4.1 切入点表达式作用： 知道那个类的那个方法进行增强 <a class="header-anchor" href="#_4-1-切入点表达式作用-知道那个类的那个方法进行增强" aria-label="Permalink to &quot;4.1 切入点表达式作用： 知道那个类的那个方法进行增强&quot;">​</a></h4><h4 id="_4-2-语法结构" tabindex="-1">4.2 语法结构 <a class="header-anchor" href="#_4-2-语法结构" aria-label="Permalink to &quot;4.2 语法结构&quot;">​</a></h4><p><code>execution([权限修饰符][返回类型][类全路径][方法名称]([参数列表]))</code></p><ul><li><ol><li>举例 1 ： 对 <code>com.atguigu.dao.BookDao</code> 类里面的 <code>add</code> 方法进行增强</li></ol></li></ul><p><code>execution(* com.atguigu.dao.BookDao.add(..) )</code></p><ul><li><p>使用 <code>*</code> 表示任意的修饰符(<code>public</code>,<code>private</code> 等)。</p></li><li><p>返回类型可以省略不写。</p></li><li><p>.. 代替参数列表</p></li><li><ol start="2"><li>举例 2 ： 对 <code>com.atguigu.dao.BookDao</code> 类里面的所有方法进行增强</li></ol></li></ul><p><code>execution(* com.atguigu.dao.BookDao.*(..) )</code></p><ul><li>3.举例 3 ： 对 com.atguigu.dao 包里面的所有，类里面所有方法进行增强</li></ul><p><code>execution(* com.atguigu.dao.*.*(..) )</code></p><h2 id="_3-aop-操作-注解" tabindex="-1">3. AOP 操作（注解） <a class="header-anchor" href="#_3-aop-操作-注解" aria-label="Permalink to &quot;3. AOP 操作（注解）&quot;">​</a></h2><h3 id="_3-1-创建类-在类里面定义方法" tabindex="-1">3.1 创建类，在类里面定义方法 <a class="header-anchor" href="#_3-1-创建类-在类里面定义方法" aria-label="Permalink to &quot;3.1 创建类，在类里面定义方法&quot;">​</a></h3><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> clas User</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(){</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add ......</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);}</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-2-创建增强类-编写增强逻辑" tabindex="-1">3.2 创建增强类(编写增强逻辑) <a class="header-anchor" href="#_3-2-创建增强类-编写增强逻辑" aria-label="Permalink to &quot;3.2 创建增强类(编写增强逻辑)&quot;">​</a></h3><ul><li><ol><li>在增强类里面，创建方法，让不同方法代表不同通知类型</li></ol></li></ul><p>增强的类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">UserProxy</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 前置通知</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">before</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;"> System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">before.....</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-3-进行通知的配置" tabindex="-1">3.3 进行通知的配置 <a class="header-anchor" href="#_3-3-进行通知的配置" aria-label="Permalink to &quot;3.3 进行通知的配置&quot;">​</a></h3><ul><li><ol><li>在 <code>spring</code> 配置文件中，开启注解扫描（或者通过全注解方式）</li></ol><ul><li><p>添加 <code>aop</code> 和 <code>context</code> 名称空间</p></li><li><p><code>&lt;context:component-scan base-package=&quot;com.atguigu.spring5&quot;&gt;&lt;/context:component-scan&gt;</code></p></li></ul></li><li><ol start="2"><li>使用注解创建 <code>User</code> 和 <code>UserProxy</code> 对象</li></ol></li></ul><p>在 <code>User</code> 和 <code>UserProxy</code> 对象上添加 <code>@Component</code> 注解</p><ul><li><ol start="3"><li>在增强类上面添加注解 <code>@Aspect</code></li></ol></li><li><ol start="4"><li>在 <code>spring</code> 配置文件中开启生成代理对象</li></ol></li></ul><p><code>&lt;aop:aspectj-autoproxy&gt;&lt;/aop:aspectj-autoproxy&gt;</code></p><h3 id="_3-4-配置不同类型的通知" tabindex="-1">3.4. 配置不同类型的通知 <a class="header-anchor" href="#_3-4-配置不同类型的通知" aria-label="Permalink to &quot;3.4. 配置不同类型的通知&quot;">​</a></h3><p>在增强类里面，在作为通知方法上面添加通知类型的注解，使用切入点表达式配置</p><h3 id="_3-5-相同的切入点表达式抽取" tabindex="-1">3.5. 相同的切入点表达式抽取 <a class="header-anchor" href="#_3-5-相同的切入点表达式抽取" aria-label="Permalink to &quot;3.5. 相同的切入点表达式抽取&quot;">​</a></h3><p>重用切入点</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Pointcut</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">execution(* com.atguigu.spring5.aopanno.User.add(..))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pointdemo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后在切入点表达式调用改方法</p><h3 id="_3-6-有多个增强类对同一个方法进行增强-设置增强类的优先级" tabindex="-1">3.6. 有多个增强类对同一个方法进行增强，设置增强类的优先级 <a class="header-anchor" href="#_3-6-有多个增强类对同一个方法进行增强-设置增强类的优先级" aria-label="Permalink to &quot;3.6. 有多个增强类对同一个方法进行增强，设置增强类的优先级&quot;">​</a></h3><p>在增强类上面添加注解 <code>@Order</code>(数字类型值) ， 数字类型值越小，优先级越高</p><h3 id="_3-7-完全使用注解开发-可以省略-3-中的-1-和-4" tabindex="-1">3.7.完全使用注解开发 （可以省略 3 中的 1）和 4） ） <a class="header-anchor" href="#_3-7-完全使用注解开发-可以省略-3-中的-1-和-4" aria-label="Permalink to &quot;3.7.完全使用注解开发 （可以省略 3 中的 1）和 4） ）&quot;">​</a></h3><p>创建配置类，不需要创建 xml 配置文件</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ComponentScan</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">basePackages</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.atguigu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">})</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">EnableAspectJAutoProxy</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">proxyTargetClass</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ConfigAop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_4-aop-操作-aspectj-配置文件" tabindex="-1">4. AOP 操作（AspectJ 配置文件） <a class="header-anchor" href="#_4-aop-操作-aspectj-配置文件" aria-label="Permalink to &quot;4. AOP 操作（AspectJ 配置文件）&quot;">​</a></h2><h3 id="_4-1-创建两个类-增强类和被增强类-创建方法" tabindex="-1">4.1 创建两个类，增强类和被增强类，创建方法 <a class="header-anchor" href="#_4-1-创建两个类-增强类和被增强类-创建方法" aria-label="Permalink to &quot;4.1 创建两个类，增强类和被增强类，创建方法&quot;">​</a></h3><h3 id="_4-2-在-spring-配置文件中创建两个类对象" tabindex="-1">4.2. 在 spring 配置文件中创建两个类对象 <a class="header-anchor" href="#_4-2-在-spring-配置文件中创建两个类对象" aria-label="Permalink to &quot;4.2. 在 spring 配置文件中创建两个类对象&quot;">​</a></h3><p>创建对象</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">bean</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">book</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.atguigu.spring5.aopxml.Book</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">bean</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bookProxy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">com.atguigu.spring5.aopxml.BookProxy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_4-3-在-spring-配置文件中配置切入点" tabindex="-1">4.3. 在 spring 配置文件中配置切入点 <a class="header-anchor" href="#_4-3-在-spring-配置文件中配置切入点" aria-label="Permalink to &quot;4.3. 在 spring 配置文件中配置切入点&quot;">​</a></h3><p>配置 aop 增强</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!--切入点--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">pointcut</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">expression</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">execution(* com.atguigu.spring5.aopxml.Book.buy(..))</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">&lt;!--配置切面--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">aspect</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bookProxy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!--增强作用在具体的方法上--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!--把before方法作用在 buy方法上面，并在buy方法之前执行--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">aop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">before</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">before</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">pointcut-ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">p</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">aop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">aspect</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">aop</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">config</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,60),p=[e];function t(r,c,i,d,D,y){return s(),l("div",null,p)}const h=a(o,[["render",t]]);export{u as __pageData,h as default};
