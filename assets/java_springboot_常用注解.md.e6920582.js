import{_ as s,o as a,c as n,V as l}from"./chunks/framework.364d6ed5.js";const A=JSON.parse('{"title":"常用注解","description":"","frontmatter":{"title":"常用注解","date":"2023-05-23T22:16:12.000Z","permalink":"/pages/de5bcb/","categories":["java","springboot"],"tags":[null]},"headers":[],"relativePath":"java/springboot/常用注解.md","filePath":"java/springboot/常用注解.md","lastUpdated":1702900355000}'),o={name:"java/springboot/常用注解.md"},e=l(`<h1 id="常用注解" tabindex="-1">常用注解 <a class="header-anchor" href="#常用注解" aria-label="Permalink to &quot;常用注解&quot;">​</a></h1><h2 id="_1-bean处理" tabindex="-1">1. Bean处理 <a class="header-anchor" href="#_1-bean处理" aria-label="Permalink to &quot;1. Bean处理&quot;">​</a></h2><h3 id="_1-依赖注入" tabindex="-1">1. 依赖注入 <a class="header-anchor" href="#_1-依赖注入" aria-label="Permalink to &quot;1. 依赖注入&quot;">​</a></h3><h4 id="_1-autowired" tabindex="-1">1. @Autowired <a class="header-anchor" href="#_1-autowired" aria-label="Permalink to &quot;1. @Autowired&quot;">​</a></h4><p>对<strong>成员变量</strong>，<strong>方法</strong>，<strong>构造函数</strong>进行标注，完成自动装配工作。<code>@Autowired</code>是根据<strong>类型</strong>进行自动装配的，如果有多个相同类型的<code>Bean</code>，而没有明确指定应该注入哪个<code>Bean</code>时，<code>@Autowired</code>可能会引起歧义。在这种情况下，需要配合<code>@Qualifier</code>或其他解决策略来消除歧义</p><h4 id="_2-qualifier" tabindex="-1">2. @Qualifier <a class="header-anchor" href="#_2-qualifier" aria-label="Permalink to &quot;2. @Qualifier&quot;">​</a></h4><ul><li><code>@Qualifier</code> 也是<code>Spring</code>框架提供的注解，用于进一步细化<code>@Autowired</code>的匹配过程。</li><li>当有多个<strong>相同类型</strong>的<code>Bean</code>时，通过在目标字段或方法上使用<code>@Qualifier</code>，并提供一个唯一的标识符（如<code>bean</code>的名字），可以明确指定应该注入哪个特定的<code>Bean</code>。</li><li><code>@Qualifier</code>需要和<code>@Autowired</code>一起使用，以便<code>Spring</code>容器能够根据指定的标识符找到并注入正确的<code>Bean</code>。</li></ul><h4 id="_3-resource" tabindex="-1">3. @Resource <a class="header-anchor" href="#_3-resource" aria-label="Permalink to &quot;3. @Resource&quot;">​</a></h4><ul><li><code>@Resource</code> 是<code>JSR-250</code>规范的一部分，不仅限于<code>Spring</code>框架，但在<code>Spring</code>中也得到了支持。</li><li><code>@Resource</code>默认按照<code>Bean</code>的名称进行装配注入，只有当找不到与名称匹配的<code>Bean</code>时，才会尝试按照类型进行装配</li><li><code>@Resource</code>有两个重要的属性：<code>name</code>和<code>type</code>。如果指定了<code>name</code>属性，<code>Spring</code>将按照名称进行装配；如果指定了<code>type</code>属性，<code>Spring</code>将按照类型进行装配。但是，通常只使用<code>name</code>属性来避免类型匹配的歧义。</li></ul><h3 id="_2-标注类被spring容器管理" tabindex="-1">2. 标注类被Spring容器管理 <a class="header-anchor" href="#_2-标注类被spring容器管理" aria-label="Permalink to &quot;2. 标注类被Spring容器管理&quot;">​</a></h3><h4 id="_1-component" tabindex="-1">1. @Component <a class="header-anchor" href="#_1-component" aria-label="Permalink to &quot;1. @Component&quot;">​</a></h4><p>泛指组件，相当于配置文件中的 <code>&lt;bean id=&quot;&quot; class=&quot;&quot;/&gt;</code>。当组件不好归类时（组件不属于<code>@Controller</code>、<code>@Services</code> ,<code>@Repository</code>），我们就可以使用<code>@Component</code>来进行标注，一般公共的类我们会使用这个注解。</p><h4 id="_2-repository" tabindex="-1">2. @Repository <a class="header-anchor" href="#_2-repository" aria-label="Permalink to &quot;2. @Repository&quot;">​</a></h4><p>用于<strong>数据持久层</strong>，经常标记在<code>DAO</code>类上</p><h4 id="_3-service" tabindex="-1">3. @Service <a class="header-anchor" href="#_3-service" aria-label="Permalink to &quot;3. @Service&quot;">​</a></h4><p>标记一个类作为业务逻辑层(<code>Service</code>层)的 <code>Bean</code>。（<code>Service</code>层需要注入<code>Dao</code>层）</p><h4 id="_4-controller" tabindex="-1">4. @Controller <a class="header-anchor" href="#_4-controller" aria-label="Permalink to &quot;4. @Controller&quot;">​</a></h4><p>标记一个类作为 <code>Spring MVC</code> 控制器。</p><p><code>MVC</code><strong>控制层</strong><code>bean</code>，(<code>Controller</code>层需要注入<code>Service</code>层)</p><h4 id="_5-restcontroller" tabindex="-1">5. @RestController <a class="header-anchor" href="#_5-restcontroller" aria-label="Permalink to &quot;5. @RestController&quot;">​</a></h4><p>标记一个类作为 <code>Spring MVC</code> 控制器，返回<code> JSON</code> 或<code> XML</code> 数据。开发<code>REST</code>服务时经常使用。</p><p><code>@RestController</code>是一个复合注解，继承于<code>@Controller</code>，相当于<code>@ResponseBody</code>+<code>@Controller</code>合在一起的作用。</p><p>查看 <code>@RestController</code>源码</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Target</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ElementType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TYPE</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Retention</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RetentionPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RUNTIME</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Documented</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Controller</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">ResponseBody</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">RestController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AliasFor</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Controller</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>@RestController</code>注解,</p><h4 id="_6-configuration" tabindex="-1">6. @Configuration <a class="header-anchor" href="#_6-configuration" aria-label="Permalink to &quot;6. @Configuration&quot;">​</a></h4><p><code>@Configuration</code>注解是<code>Spring</code>的注解，它的作用是 ： <strong>声明一个配置类，取代<code>bean.xml</code>配置文件注册<code>bean</code>对象</strong></p><h4 id="_7-configuration注解分析" tabindex="-1">7. <code>@Configuration</code>注解分析 <a class="header-anchor" href="#_7-configuration注解分析" aria-label="Permalink to &quot;7. \`@Configuration\`注解分析&quot;">​</a></h4><h5 id="_1-源码" tabindex="-1">1.源码 <a class="header-anchor" href="#_1-源码" aria-label="Permalink to &quot;1.源码&quot;">​</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Target</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">ElementType</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TYPE</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Retention</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">RetentionPolicy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RUNTIME</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Documented</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Component</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Configuration</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AliasFor</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">annotation</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">proxyBeanMethods</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li><ol><li>底层代码就两个属性：</li></ol><ul><li><code>value</code> : 用于声明配置类的名称</li><li><code>proxyBeanMethods</code> : 声明是否是代理对象方法</li></ul></li><li><ol start="2"><li>由于有<code>@Component</code>注解的加持，那么被声明的配置类本身也是一个组件</li></ol></li></ul><h5 id="_2-configuration注解基础使用" tabindex="-1">2.<code>@Configuration</code>注解基础使用 <a class="header-anchor" href="#_2-configuration注解基础使用" aria-label="Permalink to &quot;2.\`@Configuration\`注解基础使用&quot;">​</a></h5><p><code>@Configuration</code>注解常常一起搭配使用的注解有</p><ul><li><ol><li><code>@Bean</code> : 等价于<code>Spring</code>中的<code>bean</code>标签，用于注册<code>bean</code>对象。内部有一些初始化，销毁的属性</li></ol></li><li><ol start="2"><li><code>@Scope</code> : 用于声明改<code>bean</code>的作用域。作用域有<code>singleton</code>（单例模式，默认值），<code>prototype</code>（多例模式），<code>request</code>（同一次请求），<code>session</code>（同一次会话）</li></ol><ul><li><code>singleton</code> : 所有的<code>bean</code>都是<strong>单实例</strong>的<code>bean</code>，而且是<strong>饿汉模式加载</strong>(容器启动实例就创建好了)</li><li><code>prototype</code> : 所有的<code>bean</code>为<strong>多实例</strong>的，而且还是<strong>懒汉模式加载</strong>（<code>IOC</code>容器启动的时候，并不会创建对象，而是 在第一次使用的时候才会创建）</li></ul></li><li><ol start="3"><li><code>@Lazy</code> : 标记该<code>bean</code>是否开启懒加载</li></ol><ul><li>值为<code>false</code>（默认值） : 不开启懒加载（恶汉模式）</li><li>值为 <code>true</code> : 开启懒加载（懒汉模式）</li></ul></li></ul><h5 id="_3-前置准备" tabindex="-1">3. 前置准备 <a class="header-anchor" href="#_3-前置准备" aria-label="Permalink to &quot;3. 前置准备&quot;">​</a></h5><p>准备<code>User</code>和<code>Dog</code>两个基础类</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Data</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Data</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">NoArgsConstructor</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">AllArgsConstructor</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h5 id="_4-使用-bean注解-声明并注册一个bean对象" tabindex="-1">4. 使用<code>@Bean</code>注解，声明并注册一个<code>bean</code>对象 <a class="header-anchor" href="#_4-使用-bean注解-声明并注册一个bean对象" aria-label="Permalink to &quot;4. 使用\`@Bean\`注解，声明并注册一个\`bean\`对象&quot;">​</a></h5><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">     System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User对象进行创建!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">用户</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDog</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDog</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">     System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Dog对象进行创建!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">金毛</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>打印</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootApplication</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MainApplication</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取IOC容器</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ConfigurableApplicationContext</span><span style="color:#A6ACCD;"> run </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SpringApplication</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MainApplication</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// User{name=&#39;用户&#39;, age=22, dog=Dog{name=&#39;金毛&#39;, age=3}}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dog{name=&#39;金毛&#39;, age=3}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>这样就声明配置了两个<code>bean</code>,在<code>Spring</code>中相当于注册到<code>xml</code>配置文件中，默认情况下是以<strong>饿汉单例</strong> 的形式创建的，即<code>IOC</code>容器创建时立即创建这两个<code>bean</code></p><h5 id="_5-使用-scope注解配置单例和多例" tabindex="-1">5. 使用<code>@scope</code>注解配置单例和多例 <a class="header-anchor" href="#_5-使用-scope注解配置单例和多例" aria-label="Permalink to &quot;5. 使用\`@scope\`注解配置单例和多例&quot;">​</a></h5><p>上个案例中，可以看到默认情况下<code>bean</code>是<strong>饿汉</strong>的形式加载的，并没有看出是单例模式，这里可以使用<code>@Scope</code>注解配置</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Scope</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prototype</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 多例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User 对象创建</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">用户</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">22</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">getDog</span><span style="color:#89DDFF;">());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Scope</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">singleton</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 单例</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDog</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Dog 对象进行创建</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">金毛</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>打印</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootApplication</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">EvcssSpringbootApplication</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 获取 IOC容器</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">ConfigurableApplicationContext</span><span style="color:#A6ACCD;"> run </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SpringApplication</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MainApplication</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">User</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user1 == user2:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> user2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog1 == dog2:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dog1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> dog2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//Dog 对象进行创建</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//User 对象创建</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//User 对象创建</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// user1 == user2:false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// dog1 == dog2:true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p><code>User</code>对象使用<strong>多例</strong>形式创建<code>bean</code>,每次从<code>IOC</code>中获取<code>bean</code>都是<strong>不一样的</strong><code>Dog</code>对象使用<strong>单例</strong>的形式创建，从<code>IOC</code>中获取<code>bean</code>都是<strong>同一个bean</strong> 得出结论 ： 默认情况下， 不指定<code>@Scope</code>时采用单例的形式。并且在多例情况下，<code>IOC</code>容器创建的时候，不会对多例对象进行创建，而是采用<strong>懒加载</strong>的形式在使用的时候创建。</p><h5 id="_6-使用-lazy注解配置是否开启懒加载" tabindex="-1">6. 使用<code>@Lazy</code>注解配置是否开启懒加载 <a class="header-anchor" href="#_6-使用-lazy注解配置是否开启懒加载" aria-label="Permalink to &quot;6. 使用\`@Lazy\`注解配置是否开启懒加载&quot;">​</a></h5><p>懒加载在一些情况下是非常有必要的，并且懒加载的时候需要注意依赖对象的懒加载问题！</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Configuration</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MyConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Lazy</span><span style="color:#89DDFF;">(false)</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">//立即加载</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">User对象进行创建!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">User</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//return new User(&quot;用户&quot;, 22, getDog());//这时dog的懒加载失效，因为user是立即加载，依赖dog</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Bean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Lazy</span><span style="color:#89DDFF;">(true)</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">//懒加载</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getDog</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Dog对象进行创建!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">金毛</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>打印</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">SpringBootApplication</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">MainApplication</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">main</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获得IOC容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">ConfigurableApplicationContext</span><span style="color:#A6ACCD;"> run </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> SpringApplication</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">MainApplication</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">      System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">====================================================</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">User</span><span style="color:#A6ACCD;"> user2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> User</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user1 == user2 ? </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">user1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> user2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">Dog</span><span style="color:#A6ACCD;"> dog2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBean</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Dog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">class</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dog1 == dog2 ? </span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dog1 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> dog2</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// User对象进行创建！</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ==============================================</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// user1 == user2 ? true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dog对象进行创建！</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// dog1 == dog2 ? true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><ul><li><ol><li>默认情况下时立即加载，即饿汉模式</li></ol></li><li><ol start="2"><li>如果<code>User</code>对象是一个<strong>立即加载</strong>，<code>Dog</code>对象是一个<strong>懒加载</strong>；且<code>User</code>创建时需要依赖<code>Dog</code>对象，那么<code>Dog</code>对象的懒加载失败会变成立即加载。</li></ol></li><li><ol start="3"><li>如果不依赖，那么就不一会造成影响</li></ol></li></ul><h4 id="_8-springbootconfiguration" tabindex="-1">8. @SpringBootConfiguration <a class="header-anchor" href="#_8-springbootconfiguration" aria-label="Permalink to &quot;8. @SpringBootConfiguration&quot;">​</a></h4><h2 id="_2-http请求" tabindex="-1">2.Http请求 <a class="header-anchor" href="#_2-http请求" aria-label="Permalink to &quot;2.Http请求&quot;">​</a></h2><h3 id="_1-requestmapping" tabindex="-1">1. @RequestMapping <a class="header-anchor" href="#_1-requestmapping" aria-label="Permalink to &quot;1. @RequestMapping&quot;">​</a></h3><p><code>@RequestMapping</code>注解的作用就是将<strong>HTTP请求</strong>和处理请求的<strong>控制器方法</strong>关联起来，建立映射关系。</p><h3 id="_2-getmapping" tabindex="-1">2. @GetMapping <a class="header-anchor" href="#_2-getmapping" aria-label="Permalink to &quot;2. @GetMapping&quot;">​</a></h3><p>将<code>HTTP</code> <code>GET</code>请求<strong>映射</strong>到特定处理程序的<strong>方法</strong>。<code>GET</code>请求，从服务器获取特定资源。</p><h3 id="_3-postmapping" tabindex="-1">3. @PostMapping <a class="header-anchor" href="#_3-postmapping" aria-label="Permalink to &quot;3. @PostMapping&quot;">​</a></h3><p>用于将<code>HTTP</code> <code>POST</code>请求<strong>映射</strong>到特定处理程序的<strong>方法</strong>。<code>POST</code>请求，在服务器上创建新的资源。</p><h3 id="_4-deletemapping" tabindex="-1">4. @DeleteMapping <a class="header-anchor" href="#_4-deletemapping" aria-label="Permalink to &quot;4. @DeleteMapping&quot;">​</a></h3><p>用于将<code>HTTP</code> <code>DELETE</code>请求<strong>映射</strong>到特定处理程序的<strong>方法</strong>。<code>DELETE</code>请求，从服务器删除特定的资源。</p><h3 id="_5-putmapping" tabindex="-1">5. @PutMapping <a class="header-anchor" href="#_5-putmapping" aria-label="Permalink to &quot;5. @PutMapping&quot;">​</a></h3><p>用于将<code>HTTP</code> <code>PUT</code>请求<strong>映射</strong>到特定处理程序的<strong>方法</strong>。<code>PUT</code>请求，更新服务器上的资源。</p><h2 id="_3-前后端参数传递" tabindex="-1">3. 前后端参数传递 <a class="header-anchor" href="#_3-前后端参数传递" aria-label="Permalink to &quot;3. 前后端参数传递&quot;">​</a></h2><h3 id="_1-pathvariable" tabindex="-1">1. @PathVariable <a class="header-anchor" href="#_1-pathvariable" aria-label="Permalink to &quot;1. @PathVariable&quot;">​</a></h3><p><strong>路径变量</strong>，获取请求<code>url</code>中的参数。如访问<code>http://localhost:8080/User/getUser/123</code>。参数要与大括号（<code>{}</code>）里的名字相同，如夏下面的<code>uid</code>。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Controller</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWorldController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/getUser/{uid}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">PathVariable</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Model</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">model</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 123</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_2-requestparam" tabindex="-1">2. @RequestParam <a class="header-anchor" href="#_2-requestparam" aria-label="Permalink to &quot;2. @RequestParam&quot;">​</a></h3><p>获取请求中<strong>表单类型</strong>的<code>key=value</code>格式的数据。如访问<code>http://localhost:8080/User/getUser?uid=123</code></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Controller</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWorldController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/getUser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getUser</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">RequestParam</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uid</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">Integer</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Model</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">model</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">println</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">id:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_3-requestbody" tabindex="-1">3. @RequestBody <a class="header-anchor" href="#_3-requestbody" aria-label="Permalink to &quot;3. @RequestBody&quot;">​</a></h3><p>注解<code>@RequestBody</code>接收的参数是来自<code>requestBody</code>中，即请求体。一般用于处理<strong>非</strong> <code>Content-Type: application/x-www-form-urlencoded</code>编码格式的数据，比如：<code>application/json</code>、<code>application/xml</code>等类型的数据。</p><p>就<code>application/json</code>类型的数据而言，使用注解<code>@RequestBody</code>可以将<code>body</code>里面所有的<code>json</code>数据传到后端，后端再进行解析。</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">PostMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/saveBatch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">saveBatch</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">RequestBody</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Validated</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">List</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">User</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> list</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">    list</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">System</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">out</span><span style="color:#89DDFF;font-style:italic;">::</span><span style="color:#A6ACCD;">println</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">saveBatch success</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>常搭配<code>@PostMapping</code>请求来提交对象数据</p></div><h3 id="_4-requestheader" tabindex="-1">4. @RequestHeader <a class="header-anchor" href="#_4-requestheader" aria-label="Permalink to &quot;4. @RequestHeader&quot;">​</a></h3><p>将<strong>请求头</strong>中变量值映射到控制器方法的参数中。如下例子：将请求头中的变量值<code>token</code>映射到控制器参数<code>token</code>中</p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Controller</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">RequestMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/User</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">HelloWorldController</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">GetMapping</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/checkUserLoginInfo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">R</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">User</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">checkToken</span><span style="color:#89DDFF;">(@</span><span style="color:#C792EA;">RequestHeader</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">value</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">token</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果<code>@RequestHeader</code>绑定的变量，如果在请求头中不存在。<code>Spring</code>会将控制器中的参数初始化为<code>null</code>。</p><h3 id="_5-cookievalue" tabindex="-1">5. @CookieValue <a class="header-anchor" href="#_5-cookievalue" aria-label="Permalink to &quot;5. @CookieValue&quot;">​</a></h3><p><code>@CookieValue</code>用于将请求的<code>Cookie</code>数据映射到控制器处理方法的参数中。</p><h3 id="_6-responsebody" tabindex="-1">6. @ResponseBody <a class="header-anchor" href="#_6-responsebody" aria-label="Permalink to &quot;6. @ResponseBody&quot;">​</a></h3><p>表示该方法的返回结果直接写入<code>HTTP response body</code>中，格式为<code>json</code></p><h2 id="_4-读取配置" tabindex="-1">4. 读取配置 <a class="header-anchor" href="#_4-读取配置" aria-label="Permalink to &quot;4. 读取配置&quot;">​</a></h2><h3 id="_1-value" tabindex="-1">1. @Value <a class="header-anchor" href="#_1-value" aria-label="Permalink to &quot;1. @Value&quot;">​</a></h3><p>直接读取各种配置源的属性名</p><h3 id="_2-configurationproperties" tabindex="-1">2. @ConfigurationProperties <a class="header-anchor" href="#_2-configurationproperties" aria-label="Permalink to &quot;2. @ConfigurationProperties&quot;">​</a></h3><p>读取配置信息并与<code>bean</code>绑定</p><p>将配置文件与<code>Java bean</code>进行绑定。将配置文件中的属性值，读到<code>Java bean</code>对象里面。</p><h3 id="_3-propertysource" tabindex="-1">3. @PropertySource <a class="header-anchor" href="#_3-propertysource" aria-label="Permalink to &quot;3. @PropertySource&quot;">​</a></h3><p>指定加载自定义的配置文件</p><h2 id="_5-参数校验" tabindex="-1">5. 参数校验 <a class="header-anchor" href="#_5-参数校验" aria-label="Permalink to &quot;5. 参数校验&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>从<code>SpringBoot 2.3开始</code>，我们需要显示的添加<code>spring-boot-starter-validation</code>依赖项：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">org.springframework.boot</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">groupId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">spring-boot-starter-validation</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">artifactId</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">dependency</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></div><h3 id="_1-bean字段验证注解" tabindex="-1">1. Bean字段验证注解 <a class="header-anchor" href="#_1-bean字段验证注解" aria-label="Permalink to &quot;1. Bean字段验证注解&quot;">​</a></h3><h4 id="_1-notempty" tabindex="-1">1. @NotEmpty <a class="header-anchor" href="#_1-notempty" aria-label="Permalink to &quot;1. @NotEmpty&quot;">​</a></h4><h4 id="_2-notblank" tabindex="-1">2. @NotBlank <a class="header-anchor" href="#_2-notblank" aria-label="Permalink to &quot;2. @NotBlank&quot;">​</a></h4><h4 id="_3-null" tabindex="-1">3. @Null <a class="header-anchor" href="#_3-null" aria-label="Permalink to &quot;3. @Null&quot;">​</a></h4><h4 id="_4-notnull" tabindex="-1">4. @NotNull <a class="header-anchor" href="#_4-notnull" aria-label="Permalink to &quot;4. @NotNull&quot;">​</a></h4><h4 id="_5-asserttrue-assertfalse" tabindex="-1">5. @AssertTrue,@AssertFalse <a class="header-anchor" href="#_5-asserttrue-assertfalse" aria-label="Permalink to &quot;5. @AssertTrue,@AssertFalse&quot;">​</a></h4><h4 id="_6-pattern-regex-flag" tabindex="-1">6. @Pattern(regex=,flag=) <a class="header-anchor" href="#_6-pattern-regex-flag" aria-label="Permalink to &quot;6. @Pattern(regex=,flag=)&quot;">​</a></h4><h4 id="_7-email" tabindex="-1">7. @Email <a class="header-anchor" href="#_7-email" aria-label="Permalink to &quot;7. @Email&quot;">​</a></h4><h4 id="_8-min-value-max-value" tabindex="-1">8. @Min(value),@Max(value) <a class="header-anchor" href="#_8-min-value-max-value" aria-label="Permalink to &quot;8. @Min(value),@Max(value)&quot;">​</a></h4><h4 id="_9-decimalmin-value" tabindex="-1">9. @DecimalMin(value) <a class="header-anchor" href="#_9-decimalmin-value" aria-label="Permalink to &quot;9. @DecimalMin(value)&quot;">​</a></h4><h4 id="_10-decimalmax-value" tabindex="-1">10. @DecimalMax(value) <a class="header-anchor" href="#_10-decimalmax-value" aria-label="Permalink to &quot;10. @DecimalMax(value)&quot;">​</a></h4><h4 id="_11-size-max-min" tabindex="-1">11. @Size(max=,min=) <a class="header-anchor" href="#_11-size-max-min" aria-label="Permalink to &quot;11. @Size(max=,min=)&quot;">​</a></h4><h4 id="_12-digits-integer-fraction" tabindex="-1">12. @Digits(integer,fraction) <a class="header-anchor" href="#_12-digits-integer-fraction" aria-label="Permalink to &quot;12. @Digits(integer,fraction)&quot;">​</a></h4><h4 id="_13-past" tabindex="-1">13. @Past <a class="header-anchor" href="#_13-past" aria-label="Permalink to &quot;13. @Past&quot;">​</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Past</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">message</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">注册时间必须是过去的时间</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Date</span><span style="color:#A6ACCD;"> registerTime</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_14-future" tabindex="-1">14. @Future <a class="header-anchor" href="#_14-future" aria-label="Permalink to &quot;14. @Future&quot;">​</a></h4><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Past</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">message</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">结束时间必须是未来的时间</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Date</span><span style="color:#A6ACCD;"> endTime</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-valid" tabindex="-1">2.@Valid <a class="header-anchor" href="#_2-valid" aria-label="Permalink to &quot;2.@Valid&quot;">​</a></h3><p>用于标注验证对象的级联属性</p><h3 id="_3-validated" tabindex="-1">3.@Validated <a class="header-anchor" href="#_3-validated" aria-label="Permalink to &quot;3.@Validated&quot;">​</a></h3><p><code>Spring</code>提供的注解，与<code>SpringMVC</code>一起使用，标注方法的参数需要验证</p><h2 id="_6-统一异常处理" tabindex="-1">6. 统一异常处理 <a class="header-anchor" href="#_6-统一异常处理" aria-label="Permalink to &quot;6. 统一异常处理&quot;">​</a></h2><h3 id="_1-controlleradvice" tabindex="-1">1. @ControllerAdvice <a class="header-anchor" href="#_1-controlleradvice" aria-label="Permalink to &quot;1. @ControllerAdvice&quot;">​</a></h3><p>注解定义全局异常处理类。包含<code>@Conponent</code>,所以可以被<code>Spring</code>扫描到。（<strong>作用在类上</strong>）</p><h3 id="_2-exceptionhandler" tabindex="-1">2. @ExceptionHandler <a class="header-anchor" href="#_2-exceptionhandler" aria-label="Permalink to &quot;2. @ExceptionHandler&quot;">​</a></h3><p>注解声明异常处理方法，表示遇到这个异常，就执行标注的方法。与<code>@ControllerAdvice</code>配合使用。（<strong>作用于方法上</strong>）</p><h2 id="_7-jpa数据持久化" tabindex="-1">7. JPA数据持久化 <a class="header-anchor" href="#_7-jpa数据持久化" aria-label="Permalink to &quot;7. JPA数据持久化&quot;">​</a></h2><p>即<code>DAO</code>相关的一些注解。</p><h3 id="_1-entity" tabindex="-1">1. @Entity <a class="header-anchor" href="#_1-entity" aria-label="Permalink to &quot;1. @Entity&quot;">​</a></h3><p>声明数据库实体类</p><h3 id="_2-table" tabindex="-1">2. @Table <a class="header-anchor" href="#_2-table" aria-label="Permalink to &quot;2. @Table&quot;">​</a></h3><p>设置表名</p><h3 id="_3-generatedvalue" tabindex="-1">3. @GeneratedValue <a class="header-anchor" href="#_3-generatedvalue" aria-label="Permalink to &quot;3. @GeneratedValue&quot;">​</a></h3><p>声明主键的生成策略</p><h3 id="_4-column" tabindex="-1">4. @Column <a class="header-anchor" href="#_4-column" aria-label="Permalink to &quot;4. @Column&quot;">​</a></h3><p>声明字段，经常用于属性名和表字段的映射</p><h3 id="_5-transient" tabindex="-1">5. @Transient <a class="header-anchor" href="#_5-transient" aria-label="Permalink to &quot;5. @Transient&quot;">​</a></h3><p>指定不需要持久化的字段</p><h3 id="_6-lob" tabindex="-1">6. @Lob <a class="header-anchor" href="#_6-lob" aria-label="Permalink to &quot;6. @Lob&quot;">​</a></h3><p>声明某个字段为大字段</p><h3 id="_7-enumerated" tabindex="-1">7. @Enumerated <a class="header-anchor" href="#_7-enumerated" aria-label="Permalink to &quot;7. @Enumerated&quot;">​</a></h3><p>声明枚举类型的字段</p><h3 id="_8-modifying" tabindex="-1">8. @Modifying <a class="header-anchor" href="#_8-modifying" aria-label="Permalink to &quot;8. @Modifying&quot;">​</a></h3><p>加在<code>DAO</code>方法上，提示修改操作</p><h3 id="_9-transactional" tabindex="-1">9. @Transactional <a class="header-anchor" href="#_9-transactional" aria-label="Permalink to &quot;9. @Transactional&quot;">​</a></h3><ul><li><ol><li><strong>作用于类上</strong> ：表示所有该类的<code>public</code>方法都配置相同的事务属性信息</li></ol></li><li><ol start="2"><li><strong>作用于方法上</strong> ：当类配置了<code>@Transactional</code>，方法也配置了<code>@Transactional</code>,方法的事务会<strong>覆盖</strong>类的事务 配置信息。</li></ol></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>开启事务。一般在<code>service</code>类标签上添加<code>@Transactional</code>，这样可以将整个<code>service</code>类纳入<code>spring</code>事务管理（所有的 <code>public</code> 方法纳入)</p></div><h2 id="_8-josn格式处理" tabindex="-1">8. JOSN格式处理 <a class="header-anchor" href="#_8-josn格式处理" aria-label="Permalink to &quot;8. JOSN格式处理&quot;">​</a></h2><h3 id="_1-jsonignoreproperties" tabindex="-1">1. @JsonIgnoreProperties <a class="header-anchor" href="#_1-jsonignoreproperties" aria-label="Permalink to &quot;1. @JsonIgnoreProperties&quot;">​</a></h3><p>作用于<strong>类上</strong>，用于过滤掉特定字段不返回或者不解析</p><h3 id="_2-jsonignore" tabindex="-1">2. JsonIgnore <a class="header-anchor" href="#_2-jsonignore" aria-label="Permalink to &quot;2. JsonIgnore&quot;">​</a></h3><p>一般用于<strong>属性上</strong>,用于过滤掉特定字段不返回或者不解析</p><h3 id="_3-jsonformat" tabindex="-1">3. JsonFormat <a class="header-anchor" href="#_3-jsonformat" aria-label="Permalink to &quot;3. JsonFormat&quot;">​</a></h3><p>用来格式化<code>json</code>数据</p><h3 id="_4-jsonunwrapped" tabindex="-1">4. JsonUnwrapped <a class="header-anchor" href="#_4-jsonunwrapped" aria-label="Permalink to &quot;4. JsonUnwrapped&quot;">​</a></h3><p>扁平化对象</p><h2 id="_5-导入配置文件" tabindex="-1">5. 导入配置文件 <a class="header-anchor" href="#_5-导入配置文件" aria-label="Permalink to &quot;5. 导入配置文件&quot;">​</a></h2><h3 id="_1-propertysource" tabindex="-1">1. @PropertySource <a class="header-anchor" href="#_1-propertysource" aria-label="Permalink to &quot;1. @PropertySource&quot;">​</a></h3><p>读取配置文件中值</p><h3 id="_2-importresource" tabindex="-1">2. @ImportResource <a class="header-anchor" href="#_2-importresource" aria-label="Permalink to &quot;2. @ImportResource&quot;">​</a></h3><p><code>@ImportResource</code>注解：用于导入 <code>Spring</code> 的 <code>xml</code> 配置文件，让该配置文件中定义的 <code>bean</code> 对象加载到<code>Spring</code>容器中。</p><h3 id="_3-import" tabindex="-1">3. @Import <a class="header-anchor" href="#_3-import" aria-label="Permalink to &quot;3. @Import&quot;">​</a></h3><p><code>@Import</code>注解用来导入配置类或者一些需要前置加载的类到<code>IOC</code>容器中。\`</p>`,160),p=[e];function r(t,c,i,D,y,F){return a(),n("div",null,p)}const d=s(o,[["render",r]]);export{A as __pageData,d as default};
