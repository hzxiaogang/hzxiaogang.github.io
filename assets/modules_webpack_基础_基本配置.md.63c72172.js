import{_ as s,o as a,c as n,V as l}from"./chunks/framework.364d6ed5.js";const u=JSON.parse('{"title":"基本配置","description":"","frontmatter":{"title":"基本配置","date":"2022-07-09T10:51:49.000Z","permalink":"/pages/9df94c/","categories":["modules","webpack","基础"],"tags":[null]},"headers":[],"relativePath":"modules/webpack/基础/基本配置.md","filePath":"modules/webpack/基础/基本配置.md","lastUpdated":1685623283000}'),e={name:"modules/webpack/基础/基本配置.md"},p=l(`<h2 id="_1-五大核心概念" tabindex="-1">1.五大核心概念 <a class="header-anchor" href="#_1-五大核心概念" aria-label="Permalink to &quot;1.五大核心概念&quot;">​</a></h2><p>在使用<code>webpakc</code>之前，我们需要对<code>webpack</code>的配置有一定认识。</p><h3 id="_1-1-entry" tabindex="-1">1.1 entry <a class="header-anchor" href="#_1-1-entry" aria-label="Permalink to &quot;1.1 entry&quot;">​</a></h3><p><code>entry</code>（入口），指示<code>webpack</code>从那个文件开始打包。分析构建内部依赖图</p><h3 id="_1-2-ouput" tabindex="-1">1.2 ouput <a class="header-anchor" href="#_1-2-ouput" aria-label="Permalink to &quot;1.2 ouput&quot;">​</a></h3><p><code>ouput</code>（输出），指示 <code>webpack</code>打包完的文件输出到哪里去，以及如何命名。</p><h3 id="_1-3-loader" tabindex="-1">1.3 loader <a class="header-anchor" href="#_1-3-loader" aria-label="Permalink to &quot;1.3 loader&quot;">​</a></h3><p><code>loader</code>（加载器），<code>webpack</code>本身只能处理<code>JS</code>，<code>JSON</code>等资源，其它资源需要借助<code>loader</code>才能解析。<code>Loader</code> 让 <code>Webpack</code> 能够去处理那些非 <code>JavaScript</code> 文件。</p><h3 id="_1-4-plugin" tabindex="-1">1.4 plugin <a class="header-anchor" href="#_1-4-plugin" aria-label="Permalink to &quot;1.4 plugin&quot;">​</a></h3><p><code>plugin</code>（插件），扩展<code>webpack</code>的功能。插件（<code>plugins</code>）可以用于执行范围更广的任务。插件的范围包括，从<strong>打包优化</strong>和<strong>压缩</strong>，一直到<strong>重新定义环境中的变量</strong>等</p><h3 id="_1-5-mode" tabindex="-1">1.5 mode <a class="header-anchor" href="#_1-5-mode" aria-label="Permalink to &quot;1.5 mode&quot;">​</a></h3><p><code>mode</code>（模式）</p><ul><li><ol><li><code>development</code> : 开发模式</li></ol></li><li><ol start="2"><li><code>production</code> : 生产模式</li></ol></li></ul><h2 id="_2-两种模式" tabindex="-1">2.两种模式 <a class="header-anchor" href="#_2-两种模式" aria-label="Permalink to &quot;2.两种模式&quot;">​</a></h2><h3 id="_2-1-开发模式" tabindex="-1">2.1. 开发模式 <a class="header-anchor" href="#_2-1-开发模式" aria-label="Permalink to &quot;2.1. 开发模式&quot;">​</a></h3><p>开发模式就是我们开发代码时使用的模式。这个模式我们主要做两件事：</p><h4 id="_1-编译代码-使浏览器能识别运行" tabindex="-1">1.编译代码，使浏览器能识别运行 <a class="header-anchor" href="#_1-编译代码-使浏览器能识别运行" aria-label="Permalink to &quot;1.编译代码，使浏览器能识别运行&quot;">​</a></h4><p>开发时我们有<strong>样式资源</strong>，<strong>字体图标</strong>，<strong>图片资源</strong>，<strong>html</strong>资源等。<code>webpack</code>默认不能处理这些资源，所以我们要<strong>加载配置</strong>来编译这些资源。</p><h4 id="_2-代码质量检查-树立代码规范" tabindex="-1">2.代码质量检查，树立代码规范 <a class="header-anchor" href="#_2-代码质量检查-树立代码规范" aria-label="Permalink to &quot;2.代码质量检查，树立代码规范&quot;">​</a></h4><p>提前检查代码的一些隐患，让代码运行时更健壮。提前检查代码规范和格式，统一团队编码风格，让代码更优雅美观。</p><h3 id="_2-2-生产模式" tabindex="-1">2.2. 生产模式 <a class="header-anchor" href="#_2-2-生产模式" aria-label="Permalink to &quot;2.2. 生产模式&quot;">​</a></h3><p>生产模式是开发完代码后，我们需要得到代码将来部署上线。这个模式下我们组要对代码进行优化，让其运性能改好。 优化主要从两个角度出发</p><h4 id="_1-优化代码运行性能" tabindex="-1">1. 优化代码运行性能 <a class="header-anchor" href="#_1-优化代码运行性能" aria-label="Permalink to &quot;1. 优化代码运行性能&quot;">​</a></h4><h4 id="_2-优化代码打包速度" tabindex="-1">2. 优化代码打包速度 <a class="header-anchor" href="#_2-优化代码打包速度" aria-label="Permalink to &quot;2. 优化代码打包速度&quot;">​</a></h4><h2 id="_3-基本配置" tabindex="-1">3. 基本配置 <a class="header-anchor" href="#_3-基本配置" aria-label="Permalink to &quot;3. 基本配置&quot;">​</a></h2><h3 id="_3-1-配置" tabindex="-1">3.1 配置 <a class="header-anchor" href="#_3-1-配置" aria-label="Permalink to &quot;3.1 配置&quot;">​</a></h3><p><code>Webpack</code> 是基于 <code>Node.js</code> 运行的，所以采用 <code>Common.js</code> 模块化规范。在项目根目录下新建文件：<code>webpack.config.js</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 入口</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 加载器</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 插件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 模式</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="_3-2-修改配置-简介章节案例" tabindex="-1">3.2 修改配置（简介章节案例） <a class="header-anchor" href="#_3-2-修改配置-简介章节案例" aria-label="Permalink to &quot;3.2 修改配置（简介章节案例）&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// Node.js的核心模块，专门用来处理文件路径</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 入口</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 相对路径和绝对路径都行</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 输出</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// path: 文件输出目录，必须是绝对路径</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// path.resolve()方法返回一个绝对路径</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// __dirname 当前文件的文件夹绝对路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// filename: 输出文件名</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 加载器</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 插件</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 模式</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">mode</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">development</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 开发模式</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>运行指令 ：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npx</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">webpack</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,32),o=[p];function r(t,c,i,D,y,d){return a(),n("div",null,o)}const b=s(e,[["render",r]]);export{u as __pageData,b as default};
