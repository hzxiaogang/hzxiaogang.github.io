import{_ as o,o as e,c,V as l}from"./chunks/framework.364d6ed5.js";const i="/plugin.jpg",k=JSON.parse('{"title":"plugin构建对象","description":"","frontmatter":{"title":"plugin构建对象","date":"2022-07-12T16:30:31.000Z","permalink":"/pages/384f44/","categories":["modules","webpack","plugin原理"],"tags":[null]},"headers":[],"relativePath":"modules/webpack/plugin原理/plugin构建对象.md","filePath":"modules/webpack/plugin原理/plugin构建对象.md","lastUpdated":1685624511000}'),d={name:"modules/webpack/plugin原理/plugin构建对象.md"},a=l('<h2 id="_1-compiler" tabindex="-1">1. Compiler <a class="header-anchor" href="#_1-compiler" aria-label="Permalink to &quot;1. Compiler&quot;">​</a></h2><p><code>compiler</code> 对象中保存着完整的 <code>Webpack</code>环境配置，每次启动 <code>webpack</code> 构建时它都是一个独一无二，仅仅会创建一次的对象。</p><p>这个对象会在首次启动 <code>Webpack</code> 时创建，我们可以通过 <code>compiler</code> 对象上访问到 <code>Webapck</code>的主环境配置，比如 <code>loader</code> 、 <code>plugin</code> 等等配置信息。</p><p>它有以下主要属性：</p><ul><li><ol><li><code>compiler.options</code> : 可以访问本次启动 <code>webpack</code> 时候所有的配置文件，包括但不限于 <code>loaders</code> 、 <code>entry</code> 、 <code>output</code> 、 <code>plugin</code> 等等完整配置信息。</li></ol></li><li><ol start="2"><li><code>compiler.inputFileSystem</code> 和 <code>compiler.outputFileSystem</code> 可以进行文件操作，相当于 <code>Nodejs</code> 中 <code>fs</code>。</li></ol></li><li><ol start="3"><li><code>compiler.hooks</code> 可以注册 <code>tapable</code> 的不同种类 <code>Hook</code>，从而可以在 <code>compiler</code> 生命周期中植入不同的逻辑。</li></ol></li></ul><p><a href="https://webpack.docschina.org/api/compiler-hooks/" target="_blank" rel="noreferrer">compiler hooks 文档</a></p><h2 id="_2-compiliation" tabindex="-1">2. Compiliation <a class="header-anchor" href="#_2-compiliation" aria-label="Permalink to &quot;2. Compiliation&quot;">​</a></h2><p><code>compilation</code> 对象代表一次资源的构建，<code>compilation</code> 实例能够访问所有的模块和它们的依赖。</p><p>一个 <code>compilation</code> 对象会对构建依赖图中所有模块，进行编译。 在编译阶段，模块会被加载(<code>load</code>)、封存(<code>seal</code>)、优化(<code>optimize</code>)、 分块(<code>chunk</code>)、哈希(<code>hash</code>)和重新创建(<code>restore</code>)。</p><p>它有以下主要属性：</p><ul><li><ol><li><code>compilation.modules</code> 可以访问所有模块，打包的每一个文件都是一个模块。</li></ol></li><li><ol start="2"><li><code>compilation.chunks</code> <code>chunk</code> 即是多个 <code>modules</code>组成而来的一个代码块。入口文件引入的资源组成一个 <code>chunk</code>，通过代码分割的模块又是另外的 chunk。</li></ol></li><li><ol start="3"><li><code>compilation.assets</code> 可以访问本次打包生成所有文件的结果。</li></ol></li><li><ol start="4"><li><code>compilation.hooks</code> 可以注册 <code>tapable</code>的不同种类 <code>Hook</code>，用于在 <code>compilation</code>编译模块阶段进行逻辑添加以及修改。</li></ol></li></ul><p><a href="https://webpack.docschina.org/api/compilation-hooks/" target="_blank" rel="noreferrer">compilation hooks 文档</a></p><h2 id="_3-生命周期简图" tabindex="-1">3. 生命周期简图 <a class="header-anchor" href="#_3-生命周期简图" aria-label="Permalink to &quot;3. 生命周期简图&quot;">​</a></h2><img src="'+i+'">',14),t=[a];function p(r,n,s,m,u,_){return e(),c("div",null,t)}const g=o(d,[["render",p]]);export{k as __pageData,g as default};
