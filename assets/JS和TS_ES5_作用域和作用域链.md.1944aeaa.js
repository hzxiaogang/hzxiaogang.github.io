import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const d=JSON.parse('{"title":"作用域和作用域链","description":"","frontmatter":{"title":"作用域和作用域链","date":"2021-12-05T21:03:17.000Z","permalink":"/pages/9ee7e4/","categories":["JS和TS","ES5"],"tags":[null]},"headers":[],"relativePath":"JS和TS/ES5/作用域和作用域链.md","filePath":"JS和TS/ES5/作用域和作用域链.md","lastUpdated":1685623283000}'),o={name:"JS和TS/ES5/作用域和作用域链.md"},p=l(`<h2 id="_1-作用域定义" tabindex="-1">1. 作用域定义 <a class="header-anchor" href="#_1-作用域定义" aria-label="Permalink to &quot;1. 作用域定义&quot;">​</a></h2><p>作用域是指在程序中定义变量的区域，该位置决定了变量的生命周期。简言之<strong>作用域就是变量与函数的可访问范围</strong>，即作用域<strong>控制着变量和函数的可见性和生命周期</strong>。</p><h2 id="_2-作用域分类" tabindex="-1">2. 作用域分类 <a class="header-anchor" href="#_2-作用域分类" aria-label="Permalink to &quot;2. 作用域分类&quot;">​</a></h2><h3 id="_2-1-全局作用域" tabindex="-1">2.1. 全局作用域 <a class="header-anchor" href="#_2-1-全局作用域" aria-label="Permalink to &quot;2.1. 全局作用域&quot;">​</a></h3><p>在该作用域中的对象在代码的任何地方都能访问，其生命周期伴随着页面生命周期。例如以下的内容均在全局作用域中。</p><ul><li><ol><li>window 上的属性（在浏览器中）</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 页面地址</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><ol start="2"><li>最外层函数</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">testFun</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">testFun</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">testFun</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><ol start="3"><li>最外成定义的变量</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> val1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> val2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> val3 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li><ol start="4"><li>未定义直接赋值的变量</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(b)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>连等操作</strong>是<strong>从右向左</strong>执行的，相当于<code>b = 10、let a = b</code>，很明显 b 没有声明就直接赋值了，所以会隐式创建为一个全局变量，函数内的也是一样，并没有声明 b，直接就对<code>b</code>赋值了，因为作用域链，会一层一层向上查找，找了到全局的 b，所以全局的<code>b</code>就被修改为 20 了，而函数内的<code>a</code>因为重新声明了，所以只是局部变量，不影响全局的<code>a</code>，所以 a 还是<code>10</code>。</p><ul><li>5.JavaScript 规定的全局对象的属性。 如 <code>Math</code>，<code>JSON</code>，<code>Reflect</code>，<code>Date</code> 等等</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sin</span><span style="color:#A6ACCD;">(Math</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">PI </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> date </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-2-函数作用域" tabindex="-1">2.2. 函数作用域 <a class="header-anchor" href="#_2-2-函数作用域" aria-label="Permalink to &quot;2.2. 函数作用域&quot;">​</a></h3><p><strong>在函数内部定义的变量或函数</strong>，并且定义的变量或者函数只能在函数内部被访问。在函数执行完后，函数内部定义的变量就会被销毁</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">test</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fun1</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// window</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fun1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 10</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fun1</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// fun1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(val1)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// val1 is not defined</span></span>
<span class="line"><span style="color:#82AAFF;">fun1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// fun1 is not defined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_2-3-块级作用域" tabindex="-1">2.3. 块级作用域 <a class="header-anchor" href="#_2-3-块级作用域" aria-label="Permalink to &quot;2.3. 块级作用域&quot;">​</a></h3><p><code>ES5</code>只有<strong>全局作用域</strong>和<strong>函数作用域</strong>。<code>ES6</code>新增加了<strong>块级作用域</strong>。<code>let</code>为 JavaScript 增加了<strong>块级作用域</strong></p><h2 id="_3-作用域链" tabindex="-1">3. 作用域链 <a class="header-anchor" href="#_3-作用域链" aria-label="Permalink to &quot;3. 作用域链&quot;">​</a></h2><h3 id="_3-1-定义" tabindex="-1">3.1. 定义 <a class="header-anchor" href="#_3-1-定义" aria-label="Permalink to &quot;3.1. 定义&quot;">​</a></h3><p>在每个执行上下文的变量环境中，都包含一个外部应用（成为 outer）,用来指向外部的执行上下文。当在查找一个变量的时候，如果当前的变量环境中没有找到，js 引擎会继续在<code>outer</code>所指向的执行上下文查找，把这个查找的链条称为<strong>作用域链</strong>，因此我们能通过<strong>作用域链</strong>访问到父级里声明的变量或函数。</p><h3 id="_3-2-组成" tabindex="-1">3.2. 组成 <a class="header-anchor" href="#_3-2-组成" aria-label="Permalink to &quot;3.2. 组成&quot;">​</a></h3><p>作用域链由两部分组成，分别是<code>[[scope]]</code>属性和<code>AO</code></p><ul><li><ol><li>[[scope]]属性 ： 指向父级变量对象的作用域链，也就是包含了父级的<code>[[scope]]</code>和<code>AO</code></li></ol></li><li><ol><li>AO ： 自身活动对象，也就是该执行上下文中的变量 如此 <code>[[scope]]</code> 包含<code>[[scope]]</code>，便形成一条<strong>作用域链</strong></li></ol></li></ul><h3 id="_3-3-查找规则" tabindex="-1">3.3 查找规则 <a class="header-anchor" href="#_3-3-查找规则" aria-label="Permalink to &quot;3.3 查找规则&quot;">​</a></h3><ul><li><ol><li>从当前的执行作用域开始查找变量</li></ol></li><li><ol start="2"><li>如果在当前作用域中查找不到该变量，则向上一级继续查找。</li></ol></li><li><ol start="3"><li>继续向上一层查找，直到最外层的全局作用域。</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> val1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fun1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fun2</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">30</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">val1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">fun2</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">fun1</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>当执行到<code>console.log(val1 + val2 + val3)</code>;时会在<code>fun2</code>函数作用域中找到<code>val3</code>变量，在<code>fun1</code>函数作用域中找到变量<code>val2</code>，在全局作用域中找到变量<code>val1</code>，最终与该语句相关的三个变量均获取到。其中<code>fun2</code>函数作用域、<code>fun1</code>函数作用域、全局作用域就构成了一条作用域链。</p>`,31),e=[p];function c(r,t,i,y,F,D){return n(),a("div",null,e)}const C=s(o,[["render",c]]);export{d as __pageData,C as default};
