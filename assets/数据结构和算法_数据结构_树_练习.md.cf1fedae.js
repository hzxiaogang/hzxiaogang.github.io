import{_ as a,o as e,c as t,V as r}from"./chunks/framework.364d6ed5.js";const f=JSON.parse('{"title":"练习","description":"","frontmatter":{"title":"练习","date":"2022-06-29T16:47:13.000Z","permalink":"/pages/360462/","categories":["数据结构和算法","数据结构","树"],"tags":[null]},"headers":[],"relativePath":"数据结构和算法/数据结构/树/练习.md","filePath":"数据结构和算法/数据结构/树/练习.md","lastUpdated":1685623283000}'),o={name:"数据结构和算法/数据结构/树/练习.md"},h=r('<h2 id="_1-二叉树的层次遍历" tabindex="-1">1. 二叉树的层次遍历 <a class="header-anchor" href="#_1-二叉树的层次遍历" aria-label="Permalink to &quot;1. 二叉树的层次遍历&quot;">​</a></h2><h3 id="_1-1-bfs-广度优先" tabindex="-1">1.1 BFS（广度优先） <a class="header-anchor" href="#_1-1-bfs-广度优先" aria-label="Permalink to &quot;1.1 BFS（广度优先）&quot;">​</a></h3><h3 id="_1-2-dfs-深度优先" tabindex="-1">1.2 DFS（深度优先） <a class="header-anchor" href="#_1-2-dfs-深度优先" aria-label="Permalink to &quot;1.2 DFS（深度优先）&quot;">​</a></h3><h2 id="_2-二叉树的层序遍历" tabindex="-1">2. 二叉树的层序遍历 <a class="header-anchor" href="#_2-二叉树的层序遍历" aria-label="Permalink to &quot;2. 二叉树的层序遍历&quot;">​</a></h2><h3 id="_2-1-bfs-广度优先" tabindex="-1">2.1 BFS（广度优先） <a class="header-anchor" href="#_2-1-bfs-广度优先" aria-label="Permalink to &quot;2.1 BFS（广度优先）&quot;">​</a></h3><h3 id="_2-2-dfs-深度优先" tabindex="-1">2.2 DFS（深度优先） <a class="header-anchor" href="#_2-2-dfs-深度优先" aria-label="Permalink to &quot;2.2 DFS（深度优先）&quot;">​</a></h3><h2 id="_3-重构二叉树" tabindex="-1">3. 重构⼆叉树 <a class="header-anchor" href="#_3-重构二叉树" aria-label="Permalink to &quot;3. 重构⼆叉树&quot;">​</a></h2><h2 id="_4-二叉树的最大深度" tabindex="-1">4. ⼆叉树的最⼤深度 <a class="header-anchor" href="#_4-二叉树的最大深度" aria-label="Permalink to &quot;4. ⼆叉树的最⼤深度&quot;">​</a></h2><h2 id="_5-二叉树的最近公共祖先" tabindex="-1">5. ⼆叉树的最近公共祖先 <a class="header-anchor" href="#_5-二叉树的最近公共祖先" aria-label="Permalink to &quot;5. ⼆叉树的最近公共祖先&quot;">​</a></h2><h2 id="_6-判断平衡二叉树" tabindex="-1">6. 判断平衡二叉树 <a class="header-anchor" href="#_6-判断平衡二叉树" aria-label="Permalink to &quot;6. 判断平衡二叉树&quot;">​</a></h2><h2 id="_7-路径总和" tabindex="-1">7. 路径总和 <a class="header-anchor" href="#_7-路径总和" aria-label="Permalink to &quot;7. 路径总和&quot;">​</a></h2><h2 id="_8-对称二叉树" tabindex="-1">8. 对称二叉树 <a class="header-anchor" href="#_8-对称二叉树" aria-label="Permalink to &quot;8. 对称二叉树&quot;">​</a></h2><h2 id="_9-最短距离" tabindex="-1">9. 最短距离 <a class="header-anchor" href="#_9-最短距离" aria-label="Permalink to &quot;9. 最短距离&quot;">​</a></h2><h2 id="_10-二叉查找树中第-k-小的元素" tabindex="-1">10.⼆叉查找树中第 K ⼩的元素 <a class="header-anchor" href="#_10-二叉查找树中第-k-小的元素" aria-label="Permalink to &quot;10.⼆叉查找树中第 K ⼩的元素&quot;">​</a></h2><h2 id="_11-实现-trie-树" tabindex="-1">11 . 实现 Trie 树 <a class="header-anchor" href="#_11-实现-trie-树" aria-label="Permalink to &quot;11 . 实现 Trie 树&quot;">​</a></h2>',15),i=[h];function l(d,n,s,_,c,u){return e(),t("div",null,i)}const q=a(o,[["render",l]]);export{f as __pageData,q as default};
