import{_ as s,o as a,c as n,V as o}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"浏览器种JS运行机制","description":"","frontmatter":{"title":"浏览器种JS运行机制","date":"2022-06-21T22:50:25.000Z","permalink":"/pages/bb050d/","categories":["数据结构和算法","数据结构","栈"],"tags":[null]},"headers":[],"relativePath":"数据结构和算法/数据结构/栈/浏览器种JS运行机制.md","filePath":"数据结构和算法/数据结构/栈/浏览器种JS运行机制.md","lastUpdated":1685623283000}'),e={name:"数据结构和算法/数据结构/栈/浏览器种JS运行机制.md"},l=o(`<h2 id="_1-简介" tabindex="-1">1.简介 <a class="header-anchor" href="#_1-简介" aria-label="Permalink to &quot;1.简介&quot;">​</a></h2><p>我们知道 <code>JavaScript\`\` 是单线程的，所谓单线程，是指在</code>JavaScript<code>引擎中负责解释和执⾏</code>JavaScript \` 代码的线程唯⼀，同⼀时间上只能执⾏⼀件任务。</p><p>为什么是单线程的喃？这是因为 <code>JavaScript</code> 可以修改 <code>DOM</code> 结构，如果 <code>JavaScript</code> 引擎线程不是单线 程的，那么可以同时执⾏多段 <code>JavaScript</code>，如果这多段 <code>JavaScript</code> 都修改 <code>DOM</code>，那么就会出现<code>DOM</code> 冲突。</p><p>为了避免 <code>DOM</code> 渲染的冲突，可以采⽤ <code>单线程</code>或者<code>死锁</code>，<code>JavaScript</code> 采⽤了<code>单线程⽅案</code>。 但单线程有⼀个问题：如果任务队列⾥有⼀个任务耗时很⻓，导致这个任务后⾯的任务⼀直排队等 待，就会发⽣⻚⾯卡死，严重影响⽤户体验。 为了解决这个问题，<code>JavaScript</code> 将任务的执⾏模式分为两种：<strong>同步</strong>和<strong>异步</strong></p><h2 id="_2-同步" tabindex="-1">2.同步 <a class="header-anchor" href="#_2-同步" aria-label="Permalink to &quot;2.同步&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 同步任务</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_3-异步" tabindex="-1">3.异步 <a class="header-anchor" href="#_3-异步" aria-label="Permalink to &quot;3.异步&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 异步任务</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">时间到</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>同步任务都在<strong>主线程</strong>（这里的主线程就是<code>JavaScript引擎线程</code>）上执行，会形成一个<strong>调用栈</strong>，又称<strong>执行栈</strong>。除了主线程外，还有一个任务队列（也称消息队列），用于管理异步任务的<strong>事件回调</strong>，在<strong>调用栈</strong>的任务执行完毕之后，系统会检查任务队列，看看是否有可以执行的异步任务。</p><p><strong>注意：任务队列存放的是异步任务的事件回调</strong>。例如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">时间到</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在执⾏这段代码时，并不会⽴刻打印 ，只有定时结束后（1s）才打印。 <code>setTimeout</code> <strong>本身是同步执⾏</strong>的，放⼊<strong>任务队列</strong>的是它的<strong>回调函数</strong>。</p>`,12),p=[l];function t(c,r,i,d,y,D){return a(),n("div",null,p)}const A=s(e,[["render",t]]);export{C as __pageData,A as default};
