import{_ as s,o as a,c as n,V as l}from"./chunks/framework.364d6ed5.js";const u=JSON.parse('{"title":"module的加载实现","description":"","frontmatter":{"title":"module的加载实现","date":"2022-01-06T16:34:39.000Z","permalink":"/pages/240bf8/","categories":["JS和TS","ES6"],"tags":[null]},"headers":[],"relativePath":"JS和TS/ES6/module的加载实现.md","filePath":"JS和TS/ES6/module的加载实现.md","lastUpdated":1685623283000}'),o={name:"JS和TS/ES6/module的加载实现.md"},p=l(`<h2 id="_1-浏览器加载" tabindex="-1">1. 浏览器加载 <a class="header-anchor" href="#_1-浏览器加载" aria-label="Permalink to &quot;1. 浏览器加载&quot;">​</a></h2><h3 id="_1-1-传统的浏览器加载" tabindex="-1">1.1 传统的浏览器加载 <a class="header-anchor" href="#_1-1-传统的浏览器加载" aria-label="Permalink to &quot;1.1 传统的浏览器加载&quot;">​</a></h3><p><code>HTML</code>网页中，浏览器通过<code>script</code>标签加载<code>JavaScript</code>脚本</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 页面内嵌的脚本 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">application/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// module code</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 外部脚本 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">application/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path/to/myModule.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上面代码中，由于浏览器脚本的默认语言是<code>JavaScript</code>，因此<code>type=&quot;application/javascript&quot;</code>可以省略。 默认情况下，浏览器是<strong>同步加载</strong><code>JavaScript</code>脚本，即渲染引擎遇到<code>script</code>标签就会停下来，等到执行脚本，再继续向下渲染。如果是外部脚本，还必须加入脚本的等待时间。</p><p>如果脚本的体积很大，下载和执行时间就会很长，因此造成浏览器的堵塞，用户会感觉到浏览器<strong>卡死</strong>了，没有任何响应。这样的用户体验不好。所以浏览器允许<strong>脚本异步加载</strong>。</p><h3 id="_1-2-浏览器的异步加载" tabindex="-1">1.2 浏览器的异步加载 <a class="header-anchor" href="#_1-2-浏览器的异步加载" aria-label="Permalink to &quot;1.2 浏览器的异步加载&quot;">​</a></h3><p>可以给<code>script</code>标签添加<strong>defer</strong>或<strong>async</strong>属性，让浏览器异步加载脚本。</p><ul><li><ol><li><code>defer</code> ：渲染完再执行</li></ol></li><li><ol start="2"><li><code>async</code> : 下载完就执行</li></ol></li></ul><p>如果有多个<code>defer</code>脚本，会按照它们在页面出现的<strong>顺序加载</strong>，而多个<code>async</code>脚本是不能保证加载顺序的。</p><h3 id="_1-3-浏览器加载es6模块" tabindex="-1">1.3 浏览器加载ES6模块 <a class="header-anchor" href="#_1-3-浏览器加载es6模块" aria-label="Permalink to &quot;1.3 浏览器加载ES6模块&quot;">​</a></h3><p>浏览器加载<code>ES6</code>模块，也使用<code>script</code>标签，但是要加入<code>type=&quot;module&quot;</code>属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码在网页中插入一个模块foo.js，由于type属性设为module，所以浏览器知道这是一个 ES6 模块。</p><p>浏览器对于带有<code>type=&quot;module&quot;</code>的<code>&lt;script&gt;</code>，都是异步加载，不会造成堵塞浏览器，即等到整个页面渲染完，再执行模块脚本，等同于打开了<code>&lt;script</code>&gt;<code>标签的</code>defer\`属性。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;!--</span><span style="color:#A6ACCD;"> 等同于 </span><span style="color:#89DDFF;">--&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">defer</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>&lt;script&gt;</code>标签的<code>async</code>属性也可以打开，这时只要加载完成，渲染引擎就会中断渲染立即执行。执行完成后，再恢复渲染。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./foo.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>ES6 模块也允许内嵌在网页中，语法行为与加载外部脚本完全一致</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  import utils from &quot;./utils.js&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">  // other code</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>对于外部的模块脚本，有几点需要注意</p><ul><li><ol><li>代码是在模块作用域之中运行，而不是在全局作用域运行。模块内部的顶层变量，外部不可见。</li></ol></li><li><ol start="2"><li>模块脚本自动采用严格模式，不管有没有声明<code>use strict</code>。</li></ol></li><li><ol start="3"><li>模块之中，可以使用<code>import</code>命令加载其他模块（<code>.js</code>后缀不可省略，需要提供绝对 <code>URL</code> 或相对 <code>URL</code>），也可以使用<code>export</code>命令输出对外接口。</li></ol></li><li><ol start="4"><li>模块之中，顶层的<code>this</code>关键字返回<code>undefined</code>，而不是指向<code>window</code>。也就是说，在模块顶层使用<code>this</code>关键字，是无意义的。</li></ol></li><li><ol start="5"><li>同一个模块如果加载多次，将只执行一次</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import utils from &#39;https://example.com/js/utils.js&#39;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">const x = 1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">console.log(x === window.x); //false</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(this === undefined); // true</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,23),e=[p];function t(c,r,i,D,F,d){return a(),n("div",null,e)}const m=s(o,[["render",t]]);export{u as __pageData,m as default};
