import{_ as e,o as l,c as o,V as a}from"./chunks/framework.364d6ed5.js";const t="/str_fun.png",f=JSON.parse('{"title":"字符串函数","description":"","frontmatter":{"title":"字符串函数","date":"2022-09-23T18:07:34.000Z","permalink":"/pages/39be06/","categories":["java","mysql"],"tags":[null]},"headers":[],"relativePath":"java/mysql/字符串函数.md","filePath":"java/mysql/字符串函数.md","lastUpdated":1685806707000}'),c={name:"java/mysql/字符串函数.md"},i=a('<h1 id="字符串函数" tabindex="-1">字符串函数 <a class="header-anchor" href="#字符串函数" aria-label="Permalink to &quot;字符串函数&quot;">​</a></h1><img src="'+t+'"><h2 id="_1-charset" tabindex="-1">1. charset() <a class="header-anchor" href="#_1-charset" aria-label="Permalink to &quot;1. charset()&quot;">​</a></h2><p>返回列的字符集</p><ul><li><ol><li>语法</li></ol></li></ul><p><code>charset(column)</code></p><ul><li><ol start="2"><li>查看 <code>name</code>列的字符集</li></ol></li></ul><p><code>SELECT charset(name) from student</code></p><h2 id="_2-concat" tabindex="-1">2. concat() <a class="header-anchor" href="#_2-concat" aria-label="Permalink to &quot;2. concat()&quot;">​</a></h2><p>连接字符串，将多个列拼接在一起</p><ul><li><ol><li>语法</li></ol></li></ul><p><code>concat(column1, column2, [,...])</code></p><ul><li><ol start="2"><li>拼接 <code>name</code>和 数学成绩拼接</li></ol></li></ul><p><code>SELECT CONCAT(name,&#39;数学成绩是&#39;,math) from student</code></p><h2 id="_3-instr" tabindex="-1">3. instr() <a class="header-anchor" href="#_3-instr" aria-label="Permalink to &quot;3. instr()&quot;">​</a></h2><p>查看<code>substring</code>在<code>string</code>中出现的位置</p><ul><li><ol><li>语法 <code>instr(string , substring)</code></li></ol></li><li><ol start="2"><li>查看<code>fa</code>在<code>we are family</code>中出现的位置</li></ol></li></ul><p><code>SELECT INSTR(&#39;we are family&#39;,&#39;fa&#39;) from DUAL</code></p><p>注意 ： <code>DUAL</code> 是一个<strong>亚元表</strong>（系统内部表），可以作为测试表使用</p><h2 id="_4-ucase-和-lcase" tabindex="-1">4. ucase()和 lcase() <a class="header-anchor" href="#_4-ucase-和-lcase" aria-label="Permalink to &quot;4. ucase()和 lcase()&quot;">​</a></h2><p><code>ucase</code> 将字符串转换为大写，<code>lcase</code>将字符串转为小写</p><ul><li><ol><li>语法</li></ol></li></ul><p><code>ucase(string)</code> <code>lcase(string)</code></p><ul><li><ol start="2"><li>将 <code>name</code> 字段大写（前提是字母字符串）</li></ol></li></ul><p><code>SELECT UCASE(name) from student</code></p><h2 id="_5-left-和right" tabindex="-1">5 left()和right() <a class="header-anchor" href="#_5-left-和right" aria-label="Permalink to &quot;5 left()和right()&quot;">​</a></h2><p>从<code>string2</code>中的左边起，取<code>length</code>个字符</p><ul><li><ol><li>语法</li></ol></li></ul><p><code>left(string2,length)</code></p><ul><li><ol start="2"><li>左边/右边截取<code>length</code>个长度<code>name</code>字段</li></ol></li></ul><p><code>SELECT left(name,2) from USER</code><code>SELECT right(name,2) from USER</code></p><h2 id="_6-length" tabindex="-1">6. length() <a class="header-anchor" href="#_6-length" aria-label="Permalink to &quot;6. length()&quot;">​</a></h2><p>获取<code>string</code>长度【安装字节】</p><ul><li><ol><li>语法</li></ol></li></ul><p><code>length(string)</code></p><ul><li><ol start="2"><li>获取<code>name</code>字段的长度</li></ol></li></ul><p><code>SELECT length(name) from USER</code></p><h2 id="_7-replace" tabindex="-1">7. replace() <a class="header-anchor" href="#_7-replace" aria-label="Permalink to &quot;7. replace()&quot;">​</a></h2><p>在<code>str</code>中，用<code>replace_str</code> 替换<code>search_str</code></p><ul><li><ol><li>语法</li></ol></li></ul><p><code>replace(str,search_str,replace_str)</code></p><ul><li><ol start="2"><li>将姓名中的 英文<code>manage</code>替换为中文<code>经理</code></li></ol></li></ul><p><code>SELECT REPLACE(job,&#39;manage&#39;,&#39;经理&#39;) from USER</code></p><h2 id="_8-strcmp" tabindex="-1">8. strcmp() <a class="header-anchor" href="#_8-strcmp" aria-label="Permalink to &quot;8. strcmp()&quot;">​</a></h2><p>逐字比较两<strong>字符串</strong>大小</p><ul><li><ol><li>语法</li></ol></li></ul><p><code>strcmp(str1,str2)</code></p><ol start="2"><li>比较 <code>name</code> 和 <code>nikname</code> 字段长度大小</li></ol><p><code>select strcmp(&#39;name&#39;,&#39;nikname&#39;) from user</code></p><p><code>select strcmp(&#39;abc&#39;,&#39;abcd&#39;) from DUAL</code></p><h2 id="_9-substring" tabindex="-1">9. substring() <a class="header-anchor" href="#_9-substring" aria-label="Permalink to &quot;9. substring()&quot;">​</a></h2><p>从<code>str</code>的<code>position</code>开始【从1开始计算】，取<code>length</code>个</p><ul><li><ol><li>语法 <code>substring(str,position [, length])</code></li></ol></li><li><ol start="2"><li>从 <code>name</code>字段取第一个字符</li></ol></li></ul><p><code>SELECT SUBSTRING(name,1,1) from student</code></p><p>注意 ： 不写<code>length</code>，则截取到末尾</p><h2 id="_10-ltrim-rtrim-和trim" tabindex="-1">10. ltrim(),rtrim()和trim() <a class="header-anchor" href="#_10-ltrim-rtrim-和trim" aria-label="Permalink to &quot;10. ltrim(),rtrim()和trim()&quot;">​</a></h2><ul><li><ol><li>ltrim(str) : 去除 <code>str</code>的左边空格</li></ol></li><li><ol start="2"><li>rtrim(str) : 去除 <code>str</code>的右边空格</li></ol></li><li><ol start="3"><li>trim(str) : 去除 <code>str</code>的左右两边空格</li></ol></li><li><ol start="4"><li>案例 ：去除空格</li></ol></li></ul><p><code>SELECT LTRIM(&#39; hello world&#39;) from DUAL</code><code>SELECT LTRIM(&#39;hello world &#39;) from DUAL</code><code>SELECT LTRIM(&#39; hello world &#39;) from DUAL</code></p><h2 id="_11-练习" tabindex="-1">11.练习 <a class="header-anchor" href="#_11-练习" aria-label="Permalink to &quot;11.练习&quot;">​</a></h2><p>以首字母小写的方式显示所有员工<code>emp</code>表的姓名</p><blockquote><p>思路</p></blockquote><ul><li><ol><li>先取出<code>ename</code>的第一个字符，转小写的</li></ol></li><li><ol start="2"><li>把它和后面的字符串进行拼接输出接口</li></ol></li></ul><p><code>SELECT CONCAT(LCASE(SUBSTR(ename,1,1)),SUBSTR(ename,2)) as new_name from emp;</code></p><p>或：</p><p><code>SELECT CONCAT(LCASE(LEFT(ename,1)),SUBSTR(ename,2)) as new_name from emp;</code></p>',65),r=[i];function d(s,n,p,m,h,u){return l(),o("div",null,r)}const g=e(c,[["render",d]]);export{f as __pageData,g as default};
