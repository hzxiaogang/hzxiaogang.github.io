import{_ as s,o as a,c as n,V as l}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"递归","description":"","frontmatter":{"title":"递归","date":"2022-06-20T10:09:22.000Z","permalink":"/pages/ffccc8/","categories":["数据结构和算法","算法","六大常见算法策略","递归算法"],"tags":[null]},"headers":[],"relativePath":"数据结构和算法/算法/六大常见算法策略/递归算法/递归.md","filePath":"数据结构和算法/算法/六大常见算法策略/递归算法/递归.md","lastUpdated":1685623283000}'),o={name:"数据结构和算法/算法/六大常见算法策略/递归算法/递归.md"},e=l(`<h2 id="_1-算法策略" tabindex="-1">1. 算法策略 <a class="header-anchor" href="#_1-算法策略" aria-label="Permalink to &quot;1. 算法策略&quot;">​</a></h2><p>递归算法是⼀种直接或者间接<strong>调⽤⾃身</strong>函数或者⽅法的算法。递归算法的实质是把<strong>问题分解</strong>成规模缩⼩的<strong>同类问题的⼦问题</strong>，然后递归调⽤⽅法来表示问题的解。</p><h4 id="优缺点" tabindex="-1">优缺点： <a class="header-anchor" href="#优缺点" aria-label="Permalink to &quot;优缺点：&quot;">​</a></h4><ul><li><ol><li>实现简单易上⼿</li></ol></li><li><ol start="2"><li>缺点：递归调⽤的过程当中系统为每⼀层的返回点、局部量等开辟了栈来存储，递归太深，容易发⽣栈溢出。运行效率低。</li></ol></li></ul><h2 id="_2-适用场景" tabindex="-1">2. 适用场景 <a class="header-anchor" href="#_2-适用场景" aria-label="Permalink to &quot;2. 适用场景&quot;">​</a></h2><p>递归算法一般解决三类问题：</p><ul><li><ol><li>数据的定义是按递归定义的（如：斐波那契数列）</li></ol></li><li><ol start="2"><li>问题解法按递归算法实现 （如：回溯）</li></ol></li><li><ol start="3"><li>数据的结构形式是按递归定义的 （如：树的遍历，图的搜索）</li></ol></li></ul><h2 id="_3-递归的解题策略" tabindex="-1">3. 递归的解题策略 <a class="header-anchor" href="#_3-递归的解题策略" aria-label="Permalink to &quot;3. 递归的解题策略&quot;">​</a></h2><ul><li><ol><li>第⼀步：<strong>明确你这个函数的输⼊输出</strong>。先不管函数⾥⾯的代码什么，⽽是要先明⽩，你这个函数 的输⼊是什么，输出为何什么，功能是什么，要完成什么样的⼀件事。</li></ol></li><li><ol start="2"><li><strong>寻找递归结束条件</strong>。我们需要找出什么时候递归结束，之后直接把结果返回</li></ol></li><li><ol start="3"><li><strong>明确递归关系式</strong>。怎么通过各种递归调⽤来组合解决当前问题</li></ol></li></ul><h2 id="_4-递归求解案例" tabindex="-1">4. 递归求解案例 <a class="header-anchor" href="#_4-递归求解案例" aria-label="Permalink to &quot;4. 递归求解案例&quot;">​</a></h2><p>下面我们以<code>DOM</code>树为例，实现一个<code>document.getElementById</code>功能。由于 <code>DOM</code> 是⼀棵树，⽽树的定义本身就是⽤的递归定义，所以⽤递归的⽅法处理树，会⾮常地简单⾃然。</p><h3 id="_4-1-明确你这个函数的输入输出" tabindex="-1">4.1 明确你这个函数的输⼊输出 <a class="header-anchor" href="#_4-1-明确你这个函数的输入输出" aria-label="Permalink to &quot;4.1 明确你这个函数的输⼊输出&quot;">​</a></h3><p>从<code>DOM</code>树根节点一层一层往下递归，判断当前节点的<code>id</code>是否是我们要寻找的<code>id=&quot;d-cal&quot;</code></p><p>输入 ：<code>DOM</code>树根节点<code>document</code>和我们要寻找的<code>id=&quot;d-cal&quot;</code> 输出 ： 返回满足<code>id=&quot;d-cal&quot;</code>的节点</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getElementById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_4-2-寻找递归结束条件" tabindex="-1">4.2 寻找递归结束条件 <a class="header-anchor" href="#_4-2-寻找递归结束条件" aria-label="Permalink to &quot;4.2 寻找递归结束条件&quot;">​</a></h3><p>从 \`document\`\` 开始往下找，对所有⼦结点递归查找他们的⼦结点，⼀层⼀层地往下查找：</p><ul><li><ol><li>如果当前结点的 id 符合查找条件，则返回当前结点</li></ol></li><li><ol start="2"><li>如果已经到了叶⼦结点了还没有找到，则返回 null</li></ol></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getElementById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当前结点不存在，已经到了叶⼦结点了还没有找到，返回 null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当前结点的 id 符合查找条件，返回当前结点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_4-3-明确递归关系式" tabindex="-1">4.3 明确递归关系式 <a class="header-anchor" href="#_4-3-明确递归关系式" aria-label="Permalink to &quot;4.3 明确递归关系式&quot;">​</a></h3><p>当前结点的 <code>id</code> 不符合查找条件，递归查找它的每⼀个⼦结点</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getElementById</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">id</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当前结点不存在，已经到了叶⼦结点了还没有找到，返回 null</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">node</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 当前结点的 id 符合查找条件，返回当前结点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 前结点的 id 不符合查找条件，继续查找它的每⼀个⼦结点</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 递归查找它的每⼀个⼦结点</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">found</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">getElementById</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">childNodes</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">found</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">found</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>就这样，我们的⼀个 <code>document.getElementById</code> 功能已经实现了</p><h2 id="_5-阶乘" tabindex="-1">5. 阶乘 <a class="header-anchor" href="#_5-阶乘" aria-label="Permalink to &quot;5. 阶乘&quot;">​</a></h2><p>函数在不断的调用自己，直到找到终点，把结果沿着原来的路线进行传递，最终回归到起点。这就是传递和回归形成的递归。递归的过程就是： 传递 + 回归。下面我们以<code>阶乘</code>的例子讲解递归：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">3</span></span>
<span class="line"><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>从上面的规律，我们可以发现<code>阶乘</code>的规律： 当<code>n</code>等于 0 时，<code>n</code> 的阶乘为 1。当 <code>n</code> 大于 0 时，<code>n</code> 的阶乘等于 <code>n</code> 乘与 <code>n-1</code> 的阶乘 <code>factorial = factorial(n-1) * n</code><code>factorial(0) =1</code> (阶乘的终点) 那么求<code>n</code>的阶乘用代码表示出来即是：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">factorial</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">factorial</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>下面我们以就 4 的阶乘来分析<code>传递</code>和<code>回归</code>的过程：</p><p>执行顺序 1 -&gt; 5(由小到大)</p><table><thead><tr><th style="text-align:left;">传递</th><th style="text-align:center;">location.pathname</th><th style="text-align:center;">结果</th><th style="text-align:center;">回归</th></tr></thead><tbody><tr><td style="text-align:left;">5</td><td style="text-align:center;">factorial(0)执行上下文</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:center;">factorial(1)执行上下文</td><td style="text-align:center;">1*factorial(0)</td><td style="text-align:center;">2</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:center;">factorial(2)执行上下文</td><td style="text-align:center;">2*factorial(1)</td><td style="text-align:center;">3</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:center;">factorial(3)执行上下文</td><td style="text-align:center;">3*factorial(2)</td><td style="text-align:center;">4</td></tr><tr><td style="text-align:left;">1</td><td style="text-align:center;">factorial(4)执行上下文</td><td style="text-align:center;">4*factorial(3)</td><td style="text-align:center;">5</td></tr></tbody></table><p>当我们执行<code>factorial(4)</code>的时候，会生成一个<strong>执行上下文</strong>，并返回<code>4 * factorial(3)</code>。现在需要调用<code>factorial(3)</code>，然后生成一个<strong>执行上下文</strong>，<code>factorial(3)</code>处于暂定状态，返回<code>3 * factorial(2)</code>。现在需要调用<code>factorial(2)</code>， 然后生成一个<strong>执行上下文</strong>，<code>factorial(2)</code>处于暂定状态，返回<code>2 * factorial(1)</code>。现在需要调用<code>factorial(1)</code>，然后生成一个<code>执行上下文</code>，<code>factorial(1)</code>处于暂定状态，并返回<code>1 * factorial(0)</code>。现在调用<code>factorial(0)</code>，再生成一个<code>执行上下文</code>，<code>factorial(0)</code>目前处于暂定状态，此时<code>n==0</code>返回 1。处于<code>栈顶</code>的<code>factorial(0)</code>不需要再往下执行了。因此会弹出把结果 1 传递给下面的<code>执行上下文</code>，下一层的<code>执行上下文</code>接收到 1 计算出结果后，继续把结果传递给下一层的<code>执行上下文</code>。直到<code>4*factorial(3)</code>不需要再往下传了，返回结果。递归结束。</p>`,32),t=[e];function p(c,r,i,y,d,F){return a(),n("div",null,t)}const A=s(o,[["render",p]]);export{C as __pageData,A as default};
