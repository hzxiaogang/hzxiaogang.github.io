import{_ as s,o as a,c as n,V as e}from"./chunks/framework.364d6ed5.js";const A=JSON.parse('{"title":"路由模式","description":"","frontmatter":{"title":"路由模式","date":"2021-12-30T16:20:10.000Z","permalink":"/pages/9eb27b/","categories":["框架","VueRouter"],"tags":[null]},"headers":[],"relativePath":"框架/VueRouter/路由模式.md","filePath":"框架/VueRouter/路由模式.md","lastUpdated":1685623283000}'),o={name:"框架/VueRouter/路由模式.md"},l=e(`<p>在创建路由器实例时，<code>history</code>配置允许我们在不同的历史模式中进行选择。</p><h2 id="_1-hash-模式" tabindex="-1">1. Hash 模式 <a class="header-anchor" href="#_1-hash-模式" aria-label="Permalink to &quot;1. Hash 模式&quot;">​</a></h2><p><code>hash</code>模式是使用<code>createWebHashHistroy()</code>创建的</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createRouter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createWebHashHistroy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">histroy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createWebHashHistory</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>它在内部传递的实际<code>URL</code>之前使用了一个哈希字符（<code>#</code>）。由于这部分<code>URL</code>从未被发送到服务器，所以它不需要在服务器层面上进行任何特殊处理。不过，<strong>它在 SEO 中确实有不好的影响</strong></p><h2 id="_2-html5-模式" tabindex="-1">2. HTML5 模式 <a class="header-anchor" href="#_2-html5-模式" aria-label="Permalink to &quot;2. HTML5 模式&quot;">​</a></h2><p>用<code>createWebHistroy()</code>创建<code>HTML5</code>模式，推荐使用这个模式：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createRouter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createWebHistroy</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-router</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createRouter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">histroy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createWebHistroy</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">routes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//...</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>当使用这种模式时，<code>URL</code>看起来很&quot;正常&quot;，例如<code>https://example.com/user/id</code>。不过问题来了。由于我们的应用是一个单页面的客户端应用，如果没有适当的<strong>服务器配置</strong>，用户在浏览器中直接访问<code>https://example.com/user/id</code>，就会得到一个<code>404</code>错误。要解决这个问题，我们需要做的就是<strong>在你的服务器上添加一个简单的回退路由</strong>。如果<code>URL</code>不匹配任何静态资源，它应提供与你的应用程序中的<code>index.html</code>相同的页面。</p>`,9),p=[l];function t(r,c,i,y,D,F){return a(),n("div",null,p)}const C=s(o,[["render",t]]);export{A as __pageData,C as default};
