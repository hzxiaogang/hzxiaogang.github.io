import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const d=JSON.parse('{"title":"数组基础","description":"","frontmatter":{"title":"数组基础","date":"2022-06-18T18:43:18.000Z","permalink":"/pages/118154/","categories":["数据结构和算法","数据结构","数组"],"tags":[null]},"headers":[],"relativePath":"数据结构和算法/数据结构/数组/数组基础.md","filePath":"数据结构和算法/数据结构/数组/数组基础.md","lastUpdated":1685623283000}'),p={name:"数据结构和算法/数据结构/数组/数组基础.md"},e=l(`<h2 id="_1-引言" tabindex="-1">1.引言 <a class="header-anchor" href="#_1-引言" aria-label="Permalink to &quot;1.引言&quot;">​</a></h2><p>数组，链表，栈，队列，都是线性表，它们表示的结构是一段线性结构。与子对应的就是非线性表，例如树，图，队等，它们表示的结构是非线性的。</p><p>我们都知道在<code>javaScript</code>中，可以在数组中<strong>保存不同的类型</strong>，并且数组可以<strong>动态增长</strong>。不像其他语言，例如<code>C</code>语言，创建的时候要决定数组的大小，如果数组满了，就要重新申请内存空间。这是为什么呢 ？下面从<code>Chrome v8</code>源码角度回答这个问题，分为三个个方面：</p><ul><li><ol><li><code>JavaScript</code>中，数组为什么可以保存不同类型？</li></ol></li><li><ol start="2"><li><code>JavaScript</code>中，数组是如何存储的？</li></ol></li><li><ol start="3"><li><code>JavaScript</code>中，数组的动态扩容与减容（FastElements）</li></ol></li></ul><h2 id="_2-保存不同的类型" tabindex="-1">2. 保存不同的类型 <a class="header-anchor" href="#_2-保存不同的类型" aria-label="Permalink to &quot;2. 保存不同的类型&quot;">​</a></h2><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">class JSArray: public JSObject </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> public:</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// [length]: The length property.</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#82AAFF;">DECL_ACCESSORS</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">length</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Object</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// Number of element slots to pre-allocate for an empty array.</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> kPreallocatedArrayElements </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>我们可以看到<code>JSArray</code>是继承自<code>JSObject</code>的，所以在<code>JavaScript</code>中，数组是一个特殊的对象，内部也是以<code>key-value</code>形式存储数据，所以<code>JavaScript</code>中的数组可以存放不同类型的值。</p><h2 id="_3-数组的存储" tabindex="-1">3. 数组的存储 <a class="header-anchor" href="#_3-数组的存储" aria-label="Permalink to &quot;3. 数组的存储&quot;">​</a></h2><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// The JSArray describes JavaScript Arrays</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Such an array can be in one of two modes:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// - fast, backing storage is a FixedArray and length &lt;=</span></span>
<span class="line"><span style="color:#A6ACCD;">elements.</span><span style="color:#82AAFF;">length</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Please note: push and pop can be used to grow and shrink the</span></span>
<span class="line"><span style="color:#A6ACCD;">array.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// - slow, backing storage is a HashTable with numbers as keys.</span></span>
<span class="line"><span style="color:#A6ACCD;">class JSArray: public JSObject </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">public:</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// [length]: The length property.</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#82AAFF;">DECL_ACCESSORS</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">length</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Object</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// Number of element slots to pre-allocate for an empty array.</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">static</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">int</span><span style="color:#F07178;"> kPreallocatedArrayElements </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>JSArray</code>继承于<code>JSObject</code>,从注释上看，它有两种存储方式：</p><ul><li><ol><li>fast ：存储结构是<code>FixedArray</code>，并且数组长度<code>&lt;=elements.length()</code>，<code>push</code>或<code>pop</code>时可能会伴随着动态扩容于减容。</li></ol></li><li><ol start="2"><li>slow : 存储结构是<code>HashTable(哈希表)</code>，并且数组下标作为<code>key</code></li></ol></li></ul><p><code>fast</code>模式下数组在源码里面叫<code>FastElements</code>，而<code>slow</code>模式下的叫做<code>SlowElements</code></p><h3 id="_3-1-快速组-fastelements" tabindex="-1">3.1 快速组 (FastElements) <a class="header-anchor" href="#_3-1-快速组-fastelements" aria-label="Permalink to &quot;3.1 快速组 (FastElements)&quot;">​</a></h3><p><code>FixedArray</code>是<code>V8</code>实现的一个类似于数组的类，它表示一段连续的内存，可以使用索引直接定位。 新创建的<code>空数组</code>默认就是<code>快速组</code>。当数组满（数组的长度达到数组内存中申请的内存容量最大值）的时候，继续<code>push</code>时，<code>JSArray</code>会进行<code>动态的扩容</code>，以存储更多的元素。</p><h3 id="_3-2-慢数组" tabindex="-1">3.2 慢数组 <a class="header-anchor" href="#_3-2-慢数组" aria-label="Permalink to &quot;3.2 慢数组&quot;">​</a></h3><p>慢数组以<strong>哈希表</strong>的形式存储在内存空间，它不需要开辟连续的内存空间，但是需要额外维护一个哈希表，于快速组相比，性能相对较差。</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/objects/dictionary.h</span></span>
<span class="line"><span style="color:#A6ACCD;">class </span><span style="color:#82AAFF;">EXPORT_TEMPLATE_DECLARE</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">V8_EXPORT_PRIVATE</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> Dictionary</span></span>
<span class="line"><span style="color:#A6ACCD;"> : public HashTable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">Derived</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Shape</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> using DerivedHashTable </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> HashTable</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">Derived</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> Shape</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">public:</span></span>
<span class="line"><span style="color:#F07178;"> using Key </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> typename Shape::Key</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// Returns the value at entry.</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">inline</span><span style="color:#F07178;"> Object </span><span style="color:#82AAFF;">ValueAt</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">InternalIndex entry</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">inline</span><span style="color:#F07178;"> Object </span><span style="color:#82AAFF;">ValueAt</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> Isolate</span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> isolate</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> InternalIndex entry</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>从源码中可以看出，它的内部就是一个<code>HashTable</code></p><h3 id="_3-3-什么时候-fast-转为-slow" tabindex="-1">3.3 什么时候 fast 转为 slow <a class="header-anchor" href="#_3-3-什么时候-fast-转为-slow" aria-label="Permalink to &quot;3.3 什么时候 fast 转为 slow&quot;">​</a></h3><p>从 Chrome V8 源码上看：</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/objects/js-objects.h</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> kMaxGap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/objects/dictionary.h</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// JSObjects prefer dictionary elements if the dictionary saves this much</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// memory compared to a fast elements backing store.</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> kPreferFastElementsSizeFactor </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/objects/js-objects-inl.h</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// If the fast-case backing storage takes up much more memory than a</span></span>
<span class="line"><span style="color:#A6ACCD;">dictionary</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// backing storage would, the object should have slow elements.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// static</span></span>
<span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ShouldConvertToSlowElements</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">used_elements</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">new_capacity</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> size_threshold </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> NumberDictionary::kPreferFastElementsSizeFactor</span></span>
<span class="line"><span style="color:#89DDFF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">NumberDictionary::ComputeCapacity</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">used_elements</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#F07178;">  NumberDictionary::kEntrySize</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 快数组新容ᰁ是扩容后的容ᰁ3倍之多时，也会被转成慢数组</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> size_threshold </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> new_capacity</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">inline</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ShouldConvertToSlowElements</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">JSObject </span><span style="color:#A6ACCD;font-style:italic;">object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">capacity</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">new_capacity</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">STATIC_ASSERT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">JSObject::kMaxUncheckedOldFastElementsLength </span><span style="color:#89DDFF;">&lt;=</span></span>
<span class="line"><span style="color:#F07178;">  JSObject::kMaxUncheckedFastElementsLength</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">index </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> capacity</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> capacity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 当加⼊的索引值（例如例3中的2000）⽐当前容ᰁcapacity ⼤于等于 1024时，</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// 返回true，转为慢数组</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">index </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> capacity </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> JSObject::kMaxGap</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">true;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">JSObject::NewElementsCapacity</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">index </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#82AAFF;">DCHECK_LT</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">index</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;"> </span><span style="color:#676E95;font-style:italic;">// TODO(ulan): Check if it works with young large objects.</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">new_capacity </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> JSObject::kMaxUncheckedOldFastElementsLength </span><span style="color:#89DDFF;">||</span></span>
<span class="line"><span style="color:#89DDFF;">(*</span><span style="color:#F07178;">new_capacity </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#F07178;"> JSObject::kMaxUncheckedFastElementsLength </span><span style="color:#89DDFF;">&amp;&amp;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ObjectInYoungGeneration</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">object</span><span style="color:#89DDFF;">)))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ShouldConvertToSlowElements</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GetFastElementsUsage</span><span style="color:#89DDFF;">(),*</span><span style="color:#F07178;">new_capacity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>所以，当处于一下情况时，快速组会被转为满数组：</p><ul><li><ol><li>当加入的索引值<code>index</code>比当前容量<code>capacity</code>差值大于等于<code>1024</code>时<code>(index-capacity&gt;= 1024)</code></li></ol></li><li><ol start="2"><li>快数组容量是扩容后的容量<code>3倍</code>之多时</li></ol></li></ul><p>例如：向快速组里增加一个大索引同类型值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">arr[</span><span style="color:#F78C6C;">2000</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当<code>arr</code>增加一个<code>2000</code>的索引时，<code>arr</code>被转为慢数组。节省了大量的内存空间（从索引<code>2</code>到索引为<code>2000</code>）</p><h3 id="_3-4-什么时候-slow-转为-fast" tabindex="-1">3.4 什么时候 slow 转为 fast <a class="header-anchor" href="#_3-4-什么时候-slow-转为-fast" aria-label="Permalink to &quot;3.4 什么时候 slow 转为 fast&quot;">​</a></h3><p>我们已经知道在什么时候会出现由快变慢，那由慢变快就很简单了</p><div class="language-c line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ShouldConvertToFastElements</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">JSObject </span><span style="color:#A6ACCD;font-style:italic;">object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> NumberDictionary </span><span style="color:#A6ACCD;font-style:italic;">dictionary</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">index</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">new_capacity</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// If properties with non-standard attributes or accessors were added, we</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// cannot go back to fast elements.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">dictionary</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">requires_slow_elements</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Adding a property with this index will require slow elements.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">index </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> static_cast</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#F07178;">Smi::kMaxValue</span><span style="color:#89DDFF;">))</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsJSArray</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      Object length </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">JSArray::cast</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">object</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">length</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(!</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsSmi</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> static_cast</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#82AAFF;">Smi::ToInt</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">length</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IsJSArgumentsObject</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">false;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dictionary</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max_number_key</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Max</span><span style="color:#89DDFF;">(</span><span style="color:#F07178;">index </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">uint32_t</span><span style="color:#F07178;"> dictionary_size </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> static_cast</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">uint32_t</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#A6ACCD;">dictionary</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Capacity</span><span style="color:#89DDFF;">())</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span></span>
<span class="line"><span style="color:#F07178;">    NumberDictionary::kEntrySize</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Turn fast if the dictionary only saves 50% space.</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> dictionary_size </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;">new_capacity</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><strong>当慢数组的元素可存放在快数组中且⻓度在 <code>smi</code> 之间且仅节省了 <code>50%</code>的空间，则会转变为快数组</strong></p><h2 id="_4-数组的动态扩容与减容" tabindex="-1">4.数组的动态扩容与减容 <a class="header-anchor" href="#_4-数组的动态扩容与减容" aria-label="Permalink to &quot;4.数组的动态扩容与减容&quot;">​</a></h2><p>在 <code>JavaScript\`\` 中，当数组执⾏</code>push\`\` 操作时，⼀旦发现数组<strong>内存不⾜</strong>，将进⾏扩容。扩容可以分为以下⼏步：</p><ul><li><ol><li>push 操作时，发现数组内存不⾜</li></ol></li><li><ol start="2"><li>申请 <code>new_capacity = old_capacity /2 + old_capacity + 16</code> 那么⻓度的内存空间</li></ol></li><li><ol start="3"><li>将数组拷⻉到新内存中</li></ol></li><li><ol start="4"><li>把新元素放在当前 <code>length</code> 位置</li></ol></li><li><ol start="5"><li>数组的 <code>length + 1</code></li></ol></li><li><ol start="6"><li>返回 <code>length</code></li></ol></li></ul><p>整个过程，⽤户是⽆感知的，不像 <code>C</code>，需⽤⽤户⼿动申请内存空间。</p><p>当数组 pop 后，如果数组容量⼤于等于 length 的 2 倍，则进⾏容量调整。减容可以分为以下⼏步：</p><ul><li><ol><li><code>pop</code> 操作时，获取数组 <code>length</code></li></ol></li><li><ol start="2"><li>获取 <code>length - 1</code> 上的元素（要删除的元素）</li></ol></li><li><ol start="3"><li>数组 <code>length - 1</code></li></ol></li><li><ol start="4"><li>判断数组的总容 量 是否⼤于等于 <code>length - 1</code> 的 <code>2</code> 倍 是的话，使⽤ <code>RightTrimFixedArray</code> 函数，计算出需要释放的空间⼤⼩，并做好标记，等待 <code>GC</code> 回收</li></ol></li><li><ol start="5"><li>不是的话，⽤ <code>holes</code> 对象填充</li></ol></li><li>6.返回要删除的元素</li></ul><h2 id="_5-总结" tabindex="-1">5. 总结 <a class="header-anchor" href="#_5-总结" aria-label="Permalink to &quot;5. 总结&quot;">​</a></h2><p><code>JavaScript</code> 中， <code>JSArray</code> 继承⾃ <code>JSObject</code> ，或者说它就是⼀个<strong>特殊的对象</strong>，内部是以 <code>key-value</code> 形式存储数据，所以 <code>JavaScript</code> 中的数组可以存放不同类型的值。它有两种存储⽅式，<strong>快数组</strong>与<strong>慢数 组</strong>，初始化空数组时，使⽤快数组，快数组使⽤连续的内存空间，当数组⻓度达到最⼤ 时， <code>JSArray</code> 会进⾏动态的扩容，以存储更多的元素，相对慢数组，性能要好得多。当数组中 <code>hole</code> 太多时，会转变成慢数组，即以哈希表的⽅式（ <code>key-value</code> 的形式）存储数据，以节省内存空 间。</p>`,38),o=[e];function t(c,r,i,y,F,D){return n(),a("div",null,o)}const A=s(p,[["render",t]]);export{d as __pageData,A as default};
