import{_ as e,o as a,c as o,V as t}from"./chunks/framework.364d6ed5.js";const m=JSON.parse('{"title":"计数排序","description":"","frontmatter":{"title":"计数排序","date":"2022-04-13T16:18:50.000Z","permalink":"/pages/2dc115/","categories":["数据结构和算法","算法"],"tags":[null]},"headers":[],"relativePath":"数据结构和算法/算法/排序算法/计数排序.md","filePath":"数据结构和算法/算法/排序算法/计数排序.md","lastUpdated":1685623283000}'),l={name:"数据结构和算法/算法/排序算法/计数排序.md"},c=t('<h2 id="_1-思想" tabindex="-1">1.思想 <a class="header-anchor" href="#_1-思想" aria-label="Permalink to &quot;1.思想&quot;">​</a></h2><ul><li>计数排序的方式不是通过比较，而是通过统计每个数出现的次数来进行排序的，是桶排序的特殊的一种方式</li></ul><h2 id="_2-实现" tabindex="-1">2.实现 <a class="header-anchor" href="#_2-实现" aria-label="Permalink to &quot;2.实现&quot;">​</a></h2><p>利用额外的数组<code>C</code>来统计待排序数组<code>A</code>元素出现的次数，然后根据数组<code>C</code>输出排序候的数组<code>A</code>。其中额外数组<code>C</code>第<code>i</code>个元素是待排序数组<code>A</code>中等于<code>i</code>的元素<strong>出现的次数</strong>。</p><h4 id="数组-c-和数组-a-的对应关系" tabindex="-1">数组 C 和数组 A 的对应关系 <a class="header-anchor" href="#数组-c-和数组-a-的对应关系" aria-label="Permalink to &quot;数组 C 和数组 A 的对应关系&quot;">​</a></h4><ul><li><ol><li>数组<code>C</code>的下表 ------&gt; 数组<code>A</code>中元素</li></ol></li><li><ol start="2"><li>数组<code>C</code>的元素 ------&gt; 数组<code>A</code>中元素出现的次数</li></ol></li></ul><h2 id="_3-实现" tabindex="-1">3.实现 <a class="header-anchor" href="#_3-实现" aria-label="Permalink to &quot;3.实现&quot;">​</a></h2><h2 id="_4-优缺点" tabindex="-1">4.优缺点 <a class="header-anchor" href="#_4-优缺点" aria-label="Permalink to &quot;4.优缺点&quot;">​</a></h2><ul><li><ol><li>当数列最大值和最小值差距过大时（占内存），并不适用计数排序</li></ol></li><li><ol start="2"><li>当数列元素不是整数时，不适用于计数排序</li></ol></li></ul>',9),d=[c];function i(r,s,_,n,h,u){return a(),o("div",null,d)}const f=e(l,[["render",i]]);export{m as __pageData,f as default};
