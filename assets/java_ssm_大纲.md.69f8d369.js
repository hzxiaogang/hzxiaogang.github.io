import{_ as a,o as e,c as i,V as t}from"./chunks/framework.364d6ed5.js";const m=JSON.parse('{"title":"ssm技术点","description":"","frontmatter":{"title":"ssm技术点","date":"2022-09-30T14:12:52.000Z","permalink":"/pages/9ad359/","categories":["java","ssm"],"tags":[null]},"headers":[],"relativePath":"java/ssm/大纲.md","filePath":"java/ssm/大纲.md","lastUpdated":1685806707000}'),l={name:"java/ssm/大纲.md"},r=t('<h1 id="ssm技术点" tabindex="-1">ssm技术点 <a class="header-anchor" href="#ssm技术点" aria-label="Permalink to &quot;ssm技术点&quot;">​</a></h1><h2 id="_1-spring" tabindex="-1">1. Spring <a class="header-anchor" href="#_1-spring" aria-label="Permalink to &quot;1. Spring&quot;">​</a></h2><p>使用其核心思想 IOC 管理组件，使用 AOP 思想实现功能增强</p><h3 id="_1-1-ioc" tabindex="-1">1.1 IOC <a class="header-anchor" href="#_1-1-ioc" aria-label="Permalink to &quot;1.1 IOC&quot;">​</a></h3><ul><li><ol><li>基于 XML 管理 bean</li></ol></li><li><ol start="2"><li>基于注解管理 bean</li></ol></li></ul><h3 id="_1-2-aop" tabindex="-1">1.2 AOP <a class="header-anchor" href="#_1-2-aop" aria-label="Permalink to &quot;1.2 AOP&quot;">​</a></h3><ul><li><ol><li>代理模式</li></ol></li><li><ol start="2"><li>基于注解实现 AOP</li></ol></li><li><ol start="3"><li>基于 XML 实现 AOP</li></ol></li></ul><h3 id="_1-3-声明式事务" tabindex="-1">1.3 声明式事务 <a class="header-anchor" href="#_1-3-声明式事务" aria-label="Permalink to &quot;1.3 声明式事务&quot;">​</a></h3><ul><li><ol><li>jdbcTemplate</li></ol></li><li><ol start="2"><li>基于注解的声明式事务</li></ol></li><li><ol start="3"><li>事务相关属性</li></ol></li><li><ol start="4"><li>基于 XML 的声明式事务</li></ol></li></ul><h2 id="_2-springmvc" tabindex="-1">2. SpringMVC <a class="header-anchor" href="#_2-springmvc" aria-label="Permalink to &quot;2. SpringMVC&quot;">​</a></h2><p>接收浏览器发送的请求，并相应浏览器数据</p><h3 id="_2-1-搭建框架" tabindex="-1">2.1 搭建框架 <a class="header-anchor" href="#_2-1-搭建框架" aria-label="Permalink to &quot;2.1 搭建框架&quot;">​</a></h3><h3 id="_2-2-requestmapping" tabindex="-1">2.2 @RequestMapping <a class="header-anchor" href="#_2-2-requestmapping" aria-label="Permalink to &quot;2.2 @RequestMapping&quot;">​</a></h3><h3 id="_2-3-获取请求参数" tabindex="-1">2.3 获取请求参数 <a class="header-anchor" href="#_2-3-获取请求参数" aria-label="Permalink to &quot;2.3 获取请求参数&quot;">​</a></h3><h3 id="_2-4-向域对象共享数据" tabindex="-1">2.4 向域对象共享数据 <a class="header-anchor" href="#_2-4-向域对象共享数据" aria-label="Permalink to &quot;2.4 向域对象共享数据&quot;">​</a></h3><h3 id="_2-5-视图" tabindex="-1">2.5 视图 <a class="header-anchor" href="#_2-5-视图" aria-label="Permalink to &quot;2.5 视图&quot;">​</a></h3><h3 id="_2-6-restful" tabindex="-1">2.6 RestFul <a class="header-anchor" href="#_2-6-restful" aria-label="Permalink to &quot;2.6 RestFul&quot;">​</a></h3><h3 id="_2-7-处理-ajax-请求" tabindex="-1">2.7 处理 Ajax 请求 <a class="header-anchor" href="#_2-7-处理-ajax-请求" aria-label="Permalink to &quot;2.7 处理 Ajax 请求&quot;">​</a></h3><h3 id="_2-8-文件上传和下载" tabindex="-1">2.8 文件上传和下载 <a class="header-anchor" href="#_2-8-文件上传和下载" aria-label="Permalink to &quot;2.8 文件上传和下载&quot;">​</a></h3><h3 id="_2-9-拦截器" tabindex="-1">2.9 拦截器 <a class="header-anchor" href="#_2-9-拦截器" aria-label="Permalink to &quot;2.9 拦截器&quot;">​</a></h3><h3 id="_2-10-异常解析器" tabindex="-1">2.10 异常解析器 <a class="header-anchor" href="#_2-10-异常解析器" aria-label="Permalink to &quot;2.10 异常解析器&quot;">​</a></h3><h3 id="_2-11-springmvc-的执行流程" tabindex="-1">2.11 SpringMVC 的执行流程 <a class="header-anchor" href="#_2-11-springmvc-的执行流程" aria-label="Permalink to &quot;2.11 SpringMVC 的执行流程&quot;">​</a></h3><h2 id="_3-mybatis" tabindex="-1">3.MyBatis <a class="header-anchor" href="#_3-mybatis" aria-label="Permalink to &quot;3.MyBatis&quot;">​</a></h2><p>封装 JDBC,负责访问数据库，完成持久层操作</p><h3 id="_3-1-框架搭建" tabindex="-1">3.1 框架搭建 <a class="header-anchor" href="#_3-1-框架搭建" aria-label="Permalink to &quot;3.1 框架搭建&quot;">​</a></h3><h3 id="_3-2-nybatis-核心配置文件讲解" tabindex="-1">3.2 NyBatis 核心配置文件讲解 <a class="header-anchor" href="#_3-2-nybatis-核心配置文件讲解" aria-label="Permalink to &quot;3.2 NyBatis 核心配置文件讲解&quot;">​</a></h3><h3 id="_3-3-mybatis-获取参数值的方式" tabindex="-1">3.3 MyBatis 获取参数值的方式 <a class="header-anchor" href="#_3-3-mybatis-获取参数值的方式" aria-label="Permalink to &quot;3.3 MyBatis 获取参数值的方式&quot;">​</a></h3><h3 id="_3-4-mybatis-实现-crud" tabindex="-1">3.4 MyBatis 实现 CRUD <a class="header-anchor" href="#_3-4-mybatis-实现-crud" aria-label="Permalink to &quot;3.4 MyBatis 实现 CRUD&quot;">​</a></h3><h3 id="_3-5-mybatis-的自定义映射" tabindex="-1">3.5 MyBatis 的自定义映射 <a class="header-anchor" href="#_3-5-mybatis-的自定义映射" aria-label="Permalink to &quot;3.5 MyBatis 的自定义映射&quot;">​</a></h3><h3 id="_3-6-动态-sql" tabindex="-1">3.6 动态 SQl <a class="header-anchor" href="#_3-6-动态-sql" aria-label="Permalink to &quot;3.6 动态 SQl&quot;">​</a></h3><h3 id="_3-7-mybatis-缓存" tabindex="-1">3.7 MyBatis 缓存 <a class="header-anchor" href="#_3-7-mybatis-缓存" aria-label="Permalink to &quot;3.7 MyBatis 缓存&quot;">​</a></h3><h3 id="_3-8-mybatis-逆向工程" tabindex="-1">3.8 MyBatis 逆向工程 <a class="header-anchor" href="#_3-8-mybatis-逆向工程" aria-label="Permalink to &quot;3.8 MyBatis 逆向工程&quot;">​</a></h3><h3 id="_3-9-mybatis-分页插件" tabindex="-1">3.9 MyBatis 分页插件 <a class="header-anchor" href="#_3-9-mybatis-分页插件" aria-label="Permalink to &quot;3.9 MyBatis 分页插件&quot;">​</a></h3>',33),o=[r];function s(h,n,d,c,_,u){return e(),i("div",null,o)}const q=a(l,[["render",s]]);export{m as __pageData,q as default};
