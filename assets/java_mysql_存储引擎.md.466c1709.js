import{_ as t,o as e,c as l,V as d}from"./chunks/framework.364d6ed5.js";const _=JSON.parse('{"title":"存储引擎","description":"","frontmatter":{"title":"存储引擎","date":"2022-09-28T18:41:01.000Z","permalink":"/pages/eaa2e7/","categories":["java","mysql"],"tags":[null]},"headers":[],"relativePath":"java/mysql/存储引擎.md","filePath":"java/mysql/存储引擎.md","lastUpdated":1685806707000}'),n={name:"java/mysql/存储引擎.md"},o=d('<h1 id="存储引擎" tabindex="-1">存储引擎 <a class="header-anchor" href="#存储引擎" aria-label="Permalink to &quot;存储引擎&quot;">​</a></h1><h2 id="_1-mysql表类型和存储引擎" tabindex="-1">1. MySql表类型和存储引擎 <a class="header-anchor" href="#_1-mysql表类型和存储引擎" aria-label="Permalink to &quot;1. MySql表类型和存储引擎&quot;">​</a></h2><h3 id="_1-基本介绍" tabindex="-1">1. 基本介绍 <a class="header-anchor" href="#_1-基本介绍" aria-label="Permalink to &quot;1. 基本介绍&quot;">​</a></h3><ul><li><ol><li><code>MySql</code>的<strong>表类型由存储引擎（Storage Engines）决定</strong>，主要包括<code>MyISAM</code>，<code>InnoDB</code>，<code>Memory</code>等</li></ol></li><li><ol start="2"><li><code>MySql</code>数据表主要支持六种类型，分别是：<code>CSV</code>，<code>Memory</code>，<code>ARCHIVE</code>，<code>MRG_MYISAM</code>，<code>MyISAM</code>，<code>InnoDB</code></li></ol></li><li><ol start="3"><li>这六种又分为两类，一类是<strong>事务安全型</strong>（transition-safe），比如：<code>InnoDB</code>。其余都属于第二类，称为<strong>非事务安全型</strong>（non-transition-safe）</li></ol></li><li><ol start="4"><li>查看所有的存储引擎</li></ol></li></ul><p><code>SHOW ENGINES</code></p><h3 id="_2-主要的存储引擎-表类型特点" tabindex="-1">2. 主要的存储引擎/表类型特点 <a class="header-anchor" href="#_2-主要的存储引擎-表类型特点" aria-label="Permalink to &quot;2. 主要的存储引擎/表类型特点&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">特点</th><th style="text-align:center;">MyISAM</th><th style="text-align:center;">InnoDB （Mysql默认引擎）</th><th style="text-align:center;">Memory</th><th style="text-align:center;">Archive</th></tr></thead><tbody><tr><td style="text-align:left;">批量插入的速度 👍</td><td style="text-align:center;">高</td><td style="text-align:center;"><strong>低</strong></td><td style="text-align:center;">高</td><td style="text-align:center;">非常高</td></tr><tr><td style="text-align:left;">事务安全 👍</td><td style="text-align:center;"></td><td style="text-align:center;"><strong>支持</strong></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">全文索引</td><td style="text-align:center;">支持</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">锁机制 👍</td><td style="text-align:center;">表锁</td><td style="text-align:center;"><strong>行锁</strong></td><td style="text-align:center;">表锁</td><td style="text-align:center;">行锁</td></tr><tr><td style="text-align:left;">存储限制</td><td style="text-align:center;">没有</td><td style="text-align:center;">64TB</td><td style="text-align:center;">有</td><td style="text-align:center;">没有</td></tr><tr><td style="text-align:left;">B树索引</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">哈希索引</td><td style="text-align:center;"></td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">集群索引</td><td style="text-align:center;"></td><td style="text-align:center;">支持</td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">数据缓存</td><td style="text-align:center;"></td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">索引缓存</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;">支持</td><td style="text-align:center;"></td></tr><tr><td style="text-align:left;">数据可压缩</td><td style="text-align:center;">支持</td><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;">支持</td></tr><tr><td style="text-align:left;">空间使用</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">N/A</td><td style="text-align:center;">非常低</td></tr><tr><td style="text-align:left;">内存使用</td><td style="text-align:center;">低</td><td style="text-align:center;">高</td><td style="text-align:center;">中等</td><td style="text-align:center;">低</td></tr><tr><td style="text-align:left;">支持外键 👍</td><td style="text-align:center;"></td><td style="text-align:center;"><strong>支持</strong></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p>👍 : 表是重要的特点</p><p>我们这里给大家介绍三种 ：<code>MyISAM</code>，<code>InnoDB</code>，<code>Memory</code></p><ul><li><ol><li><code>MyISAM</code>不支持事务，也不支持外键，但是访问速度快，对事物完整性没有要求</li></ol></li><li><ol start="2"><li><code>InnoDB</code>存储引擎提供了具有<code>提交</code>，<code>回滚</code>，和<code>崩溃恢复</code>能力的事务安全，但是比起<code>MyISAM</code>存储引擎，<code>InnoDB</code>写的处理效率差一些，并且会占用更多的<code>磁盘空间</code>以<code>保留数据</code>和<code>索引</code>。</li></ol></li><li><ol start="3"><li><code>Memory</code>存储引擎使用存在内存中的内容来创建表。但是<code>Memory</code>表只实际对应一个磁盘。<code>Memory</code>类型的<code>访问非常快</code>（没有IO读写），因为它的<code>数据</code>是<code>存储</code>在<code>内存中</code>的，并且默认使用<code>HASH</code>索引。但是一旦<code>MySql</code>服务关闭，表中的<code>数据就会丢掉</code>，但是表的结构还在。</li></ol></li></ul><h3 id="_3-如何选择表的存储引擎" tabindex="-1">3. 如何选择表的存储引擎 <a class="header-anchor" href="#_3-如何选择表的存储引擎" aria-label="Permalink to &quot;3. 如何选择表的存储引擎&quot;">​</a></h3><ul><li><ol><li>如果你的应用不需要事务，处理的只是基本的<code>CRUD</code>操作，那么<code>MyISAM</code>是不二选择，速度快。</li></ol></li><li><ol start="2"><li>如果需要支持事务，选择<code>InnoDB</code></li></ol></li><li><ol start="3"><li><code>Memory</code>存储引擎就是将数据存储与内存中，由于没有磁盘<code>I/O</code>的等待，速度极快。单由于是内存存储引擎，所做的任何修改在服务重启后都将消失。<strong>（经典用法：用户的在线状态）</strong></li></ol></li></ul>',12),a=[o];function c(r,i,s,y,g,x){return e(),l("div",null,a)}const M=t(n,[["render",c]]);export{_ as __pageData,M as default};
