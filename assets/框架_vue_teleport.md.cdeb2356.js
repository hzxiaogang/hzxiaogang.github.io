import{_ as s,o as n,c as a,V as p}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"teleport","description":"","frontmatter":{"title":"teleport","date":"2021-11-16T10:54:07.000Z","permalink":"/pages/c58511/","categories":"+ 框架 + vue","tags":[null]},"headers":[],"relativePath":"框架/vue/teleport.md","filePath":"框架/vue/teleport.md","lastUpdated":1685623283000}'),l={name:"框架/vue/teleport.md"},e=p(`<p><code>teleport</code> 是 vue3 中的一个内置组件，内置组件可以在模板中直接使用，而不需注册。 <code>teleport</code> 允许我们控制 <code>teleport</code> 下的内容在那个 DOM 节点下渲染。但是它并不会改变组件树的嵌套关系。如果 <code>&lt;teloport&gt;</code> 包含 Vue 组件，这个这个 Vue 组件任然是 <code>&lt;teleport&gt;</code> 父组件的逻辑子组件。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;h1&gt;Root instance&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;parent-component /&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">parent-component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;h2&gt;This is a parent component&lt;/h2&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;teleport to=&quot;#app&quot;&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      &lt;child-component name=&quot;John&quot; /&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;/teleport&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child-component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;div&gt;Hello, {{ name }}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>如上面这个例子中，组件 <code>parent-component</code> 中使用了 <code>&lt;teleport&gt;</code> ，且 <code>&lt;teleport&gt;</code> 嵌套了 <code>child-component</code> 。此时 <code>child-component</code> 任然是 <code>parent-component</code> 。但是 <code>child-component</code> 组件渲染后将会挂载在 id 为 <code>app</code> 的 dom 节点下，而并不是 <code>parent-component</code> 组件内。</p>`,3),o=[e];function t(c,r,D,i,F,y){return n(),a("div",null,o)}const m=s(l,[["render",t]]);export{C as __pageData,m as default};
