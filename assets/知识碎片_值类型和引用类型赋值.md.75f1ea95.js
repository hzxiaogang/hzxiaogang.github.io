import{_ as s,o as a,c as n,V as o}from"./chunks/framework.364d6ed5.js";const l="/基础类型.png",e="/引用类型.png",b=JSON.parse('{"title":"值类型和引用类型赋值","description":"","frontmatter":{"title":"值类型和引用类型赋值","date":"2022-01-14T15:49:39.000Z","permalink":"/pages/d5740d/","categories":["知识碎片"],"tags":[null]},"headers":[],"relativePath":"知识碎片/值类型和引用类型赋值.md","filePath":"知识碎片/值类型和引用类型赋值.md","lastUpdated":1685623283000}'),p={name:"知识碎片/值类型和引用类型赋值.md"},c=o(`<h2 id="_1-js-中赋值" tabindex="-1">1.JS 中赋值 <a class="header-anchor" href="#_1-js-中赋值" aria-label="Permalink to &quot;1.JS 中赋值&quot;">​</a></h2><p>js 中数据类型分为<code>值类型</code>(基本类型)和<code>引用类型</code>。</p><ul><li><ol><li>值类型 如 ：<code>String</code>，<code>Number</code>，<code>Boolean</code>，<code>Undefined</code>，<code>Null</code></li></ol></li><li><ol start="2"><li>引用类型 如 ：<code>Object</code>，<code>Array</code></li></ol></li></ul><p><code>值类型</code>的数据保存在<code>栈内存</code>中。<code>引用类型</code>的数据保存在<code>堆内存</code>中。</p><h3 id="值类型赋值" tabindex="-1">值类型赋值 <a class="header-anchor" href="#值类型赋值" aria-label="Permalink to &quot;值类型赋值&quot;">​</a></h3><p>值类型赋值赋的是栈内存中具体的<code>值</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(a)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 50</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>基本类型数据存放在<code>栈内存</code>中，访问是按<code>值</code>访问的，就是说你可以操作保存在变量中的实际的值。当基本类型的数据赋值时，赋的是实际的值，a 和 b 是没有关联关系的，b 由 a 复制得到，相互独立。所以下面的结果打印 50。 <img src="`+l+`"></p><h3 id="引用类型赋值" tabindex="-1">引用类型赋值 <a class="header-anchor" href="#引用类型赋值" aria-label="Permalink to &quot;引用类型赋值&quot;">​</a></h3><p>引用类型赋值，赋的是对象在栈内存中的<code>地址</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小李</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> obj2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小刘</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(obj2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 小刘</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>引用类型数据存放的方式是：</p><p>在<strong>栈内存</strong>中存放该对象的<strong>地址</strong>。在<strong>堆内存</strong>中存放该对象的<strong>数据</strong></p><p>该例子中，<code>obj</code>将自己在占内存中的地址赋值给<code>obj2</code>，此时它们同时指向<code>堆内存</code>地址的数据，修改它们其中的一个，数据虽然 变化了，但是它们的地址没有变，指向的还是同一个堆内存的数据，因此当 obj 修改数据的时候，obj2 也会变化。</p><img src="`+e+'">',15),t=[c];function r(d,i,D,y,C,A){return a(),n("div",null,t)}const _=s(p,[["render",r]]);export{b as __pageData,_ as default};
