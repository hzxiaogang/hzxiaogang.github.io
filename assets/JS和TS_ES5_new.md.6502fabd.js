import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const C=JSON.parse('{"title":"JS new 操作符到底做了什么","description":"","frontmatter":{"title":"JS new 操作符到底做了什么","date":"2021-12-06T09:32:45.000Z","permalink":"/pages/6e0dd2/","categories":["JS和TS","ES5"],"tags":[null]},"headers":[],"relativePath":"JS和TS/ES5/new.md","filePath":"JS和TS/ES5/new.md","lastUpdated":1685623283000}'),o={name:"JS和TS/ES5/new.md"},p=l(`<h2 id="_1-分析" tabindex="-1">1.分析 <a class="header-anchor" href="#_1-分析" aria-label="Permalink to &quot;1.分析&quot;">​</a></h2><p>在大多数编程语言中，<code>new</code>操作符的功能就是<code>生成实例对象</code>。在 JavaScript 中也是一样。在 JavaScript 中，我们是通过<code>函数</code>来生成实例对象的。要知道<code>new</code>操作符到底做了什么，我们可以从<code>实例对象</code>的特点和属性来<code>反推</code> new 操作符到底干了什么。</p><ul><li><ol><li>实例对象的属性来自于构造函数的参数。</li></ol></li><li><ol start="2"><li>实例对象的<strong>隐式原型对象</strong>指向构造函数的原型对象</li></ol></li><li><ol start="3"><li>首先实例对象是构造函数返回的。</li></ol></li></ul><p>所以<code>new</code>的过程就是创造并给实例对象添加这些特性的过程。</p><h2 id="_2-new-操作符的过程" tabindex="-1">2. new 操作符的过程 <a class="header-anchor" href="#_2-new-操作符的过程" aria-label="Permalink to &quot;2. new 操作符的过程&quot;">​</a></h2><ul><li><ol><li>创建一个空的 JS 对象，既<code>{}</code></li></ol></li><li><ol start="2"><li>将空对象的隐式原型指向构造函数的原型</li></ol></li><li><ol start="3"><li>将空对象作为<strong>构造函数</strong>的<strong>指向上下文</strong>（改变 this）</li></ol></li><li><ol start="4"><li>对构造函数有无返回值判断</li></ol></li></ul><h2 id="_3-代码展示" tabindex="-1">3. 代码展示 <a class="header-anchor" href="#_3-代码展示" aria-label="Permalink to &quot;3. 代码展示&quot;">​</a></h2><h3 id="_3-1-new-操作符的实现过程" tabindex="-1">3.1 new 操作符的实现过程 <a class="header-anchor" href="#_3-1-new-操作符的实现过程" aria-label="Permalink to &quot;3.1 new 操作符的实现过程&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 1.创建一个空对象</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 2.将空对象的隐式原型指向构造函数的原型</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// obj._proto_ = fn.prototype</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 3. 修改this，并传入参数</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 4. 对构造函数有无返回值判断</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_3-2-构造函数的返回值" tabindex="-1">3.2 构造函数的返回值 <a class="header-anchor" href="#_3-2-构造函数的返回值" aria-label="Permalink to &quot;3.2 构造函数的返回值&quot;">​</a></h3><p>一般情况下构造函数是没有返回值，但是作为函数，是可以有返回值的。那么在构造函数有返回值的情况下，<code>new操作符</code>是怎么处理的呢？ 下面先看两个列子：</p><h4 id="_3-2-1-返回基础类型数据" tabindex="-1">3.2.1 返回基础类型数据 <a class="header-anchor" href="#_3-2-1-返回基础类型数据" aria-label="Permalink to &quot;3.2.1 返回基础类型数据&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// return undefined/NaN/&#39;string&#39;/null</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> me </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(me)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {name :&#39;张三&#39;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="_3-2-2-返回引用类型数据" tabindex="-1">3.2.2 返回引用类型数据 <a class="header-anchor" href="#_3-2-2-返回引用类型数据" aria-label="Permalink to &quot;3.2.2 返回引用类型数据&quot;">​</a></h4><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">12</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> me </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">张三</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(me)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {age:12}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>根据上面的两个例子我们得出以下结论：</p><p>在 new 的时候，会对构造函数的返回值做一些判断：</p><ul><li><ol><li>如果返回值是基础类型的时候，则忽略返回值</li></ol></li><li><ol start="2"><li>如果返回值是引用类型数据，则使用 return 的返回值，就是 new 操作符无效</li></ol></li></ul>`,18),e=[p];function t(r,c,i,y,F,D){return n(),a("div",null,e)}const d=s(o,[["render",t]]);export{C as __pageData,d as default};
