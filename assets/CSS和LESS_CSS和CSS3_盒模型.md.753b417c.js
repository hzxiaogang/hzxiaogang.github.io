import{_ as a,o as s,c as n,V as e}from"./chunks/framework.364d6ed5.js";const _=JSON.parse('{"title":"盒模型","description":"","frontmatter":{"title":"盒模型","date":"2021-11-30T11:29:40.000Z","permalink":"/pages/ba0774/","categories":["CSS和LESS","CSS和CSS3"],"tags":[null]},"headers":[],"relativePath":"CSS和LESS/CSS和CSS3/盒模型.md","filePath":"CSS和LESS/CSS和CSS3/盒模型.md","lastUpdated":1685806707000}'),o={name:"CSS和LESS/CSS和CSS3/盒模型.md"},t=e(`<h1 id="盒模型" tabindex="-1">盒模型 <a class="header-anchor" href="#盒模型" aria-label="Permalink to &quot;盒模型&quot;">​</a></h1><p>所有 HTML 元素都可以视为方框。在 css 中，在谈论设计和布局的时候，会使用属于“盒模型”或者“框模型”。</p><p>CSS<strong>盒模型</strong>实质上是一个<strong>包围 HTML 元素的框</strong>。它包括，外边距（maring），边框（border），内边距（padding），以及实际的内容（content）。</p><p>CSS 的盒模型分为<code>W3C盒模型</code>（标准盒模型），和<code>IE盒模型</code>（怪异盒模型）。它们的区别就是计算盒子的宽度和高度方式不一样。</p><h2 id="_1-w3c-盒模型" tabindex="-1">1. W3C 盒模型 <a class="header-anchor" href="#_1-w3c-盒模型" aria-label="Permalink to &quot;1. W3C 盒模型&quot;">​</a></h2><p>W3C 盒模型，计算盒子的宽/高的方式 : 盒子宽或者高 是内容 content 的实际宽/高，不包括 margin 和 padding</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">盒子宽 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> content的宽</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">盒子高 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> content的高</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_2-ie-盒模型" tabindex="-1">2.IE 盒模型 <a class="header-anchor" href="#_2-ie-盒模型" aria-label="Permalink to &quot;2.IE 盒模型&quot;">​</a></h2><p>IE 盒模型，计算盒子的宽/高的方式：盒子的宽或高是 内容 content 的实际宽/高 和 padding 以及 border 这三者之和</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">盒子宽 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> border </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> padding </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> content的宽</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">盒子高 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> border </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> padding </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> content的高</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_3-切换盒模型" tabindex="-1">3.切换盒模型 <a class="header-anchor" href="#_3-切换盒模型" aria-label="Permalink to &quot;3.切换盒模型&quot;">​</a></h2><p><code>box-sizing: content-box</code> : 设置标准盒模型</p><p><code>box-sizing: border-box</code> : 设置怪异盒模型</p>`,13),l=[t];function p(r,c,i,d,C,S){return s(),n("div",null,l)}const b=a(o,[["render",p]]);export{_ as __pageData,b as default};
