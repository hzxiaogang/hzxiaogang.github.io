import{_ as e,o,c as a,V as c}from"./chunks/framework.364d6ed5.js";const v=JSON.parse('{"title":"SpringMvc简介","description":"","frontmatter":{"title":"SpringMvc简介","date":"2022-10-03T22:37:29.000Z","permalink":"/pages/c9bfa6/","categories":["java","ssm","springmvc"],"tags":[null]},"headers":[],"relativePath":"java/ssm/springmvc/SpringMvc简介.md","filePath":"java/ssm/springmvc/SpringMvc简介.md","lastUpdated":1685806707000}'),l={name:"java/ssm/springmvc/SpringMvc简介.md"},r=c('<h1 id="springmvc简介" tabindex="-1">SpringMvc简介 <a class="header-anchor" href="#springmvc简介" aria-label="Permalink to &quot;SpringMvc简介&quot;">​</a></h1><h2 id="_1-什么是-mvc" tabindex="-1">1. 什么是 MVC <a class="header-anchor" href="#_1-什么是-mvc" aria-label="Permalink to &quot;1. 什么是 MVC&quot;">​</a></h2><p><code>MVC</code> 是一种软件<strong>架构</strong>的思想，将软件按照<strong>模型</strong>、<strong>视图</strong>、<strong>控制器</strong>来划分。</p><h3 id="_1-1-m" tabindex="-1">1.1 M <a class="header-anchor" href="#_1-1-m" aria-label="Permalink to &quot;1.1 M&quot;">​</a></h3><p><code>M</code>：<code>Model</code>，模型层。指工程中的 <code>JavaBean</code>，作用是处理数据。</p><h4 id="javabean-分为两类" tabindex="-1">JavaBean 分为两类 <a class="header-anchor" href="#javabean-分为两类" aria-label="Permalink to &quot;JavaBean 分为两类&quot;">​</a></h4><ul><li><ol><li>一类称为实体类 <code>Bean</code>：专门存储业务数据的，如 <code>Student</code>、<code>User</code> 等</li></ol></li><li><ol start="2"><li>一类称为业务处理 <code>Bean</code>：指 <code>Service</code> 或 <code>Dao</code> 对象，专门用于处理业务逻辑和数据访问。</li></ol></li></ul><h3 id="_1-2-v" tabindex="-1">1.2 V <a class="header-anchor" href="#_1-2-v" aria-label="Permalink to &quot;1.2 V&quot;">​</a></h3><p><code>V</code>：<code>View</code>，视图层，指工程中的 <code>html</code> 或 <code>jsp</code> 等页面，作用是与用户进行交互，展示数据</p><h3 id="_1-3-c" tabindex="-1">1.3 C <a class="header-anchor" href="#_1-3-c" aria-label="Permalink to &quot;1.3 C&quot;">​</a></h3><p><code>C</code>：<code>Controller</code>，控制层，指工程中的 <code>servlet</code>，作用是接收请求和响应浏览器</p><h3 id="_1-4-mvc-工作流程" tabindex="-1">1.4 MVC 工作流程 <a class="header-anchor" href="#_1-4-mvc-工作流程" aria-label="Permalink to &quot;1.4 MVC 工作流程&quot;">​</a></h3><ul><li><ol><li>用户通过视图层发送请求到服务器，在服务器中请求被<code>Controller</code> 接收。</li></ol></li><li><ol start="2"><li><code>Controller</code>调用相应的 <code>Model</code> 层处理请求，处理完毕将结果返回到 <code>Controller</code>。</li></ol></li><li><ol start="3"><li><code>Controller</code> 再根据请求处理的结果找到相应的<code>View</code> 视图，渲染数据后最终响应给浏览器。</li></ol></li></ul><h2 id="_2-什么是-springmvc" tabindex="-1">2. 什么是 SpringMVC <a class="header-anchor" href="#_2-什么是-springmvc" aria-label="Permalink to &quot;2. 什么是 SpringMVC&quot;">​</a></h2><p><code>SpringMVC</code>是<code>Spring</code>的一个后续产品，是<code>Spring</code>的一个子项目。</p><p><code>SpringMVC</code> 是 <code>Spring</code> 为<strong>表述层</strong>开发提供的一整套完备的解决方案。在表述层框架历经 <code>Strust</code>、 <code>WebWork</code>、<code>Strust2</code> 等诸多产品的历代更迭之后，目前业界普遍选择了 <code>SpringMVC</code> 作为 <code>Java EE</code> 项目 表述层开发的首选方案。</p><p>三层架构分为<strong>表述层</strong>（或表示层）、<strong>业务逻辑层</strong>、<strong>数据访问层</strong>，表述层表示前台页面和后台 <code>servlet</code></p><h2 id="_3-springmvc-的特点" tabindex="-1">3. SpringMVC 的特点 <a class="header-anchor" href="#_3-springmvc-的特点" aria-label="Permalink to &quot;3. SpringMVC 的特点&quot;">​</a></h2><ul><li><ol><li><code>Spring</code> 家族原生产品，与 <code>IOC</code> 容器等基础设施无缝对接</li></ol></li><li><ol start="2"><li>基于原生的 <code>Servlet</code>，通过了功能强大的前端控制器 <code>DispatcherServlet</code>，对请求和响应进行统一处理</li></ol></li><li><ol start="3"><li>表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案</li></ol></li><li><ol start="4"><li>代码清新简洁，大幅度提升开发效率</li></ol></li><li><ol start="5"><li>内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可</li></ol></li><li><ol start="6"><li>性能卓著，尤其适合现代大型、超大型互联网项目要求</li></ol></li></ul>',19),i=[r];function t(d,n,s,p,h,g){return o(),a("div",null,i)}const m=e(l,[["render",t]]);export{v as __pageData,m as default};
