import{_ as a,o,c as e,a as n,V as s}from"./chunks/framework.364d6ed5.js";const l="/array.png",u=JSON.parse('{"title":"为什么说js的数组不是真正的数组，和数据结构的数组相比有什么不同","description":"","frontmatter":{"title":"为什么说js的数组不是真正的数组，和数据结构的数组相比有什么不同","date":"2022-01-14T15:49:39.000Z","permalink":"/pages/9d930f/","categories":["知识碎片"],"tags":[null]},"headers":[],"relativePath":"知识碎片/为什么说js的数组不是真正的数组，和数据结构的数组相比有什么不同.md","filePath":"知识碎片/为什么说js的数组不是真正的数组，和数据结构的数组相比有什么不同.md","lastUpdated":1685623283000}'),p={name:"知识碎片/为什么说js的数组不是真正的数组，和数据结构的数组相比有什么不同.md"},t=s('<h2 id="什么是数组" tabindex="-1">什么是数组 <a class="header-anchor" href="#什么是数组" aria-label="Permalink to &quot;什么是数组&quot;">​</a></h2><p>在强类型语言中如 C 和 Java，数组是这样定义的：</p><p>数组(Array)是一种<strong>线性表数据结构</strong>，它用一组<strong>连续的内存空间</strong>来存储具有<strong>相同类型的数据</strong></p><h3 id="线性表" tabindex="-1">线性表 <a class="header-anchor" href="#线性表" aria-label="Permalink to &quot;线性表&quot;">​</a></h3><p>线性表就是数据排列成一条线一样的结构，每个线性表上的数据最多只有<code>前</code>和<code>后</code>两个方向。除了<code>数组</code>，<code>链表</code>，<code>队列</code>，<code>栈</code>也是线性表数据结构。</p><h3 id="非线性表" tabindex="-1">非线性表 <a class="header-anchor" href="#非线性表" aria-label="Permalink to &quot;非线性表&quot;">​</a></h3><p><code>二叉树</code>，<code>堆</code>，<code>图</code>等是非线性表数据结构。之所以是非线性，是因为数据之间并不是简单的<strong>前后关系</strong></p><h3 id="如何根据下标实现随机访问" tabindex="-1">如何根据下标实现随机访问 <a class="header-anchor" href="#如何根据下标实现随机访问" aria-label="Permalink to &quot;如何根据下标实现随机访问&quot;">​</a></h3><p>比如一个长度为 10 的<code>int</code>类型的数组<code>a</code></p><div class="language-java line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[]</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><img src="'+l+'">',11),r=s('<p>计算机会给每一个内存单元分配一个地址，计算机通过地址来访问内存中的数据。当计算机要访问数组中的某个元素的时候就会通过下面的公式寻找地址：</p><p><code>a[i]_address = base_address + i * data_type_size</code></p><p>这里的<code>data_type_size</code>表示数组中每个元素的大小，因为例子中是<code>int</code>类型，所以大小为 4</p><h2 id="js-中的数组" tabindex="-1">JS 中的数组 <a class="header-anchor" href="#js-中的数组" aria-label="Permalink to &quot;JS 中的数组&quot;">​</a></h2><p>虽然 JS 中数组与其它语言中的数组都是<code>数据的有序列表</code>，但是与其他语言还是有很大区别:</p><ul><li><ol><li>js 的数组每一项可以保存任意类型的数据。java 中的数组必须保存相同的数据类型。</li></ol></li><li><ol start="2"><li>JS 的数组大小是可以动态调整的。既可以随着数据的添加自动增长以容纳新数据。java 中的数组长度不能改变。</li></ol></li></ul><p>在 JS 中数组其实也是对象，如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>基本等于：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> list </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>',10);function c(i,d,D,_,y,C){return o(),e("div",null,[t,n(" 从图中可以看到，计算机给数组`a`分配了一块连续的内存1000-1039，其中内存地址首地址为 `base_address =1000` "),r])}const A=a(p,[["render",c]]);export{u as __pageData,A as default};
