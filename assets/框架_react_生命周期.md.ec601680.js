import{_ as s,o as n,c as a,V as l}from"./chunks/framework.364d6ed5.js";const p="/liftCicle.png",o="/create.png",e="/update.png",t="/unmount.png",b=JSON.parse('{"title":"生命周期","description":"","frontmatter":{"title":"生命周期","date":"2021-08-31T09:06:49.000Z","permalink":"/pages/05c149/","categories":["框架","react"],"tags":[null]},"headers":[],"relativePath":"框架/react/生命周期.md","filePath":"框架/react/生命周期.md","lastUpdated":1685623283000}'),r={name:"框架/react/生命周期.md"},c=l('<h2 id="_1-概述" tabindex="-1">1.概述 <a class="header-anchor" href="#_1-概述" aria-label="Permalink to &quot;1.概述&quot;">​</a></h2><ul><li><ol><li>意义：组件的生命周期有助于理解组件的运行方式，完成更复杂的组件功能，分析组件错误原因等。</li></ol></li><li><ol start="2"><li>组件的生命周期 ： 组件从被创建到挂载到页面中运行，再到组件不用时卸载的过程</li></ol></li><li><ol start="3"><li>生命周期的每个阶段总是伴随着一些方法调用，这些方法就是生命周期的<code>钩子函数</code></li></ol></li><li><ol start="4"><li>钩子函数的作用 ： 为开发人员在不同阶段操作组件提供了时机。</li></ol></li><li><ol start="5"><li>只有类组件才有生命周期</li></ol></li></ul><h2 id="_2-生命周期的三个阶段" tabindex="-1">2.生命周期的三个阶段 <a class="header-anchor" href="#_2-生命周期的三个阶段" aria-label="Permalink to &quot;2.生命周期的三个阶段&quot;">​</a></h2><p>react 生命周期分为三个阶段，创建时，更新时，卸载时。每个阶段都会伴随着一些生命周期的钩子函数。今天我们只说一下常用的钩子函数。整体流程参考下图:</p><img src="'+p+'"><h3 id="_2-1-创建时-挂载阶段" tabindex="-1">2.1. 创建时 （挂载阶段） <a class="header-anchor" href="#_2-1-创建时-挂载阶段" aria-label="Permalink to &quot;2.1. 创建时 （挂载阶段）&quot;">​</a></h3><ul><li><ol><li>执行时机 ： 组件创建时 (页面加载时)</li></ol></li></ul><p>在创建时，有三个钩子函数，<code>constructor</code>，<code>render</code>，<code>componentDidMount</code></p><p>执行顺序是 ： 先执行 constructor()，再执行 render()，然后再执行 componentDidMount() <img src="'+o+'"></p><h3 id="_2-2-更新时-更新阶段" tabindex="-1">2.2. 更新时（更新阶段） <a class="header-anchor" href="#_2-2-更新时-更新阶段" aria-label="Permalink to &quot;2.2. 更新时（更新阶段）&quot;">​</a></h3><ul><li><ol><li>执行时机 ：1.setState() 2.forceUpdate() 3.组件接收到新的 props</li></ol></li><li><ol start="2"><li>以上三者任意一种变化，组件就会重新渲染</li></ol></li><li><ol start="3"><li>执行顺序是 ： 先执行 render()方法，再执行 componentDidUpdate()</li></ol></li></ul><img src="'+e+`"><p>在<code>componentDidUpdate</code> 钩子函数中我们是可以执行<code>setState()</code>方法更新 state 的，但是必须放在一个<code>if</code>条件中，否则会进入死循环。那这个<code>if</code>条件怎么写呢？ <code>componentDidUpdate</code>钩子函数第一个参数返回的是，上一次的 props，我们可以用它和<code>this.props</code>(当前的 props)比较，当它们<code>不相等</code>的时候，我们就可以执行<code>setState</code></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Counter</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;{this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentDidUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">prevProps</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">prevProps</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 1. 执行 setState</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 2. 发送Ajax侵权</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_2-3-卸载时-卸载阶段" tabindex="-1">2.3. 卸载时(卸载阶段) <a class="header-anchor" href="#_2-3-卸载时-卸载阶段" aria-label="Permalink to &quot;2.3. 卸载时(卸载阶段)&quot;">​</a></h3><ul><li><ol><li>执行时机:组件从页面消失</li></ol></li></ul><img src="`+t+`"><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Counter</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentDidMount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 开启定时器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">timerId</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">定时器正在执行~</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">renter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">统计打豆豆的的次数</span><span style="color:#F07178;">：</span><span style="color:#89DDFF;">{this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#A6ACCD;">h1</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">componentWillUnmount</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 清理定时器</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">timerId</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,18),i=[c];function F(y,D,d,C,u,A){return n(),a("div",null,i)}const h=s(r,[["render",F]]);export{b as __pageData,h as default};
