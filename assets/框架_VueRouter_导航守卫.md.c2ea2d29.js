import{_ as e,o as a,c as s,V as o}from"./chunks/framework.364d6ed5.js";const D=JSON.parse('{"title":"导航守卫","description":"","frontmatter":{"title":"导航守卫","date":"2022-02-10T16:52:06.000Z","permalink":"/pages/597c3a/","categories":["框架","VueRouter"],"tags":[null]},"headers":[],"relativePath":"框架/VueRouter/导航守卫.md","filePath":"框架/VueRouter/导航守卫.md","lastUpdated":1685623283000}'),n={name:"框架/VueRouter/导航守卫.md"},r=o(`<p><code>vue-router</code>提供的导航守卫主要用来通过<strong>跳转</strong>或<strong>取消</strong>的方式<strong>守卫导航</strong>。这里有很多方式<strong>植入路由导航中</strong>：<code>全局的</code>，<code>单个路由独享的</code>，或者<code>组件级的</code></p><h2 id="_1-全局守卫" tabindex="-1">1. 全局守卫 <a class="header-anchor" href="#_1-全局守卫" aria-label="Permalink to &quot;1. 全局守卫&quot;">​</a></h2><h3 id="_1-1-beforeeach" tabindex="-1">1.1 beforeEach <a class="header-anchor" href="#_1-1-beforeeach" aria-label="Permalink to &quot;1.1 beforeEach&quot;">​</a></h3><p><code>beforeEach</code>是全局前置守卫。</p><h3 id="_1-2-beforeresolve" tabindex="-1">1.2 beforeResolve <a class="header-anchor" href="#_1-2-beforeresolve" aria-label="Permalink to &quot;1.2 beforeResolve&quot;">​</a></h3><p><code>beforeResolve</code>全局解析守卫</p><h3 id="_1-3-aftereach" tabindex="-1">1.3 afterEach <a class="header-anchor" href="#_1-3-aftereach" aria-label="Permalink to &quot;1.3 afterEach&quot;">​</a></h3><p><code>afterEach</code>是全局后置钩子</p><h2 id="_2-路由独享的守卫" tabindex="-1">2. 路由独享的守卫 <a class="header-anchor" href="#_2-路由独享的守卫" aria-label="Permalink to &quot;2. 路由独享的守卫&quot;">​</a></h2><h3 id="_2-1-beforeenter" tabindex="-1">2.1 beforeEnter <a class="header-anchor" href="#_2-1-beforeenter" aria-label="Permalink to &quot;2.1 beforeEnter&quot;">​</a></h3><p>你可以直接在路由配置上定义<code>beforeEnter</code>守卫：</p><h2 id="_3-组件级守卫" tabindex="-1">3. 组件级守卫 <a class="header-anchor" href="#_3-组件级守卫" aria-label="Permalink to &quot;3. 组件级守卫&quot;">​</a></h2><h3 id="_3-1-beforerouteenter" tabindex="-1">3.1 beforeRouteEnter <a class="header-anchor" href="#_3-1-beforerouteenter" aria-label="Permalink to &quot;3.1 beforeRouteEnter&quot;">​</a></h3><p>在渲染该组件的对应路由被验证前调用。不能获取组件实例<code>this</code>，因为当守卫执行时，组件实例还没被创建。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> UserDetails </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeRouteEnter</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-2-beforerouteupdate" tabindex="-1">3.2 beforeRouteUpdate <a class="header-anchor" href="#_3-2-beforerouteupdate" aria-label="Permalink to &quot;3.2 beforeRouteUpdate&quot;">​</a></h3><p>在当前路由改变，但是该组件被复用时被调用。例如，对于一个带有动态参数的路劲：<code>/users/:id</code>，在<code>/users/1</code>和<code>/users/2</code>之间跳转的时候，由于会渲染同样的<code>UserDetails</code>组件，因此组件实例会被重复使用。而这个钩子就会在这种情况下被调用。因为这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例的<code>this</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> UserDetails </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">beforeRouteUpdate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-3-beforerouteleave" tabindex="-1">3.3 beforeRouteLeave <a class="header-anchor" href="#_3-3-beforerouteleave" aria-label="Permalink to &quot;3.3 beforeRouteLeave&quot;">​</a></h3>`,19),t=[r];function l(p,c,i,d,u,h){return a(),s("div",null,t)}const f=e(n,[["render",l]]);export{D as __pageData,f as default};
