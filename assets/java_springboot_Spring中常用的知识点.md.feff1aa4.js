import{_ as a,o as e,c as i,V as l}from"./chunks/framework.364d6ed5.js";const b=JSON.parse('{"title":"Spring中常用的11个扩展","description":"","frontmatter":{},"headers":[],"relativePath":"java/springboot/Spring中常用的知识点.md","filePath":"java/springboot/Spring中常用的知识点.md","lastUpdated":1685892875000}'),o={name:"java/springboot/Spring中常用的知识点.md"},r=l('<h1 id="spring中常用的11个扩展" tabindex="-1">Spring中常用的11个扩展 <a class="header-anchor" href="#spring中常用的11个扩展" aria-label="Permalink to &quot;Spring中常用的11个扩展&quot;">​</a></h1><h2 id="_1-自定义拦截器" tabindex="-1">1. 自定义拦截器 <a class="header-anchor" href="#_1-自定义拦截器" aria-label="Permalink to &quot;1. 自定义拦截器&quot;">​</a></h2><h2 id="_2-获取spring容器对象" tabindex="-1">2. 获取Spring容器对象 <a class="header-anchor" href="#_2-获取spring容器对象" aria-label="Permalink to &quot;2. 获取Spring容器对象&quot;">​</a></h2><ul><li><ol><li>BeanFactoryAware接口</li></ol></li><li><ol start="2"><li>ApplicationContextAware接口</li></ol></li><li><ol start="3"><li>ApplicationListener接口</li></ol></li></ul><h2 id="_3-全局异常处理" tabindex="-1">3. 全局异常处理 <a class="header-anchor" href="#_3-全局异常处理" aria-label="Permalink to &quot;3. 全局异常处理&quot;">​</a></h2><ul><li><ol><li><code>@RestControllerAdvice</code>注解</li></ol></li></ul><h2 id="_4-类型转换器" tabindex="-1">4. 类型转换器 <a class="header-anchor" href="#_4-类型转换器" aria-label="Permalink to &quot;4. 类型转换器&quot;">​</a></h2><h2 id="_5-导入配置" tabindex="-1">5. 导入配置 <a class="header-anchor" href="#_5-导入配置" aria-label="Permalink to &quot;5. 导入配置&quot;">​</a></h2><p>使用<code>@Import</code>导入，导入的类分为四种</p><ul><li><ol><li>普通类</li></ol></li><li><ol start="2"><li><code>@Configuration</code>注解的配置类</li></ol></li><li><ol start="3"><li>实现<code>ImportSelector</code>接口的类</li></ol></li><li><ol start="4"><li>实现<code>ImportBeanDefinitionRegistrar</code>接口的类</li></ol></li></ul><h2 id="_6-项目启动时" tabindex="-1">6. 项目启动时 <a class="header-anchor" href="#_6-项目启动时" aria-label="Permalink to &quot;6. 项目启动时&quot;">​</a></h2><p>项目启动时定制化一些附加的功能，比如加载一些系统配置参数，缓存预热等。 有两种方式：</p><ul><li><ol><li><code>CommandLineRunner</code>接口</li></ol></li><li><ol start="2"><li><code>ApplicationRunner</code>接口</li></ol></li></ul><h2 id="_7-修改beandefinition" tabindex="-1">7. 修改BeanDefinition <a class="header-anchor" href="#_7-修改beandefinition" aria-label="Permalink to &quot;7. 修改BeanDefinition&quot;">​</a></h2><h2 id="_8-初始化bean的三种方式" tabindex="-1">8. 初始化Bean的三种方式 <a class="header-anchor" href="#_8-初始化bean的三种方式" aria-label="Permalink to &quot;8. 初始化Bean的三种方式&quot;">​</a></h2><h2 id="_9-关闭容器前" tabindex="-1">9. 关闭容器前 <a class="header-anchor" href="#_9-关闭容器前" aria-label="Permalink to &quot;9. 关闭容器前&quot;">​</a></h2><h2 id="_10-自定义作用域" tabindex="-1">10. 自定义作用域 <a class="header-anchor" href="#_10-自定义作用域" aria-label="Permalink to &quot;10. 自定义作用域&quot;">​</a></h2><p><a href="https://www.bilibili.com/video/BV13L411i7w5/?spm_id_from=333.1007.tianma.1-1-1.click&amp;vd_source=849278ccd12d4ef9a42e0b9d30307d66" target="_blank" rel="noreferrer">来源参考</a></p><h2 id="_11-接口的幂等性" tabindex="-1">11. 接口的幂等性 <a class="header-anchor" href="#_11-接口的幂等性" aria-label="Permalink to &quot;11. 接口的幂等性&quot;">​</a></h2>',19),t=[r];function n(d,c,h,s,_,p){return e(),i("div",null,t)}const m=a(o,[["render",n]]);export{b as __pageData,m as default};
