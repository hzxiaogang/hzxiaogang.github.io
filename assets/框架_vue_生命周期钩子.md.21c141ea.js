import{_ as s,o as a,c as n,V as e}from"./chunks/framework.364d6ed5.js";const u=JSON.parse('{"title":"生命周期钩子","description":"","frontmatter":{"title":"生命周期钩子","date":"2021-11-16T10:52:53.000Z","permalink":"/pages/9b6a7d/","categories":["框架","vue"],"tags":[null]},"headers":[],"relativePath":"框架/vue/生命周期钩子.md","filePath":"框架/vue/生命周期钩子.md","lastUpdated":1685623283000}'),l={name:"框架/vue/生命周期钩子.md"},t=e(`<h2 id="_1-常用的-10-个钩子" tabindex="-1">1.常用的 10 个钩子 <a class="header-anchor" href="#_1-常用的-10-个钩子" aria-label="Permalink to &quot;1.常用的 10 个钩子&quot;">​</a></h2><p>Vue 单页面从创建到销毁分为以下五个阶段。创建（create）， 挂载（mount） ，更新（update）， 激活（activated）， 卸载（unmounted）。其中每个阶段又分为前，后两个周期。所以 Vue 常用的生命周期钩子函数有以下 10 个。</p><h3 id="beforecreate" tabindex="-1">beforeCreate <a class="header-anchor" href="#beforecreate" aria-label="Permalink to &quot;beforeCreate&quot;">​</a></h3><p>在实例初始化之后、进行事件侦听和事件/侦听器的配置之前同步调用</p><h3 id="created" tabindex="-1">created <a class="header-anchor" href="#created" aria-label="Permalink to &quot;created&quot;">​</a></h3><p>在实例创建完成后被立即调用。在这一步骤中。实例已经完成对选项的处理。这意味着数据侦听，计算属性，方法，事件/侦听器的回调函数等内容已被配置完毕。然而，挂载阶段还没开始，<code>$el</code>属性目前尚不可用(既获取不到 DOM 实例)</p><h3 id="beforemount" tabindex="-1">beforeMount <a class="header-anchor" href="#beforemount" aria-label="Permalink to &quot;beforeMount&quot;">​</a></h3><p>在挂载开始之前被调用： 相关的<code>render</code>函数首次被调用</p><h3 id="mounted" tabindex="-1">mounted <a class="header-anchor" href="#mounted" aria-label="Permalink to &quot;mounted&quot;">​</a></h3><p>在实例挂载完成后被调用。这时传递给<code>app.mount</code>的元素已经被新创建的<code>vm.$el</code>替换了。<strong>mounted 不会</strong>保证所有的子组件也都被挂载完成。如果你希望等待整个视图都渲染完成，可以在<code>mounted</code>内部使用<code>vm.$nextTick</code>。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">mounted</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 仅在整个视图都被渲染之后才会运行的代码</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>该钩子再服务端渲染期间不被调用。</p><h3 id="beforeupdate" tabindex="-1">beforeUpdate <a class="header-anchor" href="#beforeupdate" aria-label="Permalink to &quot;beforeUpdate&quot;">​</a></h3><p>在数据发生改变后，DOM 被更新之前调用。该钩子再服务端渲染期间不被调用，因为只有初次渲染会在服务端运行。</p><h3 id="updated" tabindex="-1">updated <a class="header-anchor" href="#updated" aria-label="Permalink to &quot;updated&quot;">​</a></h3><p>在数据更改导致的虚拟 DOM 重新渲染和更新完毕之后调用。大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用<strong>计算属性</strong>或<strong>侦听器</strong>取而代之。</p><h3 id="activated" tabindex="-1">activated <a class="header-anchor" href="#activated" aria-label="Permalink to &quot;activated&quot;">​</a></h3><p>被 <code>keep-alive</code> 缓存的组件激活时调用。该钩子函数在服务端渲染期间不被调用。</p><h3 id="deactivated" tabindex="-1">deactivated <a class="header-anchor" href="#deactivated" aria-label="Permalink to &quot;deactivated&quot;">​</a></h3><p>被 <code>keep-alive</code> 缓存的组件失活时调用。该钩子函数在服务端渲染期间不被调用。</p><h3 id="beforeunmount" tabindex="-1">beforeUnmount <a class="header-anchor" href="#beforeunmount" aria-label="Permalink to &quot;beforeUnmount&quot;">​</a></h3><p>在卸载组件实例之前调用。在这个阶段，实例任然是完全正常的。该钩子在服务端渲染期间不被调用。</p><h3 id="unmounted" tabindex="-1">unmounted <a class="header-anchor" href="#unmounted" aria-label="Permalink to &quot;unmounted&quot;">​</a></h3><p>卸载组件实例后调用。调用此钩子时。组件实例的所有指令都被解除绑定，所有事件侦听器都被移除，所有子组件实例被卸载。 该钩子在服务端渲染期间不被调用。</p><h2 id="_2-捕获错误的-1-个钩子" tabindex="-1">2.捕获错误的 1 个钩子 <a class="header-anchor" href="#_2-捕获错误的-1-个钩子" aria-label="Permalink to &quot;2.捕获错误的 1 个钩子&quot;">​</a></h2><p>还有一个用户异常捕获的生命周期钩子函数</p><h3 id="errorcaptured" tabindex="-1">errorCaptured <a class="header-anchor" href="#errorcaptured" aria-label="Permalink to &quot;errorCaptured&quot;">​</a></h3><p>类型：<code>(err: Error, instance: Component, info: string) =&gt; ?boolean</code><br> 在捕获一个来自后代组件的错误调用时被调用。此钩子会接受到三个参数：<strong>错误对象</strong>，<strong>发生错误的组件实例</strong>，以及一个<strong>包含错误来源信息的字符串</strong>此钩子可以返回<code>false</code>以阻止该错误继续向上传播</p><h2 id="_3-调试的-2-个钩子" tabindex="-1">3. 调试的 2 个钩子 <a class="header-anchor" href="#_3-调试的-2-个钩子" aria-label="Permalink to &quot;3. 调试的 2 个钩子&quot;">​</a></h2><p>此外还有两个用于调试的钩子函数</p><h3 id="rendertracked" tabindex="-1">renderTracked <a class="header-anchor" href="#rendertracked" aria-label="Permalink to &quot;renderTracked&quot;">​</a></h3><p>类型：<code>(e: DebuggerEvent) =&gt; void</code><strong>跟踪</strong>虚拟 DOM <strong>重新渲染时</strong>调用。钩子接收<code>debugger event</code>作为参数。此事件告诉你那个操作跟踪了组件，以及该操作的目标对象和键</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      cart</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">renderTracked</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">/* 当组件第一次渲染时，这将被记录下来:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      key: &quot;cart&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      target: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        cart: 0</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      type: &quot;get&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    */</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">addToCart</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cart</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="rendertriggered" tabindex="-1">renderTriggered <a class="header-anchor" href="#rendertriggered" aria-label="Permalink to &quot;renderTriggered&quot;">​</a></h3><p>类型：<code>(e: DebuggerEvent) =&gt; void</code> 当虚拟 DOM<strong>重新渲染被触发</strong>时调用。和<code>renderTracked</code>类似。接收<code>debugger event</code>作为参数。此事件告诉你是什么操作触发了重新渲染，以及该操作的目标对象和键。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      cart</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">renderTriggered</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">addToCart</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">cart</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/* 这将导致 renderTriggered 被调用</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          key: &quot;cart&quot;,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          target: {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            cart: 1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          type: &quot;set&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="_4-组合式-api-生命周期钩子" tabindex="-1">4. 组合式 API 生命周期钩子 <a class="header-anchor" href="#_4-组合式-api-生命周期钩子" aria-label="Permalink to &quot;4. 组合式 API 生命周期钩子&quot;">​</a></h2><p>因为<code>setup</code>是围绕<code>beforeCreate</code> 和<code>created</code>生命周期钩子运行的。所以不需要显示的定义他们。在这两个钩子中编写的任何代码都应该直接在<code>setup</code>函数中编写。且<code>setup</code>先于这两个钩子执行。 我们可以通过在生命周期钩子前面加<code>on</code>来访问组件的生命周期钩子。 下表包含如何在<code>setup()</code>内部使用生命钩子。</p><table><thead><tr><th style="text-align:left;">选项式 API</th><th style="text-align:center;">Hook inside</th></tr></thead><tbody><tr><td style="text-align:left;">beforeCreate</td><td style="text-align:center;">Not Needed</td></tr><tr><td style="text-align:left;">created</td><td style="text-align:center;">Not Needed</td></tr><tr><td style="text-align:left;">beforeMount</td><td style="text-align:center;">onBeforeMount</td></tr><tr><td style="text-align:left;">mounted</td><td style="text-align:center;">onMounted</td></tr><tr><td style="text-align:left;">beforeUpdate</td><td style="text-align:center;">onBeforeUpdate</td></tr><tr><td style="text-align:left;">updated</td><td style="text-align:center;">onUpdated</td></tr><tr><td style="text-align:left;">beforeUnmount</td><td style="text-align:center;">onBeforeUnmount</td></tr><tr><td style="text-align:left;">unmounted</td><td style="text-align:center;">onUnmounted</td></tr><tr><td style="text-align:left;">errorCaptured</td><td style="text-align:center;">onErrorCaptured</td></tr><tr><td style="text-align:left;">renderTracked</td><td style="text-align:center;">onRenderTracked</td></tr><tr><td style="text-align:left;">renderTriggered</td><td style="text-align:center;">onRenderTriggered</td></tr><tr><td style="text-align:left;">activated</td><td style="text-align:center;">onActivated</td></tr><tr><td style="text-align:left;">deactivated</td><td style="text-align:center;">onDeactivated</td></tr></tbody></table>`,39),p=[t];function o(r,c,i,d,y,F){return a(),n("div",null,p)}const b=s(l,[["render",o]]);export{u as __pageData,b as default};
